{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u5b66\u4e60\u8def\u7ebf","text":""},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/","title":"\u7b97\u6cd5\u5b66\u4e60\uff1a","text":"<p>\u9761\u4e0d\u6709\u521d\u7cfb\u5217</p> <pre><code>def sayhi():\nreturn \"hi,Python\u5168\u6808\u5f00\u53d1\" # (1)\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#lc-daily-problem","title":"LC Daily Problem","text":""},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1078-bigram","title":"1078. Bigram \u5206\u8bcd","text":"<p>C++\u7b80\u5355\u5206\u8bcd</p> <ul> <li>find\u51fd\u6570\u8fd4\u56de\u4e0b\u6807</li> <li>erase\u51fd\u6570\u79fb\u9664\u4ecepos\u5f00\u59cb\u7684n\u4e2a\u5b57\u7b26</li> </ul> <pre><code>class Solution {\npublic:\nvector&lt;string&gt; findOcurrences(string text, string first, string second) {\nvector&lt;string&gt; ans;\nstring delimiter = \" \";\ntext += \" \";\nint pos = 0;\nstring word;\nvector&lt;string&gt; words;\nwhile ((pos = text.find(delimiter)) != string::npos) { // \u8fd9\u91cc\u4e0b\u6807\u521a\u597d\u662f\u5355\u8bcd\u7684\u957f\u5ea6\nword = text.substr(0, pos); words.push_back(word);\ntext.erase(0, pos + delimiter.length()); // \u79fb\u9664\u8be5\u5355\u8bcd\u4ee5\u53ca\u80cc\u540e\u7684\u7a7a\u683c\n}\nfor (int i = 0; i &lt; words.size() - 2; i++) {\nif (words[i]==first &amp;&amp; words[i+1]==second) {\nans.push_back(words[i+2]);\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1705","title":"1705. \u5403\u82f9\u679c\u7684\u6700\u5927\u6570\u76ee","text":"<p>\u5f53\u524dn\u5929\u6709\u82f9\u679c\u65f6\uff0c\u5c06\u5176\u52a0\u5165\u4f18\u5148\u961f\u5217(\u8150\u70c2\u65e5\u671f -- \u6570\u91cf)\uff0c\u5982\u679c\u5f53\u524d\u65e5\u671fday\u662f\u82f9\u679c\u7684\u8150\u70c2\u65e5\u671f\uff0c\u5c31\u5c06\u5176\u51fa\u961f\uff0c\u5426\u5219\u5f00\u59cb\u5403\u82f9\u679c\uff0c\u5982\u679c\u5f53\u524d\u5929\u7684\u82f9\u679c\u6570\u5927\u4e8e0\uff0c\u5f00\u5403\uff0c\u5982\u679c\u5403\u5b8c\u53d1\u73b0\u5f53\u524d\u5929\u82f9\u679c\u6570\u4e3a0\uff0c\u5c06\u5176\u51fa\u961f\uff0c\u540c\u65f6\u7d2f\u52a0\u5403\u5230\u7684\u82f9\u679c\u6570\uff0c\u6700\u7ec8\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de\u3002</p> <pre><code>class Solution {\npublic int eatenApples(int[] apples, int[] days) {\nPriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;&gt;((a, b) -&gt; a + days[a] - b - days[b]);\nint day = 0, ret = 0, n = apples.length;\nwhile (day &lt; n || !queue.isEmpty()) {\nif (day &lt; n &amp;&amp; apples[day] != 0) {\nqueue.offer(day);\n}\nwhile (!queue.isEmpty() &amp;&amp; queue.peek() + days[queue.peek()] &lt;= day) {\nqueue.poll();\n}\nif (!queue.isEmpty()) {\napples[queue.peek()]--;\nret++;\nif (apples[queue.peek()] == 0) {\nqueue.poll();\n}\n}\nday++;\n}\nreturn ret;\n}\n}\n</code></pre> <pre><code>class Solution {\npublic:\nint eatenApples(vector&lt;int&gt;&amp; apples, vector&lt;int&gt;&amp; days) {\nint ans = 0;\nint d = 0;\nmap&lt;int, int&gt; m; // (expire, cnt)\nwhile (d &lt; days.size() || !m.empty()) {\nif (d &lt; days.size()) m[days[d]+d-1] += apples[d];\n// \u5c1d\u8bd5\u4ecemap\u4e2d\u53d6\u51fa\u4e00\u4e2a\u6700\u63a5\u8fd1\u8fc7\u671f\u4f46\u662f\u6ca1\u6709\u8fc7\u671f\u7684\u82f9\u679c\nwhile(!m.empty()) {\nif (m.begin()-&gt;first &lt; d || m.begin()-&gt;second == 0) m.erase(m.begin()-&gt;first);\nelse {\n// \u5982\u679c\u627e\u5230\u4e86 \u6211\u4eec\u5c31\u5403\u6389\u5b83\nans++;\n// \u82f9\u679c\u6570\u8981\u51cf1\nm.begin()-&gt;second--;\nbreak;\n}\n}\nd++;\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1154","title":"1154. \u4e00\u5e74\u4e2d\u7684\u7b2c\u51e0\u5929","text":"<pre><code>class Solution {\npublic:\nint month_day[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\nint dayOfYear(string date) {\nint year = stoi(date.substr(0, 4));\nint month = stoi(date.substr(5, 2));\nint day = stoi(date.substr(8, 2));\nif (year % 400 == 0 || (year % 4 == 0 &amp;&amp; year % 100 != 0))\n++month_day[2];\nint ans = 0;\nfor (int i = 1; i &lt; month; i++)\nans += month_day[i];\nreturn ans + day;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#475","title":"475. \u4f9b\u6696\u5668","text":"<pre><code>class Solution {\npublic:\nint findRadius(vector&lt;int&gt; &amp;houses, vector&lt;int&gt; &amp;heaters) {\nint ans = 0;\nsort(heaters.begin(), heaters.end());\nfor (int house: houses) {\n// \u627e\u7b2c\u4e00\u4e2a\u5927\u4e8ehouse\u7684 heaters[j]\nint j = upper_bound(heaters.begin(), heaters.end(), house) - heaters.begin();\n// j - 1\u5373\u4e3a\u4e0b\u6807\u6700\u5927\u7684\u5c0f\u4e8ehouse\n// j - 1 &lt;= house &lt; j\n// ans = max(house - j + 1, j - house)\nint i = j - 1;\nint rightDistance = j &gt;= heaters.size() ? INT_MAX : heaters[j] - house;\nint leftDistance = i &lt; 0 ? INT_MAX : house - heaters[i];\nint curDistance = min(leftDistance, rightDistance);\nans = max(ans, curDistance);\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#397","title":"397. \u6574\u6570\u66ff\u6362","text":"<ol> <li>\u9012\u5f52</li> </ol> <pre><code>class Solution {\npublic:\nint integerReplacement(int n) {\nif (n == 1) {\nreturn 0;\n}\nif (n % 2 == 0) {\nreturn 1 + integerReplacement(n / 2);\n}\nreturn 2 + min(integerReplacement(n / 2), integerReplacement(n / 2 + 1));\n}\n};\n</code></pre> <ol> <li>\u8bb0\u5fc6\u5316\u641c\u7d22(\u57281\u7684\u57fa\u7840\u4e0a\u505a\u4f18\u5316) \u4f18\u5316\u5728\u6bcf\u5c42\u6700\u591a\u8ba1\u7b97\u4e24\u6b21</li> </ol> <pre><code>class Solution {\nprivate:\nunordered_map&lt;int, int&gt; memo;\npublic:\nint integerReplacement(int n) {\nif (n == 1) {\nreturn 0;\n}\nif (memo.count(n)) {\nreturn memo[n];\n}\nif (n % 2 == 0) {\nreturn memo[n] = 1 + integerReplacement(n / 2);\n}\nreturn memo[n] = 2 + min(integerReplacement(n / 2), integerReplacement(n / 2 + 1));\n}\n};\n</code></pre> <p>3.\u8d2a\u5fc3</p> <ul> <li>n\u4e3a\u5076\u6570 \u9996\u5148<code>n/2</code></li> <li>n\u4e3a\u5947\u6570 \u770b <code>n%4</code><ul> <li>= 1\uff0c<code>(n - 1) / 2</code></li> <li>= 3, <code>(n + 1) / 2</code>,\u9700\u8981\u7279\u6b8a\u5904\u7406<code>n==3</code>\u7684\u60c5\u51b5\u3002</li> </ul> </li> </ul> <p></p>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#563","title":"563. \u4e8c\u53c9\u6811\u7684\u5761\u5ea6","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nint ans = 0;\nint dfs(TreeNode* root) {\nif (root == nullptr) return 0;\nint left = dfs(root -&gt; left);\nint right = dfs(root -&gt; right);\nans += abs(left - right);\nreturn left + right + root -&gt; val; // cal\u51fd\u6570\u8fd4\u56de\u503c\u5b9a\u4e49\u4e3a\u8fd4\u56de\u5305\u542broot\u503c\u8282\u70b9\u5f97\u5761\u5ea6 \u4f46\u662f\u4e0d\u5f71\u54cdleft - right\n}\nint findTilt(TreeNode* root) {\ncal(root);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#_2","title":"\u7b97\u6cd5\u5b66\u4e60\uff1a","text":""},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#318","title":"318. \u6700\u5927\u5355\u8bcd\u957f\u5ea6\u4e58\u79ef","text":"<p>\u5148\u6309\u7167\u957f\u5ea6\u964d\u5e8f\u6392\u5e8f \u904d\u5386\u7edf\u8ba1 \u5982\u4f55\u5408\u9002\u76f4\u63a5break\u5373\u53ef</p> <pre><code>class Solution {\npublic:\nstatic bool cmp(string a, string b) {\nreturn a.length() &gt; b.length();\n}\nint maxProduct(vector&lt;string&gt;&amp; words) {\nint len = words.size();\nint ans = 0;\nsort(words.begin(), words.end(), cmp);\nfor (int i = 0; i &lt; len; i++) {\n//cout &lt;&lt; words[i] &lt;&lt; endl;\nvector&lt;int&gt; c(26, 0);\nfor (int j = 0; j &lt; words[i].length();j++) {\nc[words[i][j] - 'a']++;\n}\nfor (int j = i + 1; j &lt; len; j++) {\nint flag = 0;\nfor(int k = 0; k &lt; words[j].length(); k++) {\nif (c[words[j][k] - 'a'] != 0) {\nflag = 1;\nbreak;\n}\n}\nif (!flag) {\nans = max(ans, (int)words[i].length() * (int)words[j].length());\nbreak;\n}\n}\n}\nreturn ans;\n}\n};\n</code></pre> <p>\u5b98\u65b9\u9898\u89e3\uff1a\u752832\u4f4d\u6574\u6570\u6765\u7edf\u8ba1 \u901a\u8fc7\u4f4d\u8fd0\u7b97\u6765\u5224\u65ad\u4e24\u4e2a\u96c6\u5408\u5b58\u5728\u76f8\u4ea4\u7684\u5730\u65b9\u3002</p> <pre><code>class Solution {\npublic:\nint maxProduct(vector&lt;string&gt;&amp; words) {\nint length = words.size();\nvector&lt;int&gt; masks(length);\nfor (int i = 0; i &lt; length; i++) {\nstring word = words[i];\nint wordLength = word.size();\nfor (int j = 0; j &lt; wordLength; j++) {\nmasks[i] |= 1 &lt;&lt; (word[j] - 'a'); // 32\u4f4d\u8868\u793a\n}\n}\nint maxProd = 0;\nfor (int i = 0; i &lt; length; i++) {\nfor (int j = i + 1; j &lt; length; j++) {\nif ((masks[i] &amp; masks[j]) == 0) { // \u4f4d\u8fd0\u7b97\u7edf\u8ba1\nmaxProd = max(maxProd, int(words[i].size() * words[j].size()));\n}\n}\n}\nreturn maxProd;\n}\n};\n</code></pre> <ol> <li>\u5b98\u65b9\u9898\u89e3</li> <li>\u6211\u7684\u4f18\u5316\u8fc7\u540e\u7684\u7b97\u6cd5</li> <li>\u6ca1\u6709\u4f18\u5316\u7684\u76f4\u63a5\u904d\u5386</li> </ol> <p></p>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#495","title":"495. \u63d0\u83ab\u653b\u51fb","text":"<pre><code>class Solution {\npublic:\nint findPoisonedDuration(vector&lt;int&gt;&amp; timeSeries, int duration) {\nint ans = duration;\nfor (int i = 0; i &lt; timeSeries.size() - 1; i++) {\nif (timeSeries[i] + duration &gt;= timeSeries[i + 1]) ans += timeSeries[i + 1] - timeSeries[i];\nelse ans += duration;\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#299","title":"299. \u731c\u6570\u5b57\u6e38\u620f","text":"<p>\u5b57\u7b26\u4e32\u6a21\u62df</p> <pre><code>// \u6211\u7684\u9898\u89e3 \u5dee\u4e0d\u90fd\u7684\u601d\u8def\nclass Solution {\npublic:\nstring getHint(string secret, string guess) {\nstring ans = \"\";\nint bit[10], bit2[10];\nmemset(bit, 0, sizeof bit);\nmemset(bit2, 0, sizeof bit2);\nint cnt1 = 0, cnt2 = 0;\nfor (int i = 0; i &lt; secret.size(); i++) {\nif (secret[i] == guess[i]) cnt1++;\nbit[secret[i] - '0'] ++;\n}\nans += to_string(cnt1) + \"A\";\nfor (int i = 0; i &lt; guess.size(); i++) {\nif (secret[i] == guess[i]) {\nbit[secret[i] - '0'] --;\ncontinue;\n}\nbit2[guess[i] - '0']++;\n}\nfor (int i = 0; i &lt; 10; i++) {\ncnt2 += min(bit2[i], bit[i]);\n}\nans += to_string(cnt2) + \"B\";\nreturn ans;\n}\n};\n</code></pre> <pre><code>// \u5b98\u65b9\u9898\u89e3 \u66f4\u52a0\u7b80\u5355\u660e\u4e86\nclass Solution {\npublic:\nstring getHint(string secret, string guess) {\nint bulls = 0;\nvector&lt;int&gt; cntS(10), cntG(10);\nfor (int i = 0; i &lt; secret.length(); ++i) {\nif (secret[i] == guess[i]) {\n++bulls;\n} else {\n++cntS[secret[i] - '0'];\n++cntG[guess[i] - '0'];\n}\n}\nint cows = 0;\nfor (int i = 0; i &lt; 10; ++i) {\ncows += min(cntS[i], cntG[i]);\n}\nreturn to_string(bulls) + \"A\" + to_string(cows) + \"B\";\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1218","title":"1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217","text":"<p>\u7ebf\u6027DP\uff1a</p> <p>dp[arr[i]]\u8868\u793a\u4ee5arr[i]\u7ed3\u5c3e\u7684\u5b50\u5e8f\u5217\u7684\u6700\u5927\u957f\u5ea6</p> <p>\u90a3\u4e48\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a<code>dp[arr[i]] = dp[arr[i] - d] + 1</code></p> <pre><code>class Solution {\npublic:\nunordered_map&lt;int, int&gt; dp;\nint longestSubsequence(vector&lt;int&gt;&amp; arr, int difference) {\nint ans = 0;\nfor (auto &amp;it : arr) {\ndp[it] = dp[it - difference] + 1;\nans = max(ans, dp[it]);\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#869-2-20211028","title":"869. \u91cd\u65b0\u6392\u5e8f\u5f97\u5230 2 \u7684\u5e42\uff082021/10/28\uff09","text":"<p><code>string cnt(10, 0);</code></p> <p><code>c++ \u7684lamda\u8868\u8fbe\u5f0f</code></p> <pre><code>string countDigits(int n) {\nstring cnt(10, 0);\nwhile (n) {\n++cnt[n % 10];\nn /= 10;\n}\nreturn cnt;\n}\nunordered_set&lt;string&gt; powerOf2Digits;\nint init = []() {\nfor (int n = 1; n &lt;= 1e9; n &lt;&lt;= 1) {\npowerOf2Digits.insert(countDigits(n));\n}\nreturn 0;\n}();\nclass Solution {\npublic:\nbool reorderedPowerOf2(int n) {\nreturn powerOf2Digits.count(countDigits(n));\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#496-i20211026","title":"496. \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 I\uff082021/10/26\uff09","text":"<p>\u5355\u8c03\u6808\uff1a\u4ece\u540e\u5f80\u524d\u6309\u7167\u5e95\u5230\u9876\u9012\u51cf\u7684\u987a\u5e8f\u5b58\u653e</p> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; nextGreaterElement(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\nunordered_map&lt;int,int&gt; hashmap;\nstack&lt;int&gt; st;\nfor (int i = nums2.size() - 1; i &gt;= 0; --i) {\nint num = nums2[i];\nwhile (!st.empty() &amp;&amp; num &gt;= st.top()) {\nst.pop();\n}\nhashmap[num] = st.empty() ? -1 : st.top();\nst.push(num);\n}\nvector&lt;int&gt; res(nums1.size());\nfor (int i = 0; i &lt; nums1.size(); ++i) {\nres[i] = hashmap[nums1[i]];\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#240-ii20211025","title":"240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II(2021/10/25)","text":"<pre><code>class Solution {\npublic:\nbool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\nint m = matrix.size(), n = matrix[0].size();\nint x = 0, y = n - 1;\nwhile (x &lt; m &amp;&amp; y &gt;= 0) {\nif (matrix[x][y] == target) {\nreturn true;\n}\nif (matrix[x][y] &gt; target) {\n--y; // \u5217\u6570\u5de6\u79fb\u52a8 \u56e0\u4e3a\u5f53\u524d\u5217\u7684\u503c\u90fd\u6bd4target\u5927\n}\nelse {\n++x; // \u884c\u6570\u4e0b\u4e00 \u56e0\u4e3a\u5f53\u524d\u884c\u90fd\u6bd4target\u5c0f\n}\n}\nreturn false;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#5908","title":"5908. \u7edf\u8ba1\u6700\u9ad8\u5206\u7684\u8282\u70b9\u6570\u76ee","text":"<pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; child;\nvector&lt;int&gt; childTreeNums;\nlong long ans = INT_MIN;\nint len, sum, ret = 0;\nint countHighestScoreNodes(vector&lt;int&gt;&amp; parents) {\nlen = parents.size();\nchild = vector&lt;vector&lt;int&gt;&gt;(len);\nchildTreeNums = vector&lt;int&gt;(len,0);\n//\u4fdd\u5b58\u5b69\u5b50\u8282\u70b9\nfor(int i = 0; i &lt; len; ++i) if(parents[i] != -1) child[parents[i]].push_back(i);\ndfs(0);\n//\u8282\u70b9\u603b\u6570\nsum = childTreeNums[0];\n//\u83b7\u5f97\u7b49\u4e8e\u6700\u5927\u503c\u7684\u6700\u5927\u6570\u76ee\nfor(int i = 0; i &lt; len; i++) {\nlong long temp = getScore(i);\nif(temp &gt; ans){\nret = 1;\nans = temp;\n}else if(temp == ans) ret++;\n} return ret;\n}\n//\u83b7\u5f97\u6240\u6709\u5b50\u6811\u7684\u503c\nint dfs(int root){\nif(not child[root].size()) return (childTreeNums[root] = 1);\nfor(int i = 0; i &lt; child[root].size(); i++) childTreeNums[root] += dfs(child[root][i]);\nreturn ++childTreeNums[root];\n}\n//\u5f97\u51fa\u5220\u53bbitem\u8282\u70b9\u7684\u5206\u6570\uff0c\u6ce8\u610f\u8981\u5f00Long long\nlong long getScore(int item){\nlong long score = 1;\nscore = childTreeNums[0] - childTreeNums[item] == 0 ? 1 : childTreeNums[0] - childTreeNums[item];\nfor(int i = 0; i &lt; child[item].size(); i++) score *= childTreeNums[child[item][i]];\nreturn score;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#638","title":"638. \u5927\u793c\u5305","text":"<pre><code>class Solution {\npublic:\nvector&lt;int&gt; needs_;\nvector&lt;int&gt; price_;\nvector&lt;vector&lt;int&gt; &gt; special_;\nint n;\nmap&lt;vector&lt;int&gt;, int&gt; dp;\nint shoppingOffers(vector&lt;int&gt;&amp; price, vector&lt;vector&lt;int&gt;&gt;&amp; special, vector&lt;int&gt;&amp; needs) {\nprice_ = price;\nspecial_ = special;\nn = needs.size();\nreturn dfs(needs);\n}\n// \u8bb0\u5fc6\u5316\u641c\u7d22 \u51fd\u6570\nint dfs(vector&lt;int&gt; needs) {\nif (dp.count(needs) != 0)\nreturn dp[needs];\nint Min = 0;\nfor (int i = 0; i &lt; needs.size(); i++)\nMin += needs[i] * price_[i]; // \u8ba1\u7b97\u4e0d\u7528\u5927\u793c\u5305\u7684\u4ef7\u94b1\nfor (int i = 0; i &lt; special_.size(); i++) {\nvector&lt;int&gt; nextNeeds = needs; // \u6b64\u5904\u4e0d\u7528\u5f15\u7528 \u56e0\u4e3a\u6709\u5faa\u73af \u8981\u6df1\u641c\nbool flag = true; // \u662f\u5426\u8d85\u51fa\u6570\u91cf\n// \u8ba1\u7b97\u7b2ci\u4e2a\u5927\u793c\u5305\nfor (int j = 0; j &lt; n; j++) {\nif (special_[i][j] &gt; nextNeeds[j])\nflag = false;\nnextNeeds[j] -= special_[i][j];\n}\nif (!flag)\ncontinue; // continue\u8868\u793a\u4e0d\u8ba1\u7b97\u672c\u6b21\u5927\u793c\u5305 \nMin = min(Min, dfs(nextNeeds) + special_[i][n]);\n}\nreturn dp[needs] = Min; // \u7b49\u4ef7\u4e8ereturn dp[needs]\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#492","title":"492. \u6784\u9020\u77e9\u5f62","text":"<pre><code>class Solution {\npublic:\nvector&lt;int&gt; constructRectangle(int area) {\nint w = sqrt(1.0 * area);\nwhile (area % w) {\n--w;\n}\nreturn {area / w, w};\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#229-ii","title":"229. \u6c42\u4f17\u6570 II","text":"<p>\u6469\u5c14\u6295\u7968\uff1a\u89e3\u51b3\u7684\u95ee\u9898\u662f\u5982\u4f55\u5728\u4efb\u610f\u591a\u7684\u5019\u9009\u4eba\u4e2d\uff0c\u9009\u51fa\u7968\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u90a3\u4e2a\u4eba\u3002\u6ce8\u610f\uff0c\u662f\u8d85\u51fa\u4e00\u534a\u7968\u6570\u7684\u90a3\u4e2a\u4eba\u3002</p> <p>\u4e24\u5e45\u52a8\u753b\u6f14\u793a\u6469\u5c14\u6295\u7968\u6cd5\uff0c\u6700\u76f4\u89c2\u7684\u7406\u89e3\u65b9\u5f0f - \u6c42\u4f17\u6570 II - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)</p> <pre><code>class Solution {\npublic List&lt;Integer&gt; majorityElement(int[] nums) {\n// \u521b\u5efa\u8fd4\u56de\u503c\nList&lt;Integer&gt; res = new ArrayList&lt;&gt;();\nif (nums == null || nums.length == 0) return res;\n// \u521d\u59cb\u5316\u4e24\u4e2a\u5019\u9009\u4ebacandidate\uff0c\u548c\u4ed6\u4eec\u7684\u8ba1\u7968\nint cand1 = nums[0], count1 = 0;\nint cand2 = nums[0], count2 = 0;\n// \u6469\u5c14\u6295\u7968\u6cd5\uff0c\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff1a\u914d\u5bf9\u9636\u6bb5\u548c\u8ba1\u6570\u9636\u6bb5\n// \u914d\u5bf9\u9636\u6bb5\nfor (int num : nums) {\n// \u6295\u7968\nif (cand1 == num) {\ncount1++;\ncontinue;\n}\nif (cand2 == num) {\ncount2++;\ncontinue;\n}\n// \u7b2c1\u4e2a\u5019\u9009\u4eba\u914d\u5bf9\nif (count1 == 0) {\ncand1 = num;\ncount1++;\ncontinue;\n}\n// \u7b2c2\u4e2a\u5019\u9009\u4eba\u914d\u5bf9\nif (count2 == 0) {\ncand2 = num;\ncount2++;\ncontinue;\n}\ncount1--;\ncount2--;\n}\n// \u8ba1\u6570\u9636\u6bb5\n// \u627e\u5230\u4e86\u4e24\u4e2a\u5019\u9009\u4eba\u4e4b\u540e\uff0c\u9700\u8981\u786e\u5b9a\u7968\u6570\u662f\u5426\u6ee1\u8db3\u5927\u4e8e N/3\ncount1 = 0;\ncount2 = 0;\nfor (int num : nums) {\nif (cand1 == num) count1++;\nelse if (cand2 == num) count2++;\n}\nif (count1 &gt; nums.length / 3) res.add(cand1);\nif (count2 &gt; nums.length / 3) res.add(cand2);\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#66","title":"66. \u52a0\u4e00","text":"<p>\u627e\u5230\u7b2c\u4e00\u4e2a\u975e9\u7684\u6570\u5b57</p> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; plusOne(vector&lt;int&gt;&amp; digits) {\n//vector&lt;int&gt; ans;\nint len = digits.size();\nif (len == 1 &amp;&amp; digits[0] == 9) return{1, 0};\nif (digits[len - 1] + 1 == 10) {\nint i = len - 1;\ndigits[len - 1] += 1;\nwhile (i &gt;= 1 &amp;&amp; digits[i] == 10) {\ndigits[i] = 0;\ndigits[i - 1] += 1;\ni--;\n}\nif (i == 0 &amp;&amp; digits[0] == 10) {\ndigits[0] = 0;\ndigits.insert(digits.begin(), 1);\n}\n} else {\ndigits[len - 1] += 1;\n}\nreturn digits;\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; plusOne(vector&lt;int&gt;&amp; digits) {\nfor (int i = digits.size() - 1; i &gt;= 0; i--) {\ndigits[i]++;\nif (digits[i] &lt;= 9) return digits;\ndigits[i] = 0;\n}\ndigits.insert(digits.begin(), 1);\nreturn digits;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#453","title":"453. \u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u4f7f\u6570\u7ec4\u5143\u7d20\u76f8\u7b49","text":"<p>\u5bf9 n - 1\u505a\u52a0\u4e00\u64cd\u4f5c \u76f8\u5f53\u4e8e\u5bf9\u67d0\u4e2a\u6570\u505a-1\u64cd\u4f5c\uff0c\u6240\u4ee5\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u5c06\u5176\u5b83\u6570\u8f6c\u4e3a\u6700\u5c0f\u503c\u7684\u6b21\u6570</p> <pre><code>class Solution {\npublic:\nint minMoves(vector&lt;int&gt;&amp; nums) {\nint minNum = *min_element(nums.begin(),nums.end());\nint res = 0;\nfor (int num : nums) {\nres += num - minNum;\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#211-","title":"211. \u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1","text":"<p>\u6876\u7684\u601d\u60f3\uff1a\u5c06\u957f\u5ea6\u76f8\u540c\u7684word\u5b58\u653e\u8d77\u6765\u3002</p> <pre><code>class WordDictionary {\npublic:\nunordered_map&lt;int, vector&lt;string&gt; &gt; bucket;\nunordered_set&lt;string&gt; data;\nWordDictionary() {\n}\nvoid addWord(string word) {\ndata.insert(word);\nbucket[word.size()].push_back(word);\n}\nbool cmp(string word, string target) {\nif (word.size() != target.size()) return false;\nfor (int i = 0; i &lt; word.size(); i++) {\nif (word[i] == target[i] || word[i] == '.') {\n} else {\nreturn false;\n}\n}\nreturn true;\n}\nbool search(string word) {\nif (data.find(word) != data.end()) {\nreturn true;\n} else {\nint len = word.size();\nvector&lt;string&gt; &amp;tmp = bucket[len];\nfor (int i = 0; i &lt; tmp.size(); i++) {\nif (cmp(word, tmp[i])) return true;\n}\n}\nreturn false;\n}\n};\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary* obj = new WordDictionary();\n * obj-&gt;addWord(word);\n * bool param_2 = obj-&gt;search(word);\n */\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#476","title":"476. \u6570\u5b57\u7684\u8865\u6570","text":"<p>101 + 010 = 111</p> <pre><code>class Solution {\npublic:\nint findComplement(int num) {\nlong sum = 2;\nfor (int i = 31; i &gt;= 0; i--) {\nif ((num &gt;&gt; i) &amp; 1) {\nsum = (sum &lt;&lt; i) - 1;\nbreak;\n}\n}\nreturn sum - num;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#230-k","title":"230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20","text":"<p>\u65b9\u6cd5\u4e00\uff1a\u524d\u5e8f\u904d\u5386+\u5c0f\u9876\u5806</p> <p>\u65b9\u6cd5\u4e8c\uff1a\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u6709\u5e8f\u5e8f\u5217 \u8fd4\u56denums[k-1]\u5373\u53ef</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\npriority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; min_heap;\nvoid pre(TreeNode *root , int k) {\nif (!root) return;\nint val = - root -&gt; val; // \u56e0\u4e3a\u662f\u6c42\u7b2ck\u5c0f \u6240\u4ee5\u53d6\u53cd \u6c42\u7b2cK\u5927\u5373\u53ef\nif (min_heap.size() &lt; k) {\nmin_heap.push(val);\n} else {\nif (min_heap.top() &lt; val) { // \u6808\u9876\u5143\u7d20 \u6bd4\u5f53\u524d\u5806\u4e2d\u6700\u5c0f\u503c\u5927 \u6240\u4ee5\u63d2\u5165\nmin_heap.pop();\nmin_heap.push(val);\n}\n}\npre(root -&gt; left, k);\npre(root -&gt; right, k);\n}\nint kthSmallest(TreeNode* root, int k) {\npre(root, k);\nreturn -min_heap.top();\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; num;\nint kthSmallest(TreeNode* root, int k) {\ndfs(root);\nreturn num[k - 1];\n}\nvoid dfs(TreeNode *node) {\nif (node-&gt;left != NULL) dfs(node-&gt;left);\nnum.push_back(node-&gt;val);\nif (node-&gt;right != NULL) dfs(node-&gt;right);\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#38","title":"38. \u5916\u89c2\u6570\u5217","text":"<p>\u65b9\u6cd5\u4e00\uff1a\u904d\u5386\u751f\u6210 \u6bcf\u6b21\u7edf\u8ba1\u4e0a\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u8fde\u7eed\u6570\u5b57\u4e2a\u6570<code>(3)1(2)2(1)3(3)4(1)5(3)6</code>=<code>312213341536</code></p> <p>\u65b9\u6cd5\u4e8c\uff1a\u6253\u8868\uff0c\u56e0\u4e3a\u6570\u5b57\u8303\u56f4\u53ea\u670930\u4e2a</p> <pre><code>class Solution {\npublic:\nstring countAndSay(int n) {\nstring prev = \"1\";\nfor (int i = 2; i &lt;= n; ++i) {\nstring curr = \"\";\nint start = 0;\nint pos = 0;\nwhile (pos &lt; prev.size()) {\nwhile (pos &lt; prev.size() &amp;&amp; prev[pos] == prev[start]) {\npos++;\n}\ncurr += to_string(pos - start) + prev[start];\nstart = pos;\n}\nprev = curr;\n}\nreturn prev;\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nstring countAndSay(int n) {\nvector&lt;string&gt; arr = {\nn};\nreturn arr[n];        }\n};\n</code></pre> <pre><code>class Solution {\npublic:\nstring countAndSay(int n) {\nif (n == 1) {\nreturn \"1\";\n}\nstring before = countAndSay(n - 1);\nstring res;\nchar cur = before[0];\nint count = 1;\nfor (int i = 1; i &lt; before.size(); ++i) {\nif (before[i] != cur) {\nres += to_string(count) + cur;\ncur = before[i];\ncount = 0;\n}\ncount ++;\n}\nres += to_string(count) + cur;\nreturn res;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#offer-ii-069","title":"\u5251\u6307 Offer II 069. \u5c71\u5cf0\u6570\u7ec4\u7684\u9876\u90e8","text":"<p>\u4e8c\u5206\u5904\u7406</p> <pre><code>class Solution {\npublic:\nint peakIndexInMountainArray(vector&lt;int&gt;&amp; arr) {\nif (arr.size() == 3)\nreturn 1;\nint l = 1, r = arr.size() - 2;\nwhile(l &lt; r) {\nint mid = (l + r) / 2;\nif (arr[mid] &gt; arr[mid - 1] &amp;&amp; arr[mid] &gt; arr[mid + 1]) // \u5df2\u7ecf\u662f\u9876\u5cf0\nreturn mid;\nif (arr[mid] &lt; arr[mid + 1] &amp;&amp; arr[mid] &gt; arr[mid - 1]) // \u5728\u4e0a\u5347\u9636\u6bb5 \u9700\u8981\u5c06\u5de6\u7aef\u70b9\u7f29\u5c0f\nl = mid + 1;\nif (arr[mid] &gt; arr[mid + 1] &amp;&amp; arr[mid] &lt; arr[mid - 1]) // \u5728\u4e0b\u964d\u9636\u6bb5 \u7f29\u5c0f\u53f3\u7aef\u70b9\nr = mid - 1;\n}\nreturn l;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#29","title":"29. \u4e24\u6570\u76f8\u9664","text":"<p>60 / 8 = (60 - 32) / 8 + 4 = (60 - 32 -16) / 8 + 4 + 2 = (60 - 32 -16 -8) + 4 + 2 + 1 = 7</p> <pre><code>class Solution {\npublic:\nint divide(int dividend, int divisor) {\nif(dividend == 0) return 0;\nif(divisor == 1) return dividend;\nif(divisor == -1){\nif(dividend&gt;INT_MIN) return -dividend;// \u53ea\u8981\u4e0d\u662f\u6700\u5c0f\u7684\u90a3\u4e2a\u6574\u6570\uff0c\u90fd\u662f\u76f4\u63a5\u8fd4\u56de\u76f8\u53cd\u6570\u5c31\u597d\u5566\nreturn INT_MAX;// \u662f\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c\u90a3\u5c31\u8fd4\u56de\u6700\u5927\u7684\u6574\u6570\u5566\n}\nlong a = dividend;\nlong b = divisor;\nint sign = 1; if((a&gt;0&amp;&amp;b&lt;0) || (a&lt;0&amp;&amp;b&gt;0)){\nsign = -1;\n}\na = a&gt;0?a:-a;\nb = b&gt;0?b:-b;\nlong res = div(a,b);\nif(sign&gt;0)return res&gt;INT_MAX?INT_MAX:res;\nreturn -res;\n}\nint div(long a, long b){  // \u4f3c\u4e4e\u7cbe\u9ad3\u548c\u96be\u70b9\u5c31\u5728\u4e8e\u4e0b\u9762\u8fd9\u51e0\u53e5\nif(a&lt;b) return 0;\nlong count = 1;\nlong tb = b; // \u5728\u540e\u9762\u7684\u4ee3\u7801\u4e2d\u4e0d\u66f4\u65b0b\nwhile((tb+tb)&lt;=a){\ncount = count + count; // \u6700\u5c0f\u89e3\u7ffb\u500d\ntb = tb+tb; // \u5f53\u524d\u6d4b\u8bd5\u7684\u503c\u4e5f\u7ffb\u500d\n}\nreturn count + div(a-tb,b);\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#412-fizz-buzz","title":"412. Fizz Buzz","text":"<p>\u6a21\u62df\uff1a<code>emplace_back()</code>\u5728\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20\uff0cC++11\u6dfb\u52a0 \u76f8\u6bd4push_back()\u6ca1\u6709\u79fb\u52a8\u590d\u5236\u8fc7\u7a0b\uff0c\u76f4\u63a5\u5728\u672b\u5c3e\u521b\u5efa\u8be5\u5143\u7d20\uff0c\u6548\u7387\u66f4\u9ad8\u3002</p> <pre><code>class Solution {\npublic:\nvector&lt;string&gt; fizzBuzz(int n) {\nvector&lt;string&gt; answer;\nfor (int i = 1; i &lt;= n; i++) {\nstring curr;\nif (i % 3 == 0) {\ncurr\u3000+= \"Fizz\";\n}\nif (i % 5 == 0) {\ncurr += \"Buzz\";\n}\nif (curr.size() == 0) {\ncurr += to_string(i);\n}            answer.emplace_back(curr);\n}\nreturn answer;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#273","title":"273. \u6574\u6570\u8f6c\u6362\u82f1\u6587\u8868\u793a","text":"<p>\u975e\u8d1f\u6574\u6570num\u7684\u6700\u5927\u503c\u4e3a2^31 - 1\uff0c\u56e0\u6b64\u6700\u591a\u670910\u4f4d\u6570\uff0c\u5c06\u6574\u6570\u6309\u71673\u4f4d\u4e00\u7ec4\u5212\u5206\uff0c\u5c06\u6bcf\u4e00\u7ec4\u7684\u82f1\u6587\u8868\u793a\u62fc\u63a5\u4e4b\u540e\u5373\u53ef\u5f97\u5230\u6574\u6570num\u7684\u82f1\u6587\u8868\u793a\u3002</p> <p>\u6bcf\u4e00\u7ec4\u6700\u591a3\u4f4d\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u5f97\u5230\u6bcf\u4e00\u7ec4\u7684\u82f1\u6587\u8868\u793a\uff0c\u6839\u636e\u6570\u5b57\u6240\u5728\u8303\u56f4\uff0c\u5177\u4f53\u505a\u6cd5\u5982\u4e0b\uff1a</p> <ul> <li>\u5c0f\u4e8e20\u53ef\u4ee5\u76f4\u63a5\u77e5\u9053\u5176\u82f1\u6587\u8868\u793a</li> <li>\u5927\u4e8e20\u4e14\u5c0f\u4e8e100\u7684\u6570\u9996\u5148\u5c06\u5341\u4f4d\u8f6c\u6362\u4f4d\u82f1\u6587\u8868\u793a\uff0c\u5bf9\u4e2a\u4f4d\u8fdb\u884c\u9012\u5f52</li> <li>\u5927\u4e8e\u7b49\u4e8e100\u7684\u6570\u9996\u5148\u5c06\u767e\u4f4d\u8f6c\u6362\u4f4d\u82f1\u6587\u8868\u793a\uff0c\u7136\u540e\u5bf9\u5176\u4f59\u90e8\u5206\u9012\u5f52\u8f6c\u6362\u6210\u82f1\u6587\u8868\u793a\u3002</li> </ul> <pre><code>class Solution {\npublic:\nvector&lt;string&gt; singles = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\nvector&lt;string&gt; teens = {\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"};\nvector&lt;string&gt; tens = {\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};\nvector&lt;string&gt; thousands = {\"\", \"Thousand\", \"Million\", \"Billion\"};\nstring numberToWords(int num) {\nif (num == 0) {\nreturn \"Zero\";\n}\nstring sb;\nfor (int i = 3, unit = 1000000000; i &gt;= 0; i--, unit /= 1000) {\nint curNum = num / unit;\nif (curNum != 0) {\nnum -= curNum * unit;\nstring curr;\nrecursion(curr, curNum);\ncurr = curr + thousands[i] + \" \";\nsb = sb + curr;\n}\n}\nwhile (sb.back() == ' ') {\nsb.pop_back();\n}\nreturn sb;\n}\nvoid recursion(string &amp; curr, int num) {\nif (num == 0) {\nreturn;\n} else if (num &lt; 10) {\ncurr = curr + singles[num] + \" \";\n} else if (num &lt; 20) {\ncurr = curr + teens[num - 10] + \" \";\n} else if (num &lt; 100) {\ncurr = curr + tens[num / 10] + \" \";\nrecursion(curr, num % 10);\n} else {\ncurr = curr + singles[num / 100] + \" Hundred \";\nrecursion(curr, num % 100);\n}\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#441","title":"441. \u6392\u5217\u786c\u5e01","text":"<p>\u6570\u5b66\u63a8\u5bfck\u7684\u8303\u56f4</p> <pre><code>class Solution {\npublic:\nint arrangeCoins(int n) {\n// k (k + 1)  &gt;= 2n\n// k^2 + k &gt;= 2n\n// k2 + k + 1/4 &gt;= 2n + 1/4\n// (2k + 1)^2 &gt;= (8n + 1)\n//k &gt;= (\u221a(8n + 1) - 1) / 2\nreturn (sqrt(8 * (long)n + 1) - 1) / 2;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#187-dna","title":"187. \u91cd\u590d\u7684DNA\u5e8f\u5217","text":"<ol> <li>Hash\u8868O(NL)</li> <li>\u4f4d\u8fd0\u7b97O(N),\u56db\u4e2a\u6838\u82f7\u9178\uff0c\u5bf9\u5e940,1,2,3<ol> <li>\u6ed1\u52a8\u7a97\u53e3\u5de6\u79fb <code>x = x &lt;&lt; 2</code></li> <li>\u65b0\u7684ch\u8fdb\u5165\u7a97\u53e3<code>x = x | bin[ch]</code></li> <li>\u7a97\u53e3\u5de6\u8fb9\u7684\u5b57\u7b26\u79bb\u5f00\u7a97\u53e3<code>x = x &amp; ((1 &lt;&lt; 20) - 1)</code>,\u53ea\u4fdd\u7559\u4f4e20\u4f4d\uff0c\u5176\u4f59\u4f4d\u7f6e\u96f6\u3002</li> <li>\u4ee5\u4e0a\u4e09\u6b65\u5408\u5e76\u53ef\u4ee5\u7528O(1)\u7684\u65f6\u95f4\u8ba1\u7b97\u51fa\u4e0b\u4e00\u4e2a\u5b50\u4e32\u7684\u6574\u6570\u8868\u793a<code>x= ((x &lt;&lt; 2) | bin[ch] &amp; ((1 &lt;&lt; 20) - 1)</code></li> </ol> </li> </ol> <pre><code>class Solution {\nconst int L = 10;\npublic:\nvector&lt;string&gt; findRepeatedDnaSequences(string s) {\nvector&lt;string&gt; ans;\nunordered_map&lt;string, int&gt; cnt;\nint n = s.length();\nfor (int i = 0; i &lt;= n - L; ++i) {\nstring sub = s.substr(i, L);\nif (++cnt[sub] == 2) {\nans.push_back(sub);\n}\n}\nreturn ans;\n}\n};\n</code></pre> <pre><code>class Solution {\nconst int L = 10;\nunordered_map&lt;char, int&gt; bin = {{'A', 0}, {'C', 1}, {'G', 2}, {'T', 3}};\npublic:\nvector&lt;string&gt; findRepeatedDnaSequences(string s) {\nvector&lt;string&gt; ans;\nint n = s.length();\nif (n &lt;= L) {\nreturn ans;\n}\nint x = 0;\nfor (int i = 0; i &lt; L - 1; ++i) {\nx = (x &lt;&lt; 2) | bin[s[i]];\n}\nunordered_map&lt;int, int&gt; cnt;\nfor (int i = 0; i &lt;= n - L; ++i) {\nx = ((x &lt;&lt; 2) | bin[s[i + L - 1]]) &amp; ((1 &lt;&lt; (L * 2)) - 1);\nif (++cnt[x] == 2) {\nans.push_back(s.substr(i, L));\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#434","title":"434. \u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u6570","text":"<p>\u7b80\u5355\u6a21\u62df</p> <pre><code>class Solution {\npublic:\nint countSegments(string s) {\nint cur = 0;\nint len = s.length();\nwhile (cur  &lt; len &amp;&amp; s[cur] == ' ') cur++;\nint ans = 0;\nwhile (cur &lt; len) {\nwhile (cur &lt; len &amp;&amp; s[cur] != ' ') cur++;\nwhile (cur &lt; len &amp;&amp; s[cur] == ' ') cur++;\nans++;\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#414","title":"414. \u7b2c\u4e09\u5927\u7684\u6570","text":"<ol> <li>\u6392\u5e8f\u53d6\u7b2c\u4e09\u5927\u6570</li> <li>\u501f\u52a9\u6709\u5e8f\u96c6\u5408</li> <li>\u7ef4\u62a4\u4e09\u4e2a\u6570</li> </ol> <pre><code>class Solution {\npublic:\nint thirdMax(vector&lt;int&gt; &amp;nums) {\nsort(nums.begin(), nums.end(), greater&lt;&gt;());\nfor (int i = 1, diff = 1; i &lt; nums.size(); ++i) {\nif (nums[i] != nums[i - 1] &amp;&amp; ++diff == 3) { // \u6b64\u65f6 nums[i] \u5c31\u662f\u7b2c\u4e09\u5927\u7684\u6570\nreturn nums[i];\n}\n}\nreturn nums[0];\n}\n};\n</code></pre> <p>set\u81ea\u6392\u5e8f</p> <pre><code>class Solution {\npublic:\nint thirdMax(vector&lt;int&gt; &amp;nums) {\nset&lt;int&gt; s;\nfor (int num : nums) {\ns.insert(num);\nif (s.size() &gt; 3) {\ns.erase(s.begin());\n}\n}\nreturn s.size() == 3 ? *s.begin() : *s.rbegin();\n}\n};\n</code></pre> <p>\u7ef4\u62a4\u4e09\u4e2a\u6570, \u501f\u52a9\u6307\u9488\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u6570\u5b57\u8303\u56f4\uff0c\u7528\u7a7a\u8868\u793a\u65e0\u7a77\u5c0f</p> <pre><code>class Solution {\npublic:\nint thirdMax(vector&lt;int&gt; &amp;nums) {\nlong a = LONG_MIN, b = LONG_MIN, c = LONG_MIN;\nfor (long num : nums) {\nif (num &gt; a) {\nc = b;\nb = a;\na = num;\n} else if (a &gt; num &amp;&amp; num &gt; b) {\nc = b;\nb = num;\n} else if (b &gt; num &amp;&amp; num &gt; c) {\nc = num;\n}\n}\nreturn c == LONG_MIN ? a : c;\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nint thirdMax(vector&lt;int&gt; &amp;nums) {\nint *a = nullptr, *b = nullptr, *c = nullptr;\nfor (int &amp;num : nums) {\nif (a == nullptr || num &gt; *a) {\nc = b;\nb = a;\na = &amp;num;\n} else if (*a &gt; num &amp;&amp; (b == nullptr || num &gt; *b)) {\nc = b;\nb = &amp;num;\n} else if (b != nullptr &amp;&amp; *b &gt; num &amp;&amp; (c == nullptr || num &gt; *c)) {\nc = &amp;num;\n}\n}\nreturn c == nullptr ? *a : *c;\n}\n};\n</code></pre> <p>\u501f\u52a9\u5e93\u51fd\u6570: unique\u8fd4\u56de\u53bb\u91cd\u540e\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e, \u4f46\u53ea\u662f\u903b\u8f91\u5220\u9664\uff0cvector\u5927\u5c0f\u5e76\u6ca1\u6709\u53d8\u5316\u3002</p> <pre><code>class Solution {\npublic:\nint thirdMax(vector&lt;int&gt;&amp; nums) {\nsort(nums.begin(), nums.end(), greater&lt;int&gt;());\nnums.erase(unique(nums.begin(), nums.end()), nums.end());\nreturn nums.size() &lt; 3 ? nums[0] : nums[2];\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#482","title":"482. \u5bc6\u94a5\u683c\u5f0f\u5316","text":"<p>\u5b57\u7b26\u4e32\u6a21\u62df</p> <pre><code>class Solution {\npublic:\nstring licenseKeyFormatting(string s, int k) {\nint cnt = 0;\nstring str = \"\";\nfor (int i = 0; i &lt; s.length(); i++) {\nif (s[i] != '-') cnt++, str += s[i];\n}\nint g = cnt / k;\nint r = cnt % k;\nstring ans = \"\";\nfor (int i = 0; i &lt; r; i++) {\nans += toupper(str[i]);\n}\nif (r &amp;&amp; cnt &gt; 1)\nans += \"-\";\nfor (int i = 0; i &lt; g; i++) {\nfor (int j = 0; j  &lt; k; j++) {\nans += toupper(str[i *k + j + r]);\n}\nif (i != g - 1)\nans += \"-\";\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#166","title":"166. \u5206\u6570\u5230\u5c0f\u6570","text":"<p>\u7528map\u5b58\u4e00\u4e0b\u5f53\u524d\u88ab\u9664\u6570\u5bf9\u5e94\u5728\u7ed3\u679c\u5c0f\u6570index\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\u8bf4\u660e\u6709\u5faa\u73af\u8282\uff0c\u90a3\u4e48\u5c31\u505a\u5b57\u7b26\u4e32\u505a\u88c1\u526a\u3002</p> <p>1\u3001\u6570\u5b57\u6b63\u8d1f\u5904\u7406\uff1a\u90fd\u8f6c\u4e3a\u6b63\u6570</p> <p>2\u3001\u5f97\u5230\u5c0f\u6570\u524d\u7684\u6574\u6570</p> <p>3\u3001\u53d6\u4f59\u5f97\u5230\u540e\u9762\u5c0f\u6570</p> <pre><code>class Solution {\nusing ll = long long;\npublic:\nstring fractionToDecimal(int numerator, int denominator) {\nll n = numerator, d = denominator;\nstring ret;\n// \u8ba1\u7b97\u6574\u6570\u90e8\u5206\n// \u5224\u65ad\u8d1f\u6570\nif(n * d &lt; 0) ret += \"-\";\nll a = n / d;\nif(a &lt; 0) a *= -1;\nret += to_string(a);\nif(n &lt; 0) n*= -1;\nif(d &lt; 0) d*= -1;\n// \u8ba1\u7b97\u5c0f\u6570\u90e8\u5206\nn %= d;\nif(n == 0) {\n// \u65e0\u5c0f\u6570\nreturn ret;\n}\nret += \".\";\n// \u8fde\u9664\n// \u54c8\u5e0c\u8868\u8bb0\u5f55\u662f\u5426\u6709\u6570\u7ec4\u7b2c\u4e8c\u6b21\u51fa\u73b0\nunordered_map&lt;int, int&gt; st;\nstring t;\nint index = 0;\nwhile(n &amp;&amp; !st.count(n)) {\nst[n] = index++;\nn *= 10;\nt.push_back((char)(n / d + '0'));\nn %= d;\n}\nif(n != 0) {\n// \u8bf4\u660e\u51fa\u73b0\u4e86\u5faa\u73af\uff0c\u6b64\u65f6\u5bf9\u5faa\u73af\u90e8\u5206 [st[n], index] \u52a0\u62ec\u53f7\nret += t.substr(0, st[n]) + \"(\" + t.substr(st[n]) + \")\";\n} else {\nret += t;\n}\nreturn ret;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#405","title":"405. \u6570\u5b57\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570","text":"<p>\u56db\u4f4d\u4e00\u4f4d\u505a\u8fd0\u7b97</p> <pre><code>class Solution {\npublic:\nstring toHex(int num) {\nif (num == 0) {\nreturn \"0\";\n}\nstring sb;\nfor (int i = 7; i &gt;= 0; i --) {\nint val = (num &gt;&gt; (4 * i)) &amp; 0xf;// 1111\nif (sb.length() &gt; 0 || val &gt; 0) {\nchar digit = val &lt; 10 ? (char) ('0' + val) : (char) ('a' + val - 10);\nsb.push_back(digit);\n}\n}\nreturn sb;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#223","title":"223. \u77e9\u5f62\u9762\u79ef","text":"<p>\u5bb9\u65a5\u539f\u7406 + x\uff0cy\u65b9\u5411\u6295\u5f71\u7b97\u9762\u79ef</p> <pre><code>class Solution {\npublic:\nint computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {\nint area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);\nint overlapWidth = min(ax2, bx2) - max(ax1, bx1), overlapHeight = min(ay2, by2) - max(ay1, by1);\nint overlapArea = max(overlapWidth, 0) * max(overlapHeight, 0);\nreturn area1 + area2 - overlapArea;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#326-3","title":"326. 3\u7684\u5e42","text":"<p>\u8bd5\u9664\u6cd5</p> <pre><code>class Solution {\npublic:\nbool isPowerOfThree(int n) {\nwhile (n &amp;&amp; n % 3 == 0) {\nn /= 3;\n}\nreturn n == 1;\n}\n};\n</code></pre> <p>\u572832\u4f4d\u6574\u6570\u4e2d 3\u7684\u5e42\u7684\u6700\u5927\u4e3a3^19 = 1162261467\uff0c \u53ea\u8981\u8bc1\u660en\u662f\u8be5\u503c\u7684\u7ea6\u6570\u5373\u53ef</p> <pre><code>class Solution {\npublic:\nbool isPowerOfThree(int n) {\nreturn n &gt; 0 &amp;&amp; 1162261467 % n == 0;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#58","title":"58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6","text":"<pre><code>class Solution {\npublic:\nint lengthOfLastWord(string s) {\nint len = s.size() - 1;\nint ans = 0;\nwhile (len &gt;= 0 &amp;&amp; s[len] == ' ') len--;\nwhile (len &gt;= 0 &amp;&amp; s[len] != ' ') ans++, len--;\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#725","title":"725. \u5206\u9694\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nvector&lt;ListNode*&gt; splitListToParts(ListNode* head, int k) {\nint len = 0;\nListNode* tmp = head;\nvector&lt;ListNode*&gt;  ans;\nwhile (tmp) {\nlen ++;\ntmp = tmp -&gt; next;\n}\nint remain = len % k;\nint size = len / k;\nListNode * start = head, *end = head;\nfor (int i = 0; i &lt; k; i++) {\nfor (int j = 0; j &lt; size - 1; j++) {\nend = end -&gt; next;\n}\nif (remain) {\nremain--;\nif (end != nullptr &amp;&amp; end != start)\nend = end -&gt; next;\nelse if (end != nullptr &amp;&amp; size == 1)\nend = end -&gt; next;\n}\nans.push_back(start);\nif (end != nullptr) {\nstart = end -&gt; next;\nend -&gt; next = nullptr;\nend = start;\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#524","title":"524. \u901a\u8fc7\u5220\u9664\u5b57\u6bcd\u5339\u914d\u5230\u5b57\u5178\u91cc\u6700\u957f\u5355\u8bcd","text":"<pre><code>class Solution {\npublic:\nbool check(string &amp;tar, string &amp;tmp) {\nint j = 0;\nif (tar.length() &lt; tmp.length()) return false;\nfor (int i = 0; i &lt; tmp.length(); i++) {\nwhile (j &lt; tar.length() &amp;&amp; tar[j] != tmp[i]) j++;\nif (j == tar.length()) return false;\nelse j++;\n}\nreturn true;\n}\nstatic bool cmp(string a, string b) {\nif (a.length() == b.length()){\nreturn a &lt; b;\n}\nreturn a.length() &gt; b.length();\n}\nstring findLongestWord(string s, vector&lt;string&gt;&amp; dictionary) {\nint len = dictionary.size();\nstring ans = \"\";\nfor (int i = 0; i &lt; len; i++) {\nstring str = dictionary[i];\nif (check(s, str)) {\n//candidater.push_back(str);\nif (ans.length() &lt; str.length()) {\nans = str;\n} else if (ans.length() == str.length() &amp;&amp; str &lt; ans)\nans = str;\n}\n}\nreturn ans;\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nbool isSubsequence(string s, string t) {\n// \u5224\u65ad t \u662f\u5426\u662f s \u7684\u5b50\u5e8f\u5217\nint n = s.size(), m = t.size();\n// \u5982\u679c t \u957f\u5ea6\u5927\u4e8e s\uff0c\u4e00\u5b9a\u4e0d\u662f\u5b50\u5e8f\u5217\nif(m &gt; n) return false;\n// \u8bb0\u5f55\u5f53\u524d s \u4e2d\u5339\u914d\u5230\u4e86\u54ea\u4e2a\u4f4d\u7f6e\nint i = 0;\nfor(char ch : t) {\nwhile(i &lt; n &amp;&amp; s[i] != ch) i++;\nif(i &gt;= n) return false;\n// \u6b64\u65f6 s[i] = ch\uff0c\u4e0b\u6b21\u8981\u4ece s[i + 1] \u5f00\u59cb\u5339\u914d\ni++;\n}\nreturn true;\n}\nstring findLongestWord(string s, vector&lt;string&gt;&amp; dictionary) {\n// \u66f4\u957f\u7684\u3001\u5b57\u5178\u5e8f\u66f4\u5c0f\u7684\u6392\u5728\u524d\u9762\uff0c\u8fd9\u6837\u4e00\u65e6\u627e\u5230\uff0c\u5c31\u662f\u7ed3\u679c\nsort(dictionary.begin(), dictionary.end(), [&amp;](string &amp;a, string &amp;b) {\nif(a.size() == b.size()) return a &lt; b;\nreturn a.size() &gt; b.size();\n});\nfor(string &amp;t : dictionary) {\nif(isSubsequence(s, t)) return t;\n}\n// \u5982\u679c\u6ca1\u627e\u5230\nreturn \"\";\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#678","title":"678. \u6709\u6548\u7684\u62ec\u53f7\u5b57\u7b26\u4e32","text":"<p>\u53cc\u5411\u626b\u63cf\uff1a</p> <ul> <li>\u4ece\u5de6\u5411\u53f3\u5982\u679c\u5b58\u5728<code>)</code>\u5c31\u9700\u8981\u5c06\u5de6\u62ec\u53f7\u7684\u6570\u91cf\u51cf\u4e00\uff0c\u5426\u5219\u5176\u5b83\u60c5\u51b5+1</li> <li>\u4ece\u53f3\u5411\u5de6\u5982\u679c\u5b58\u5728<code>(</code>\u5c31\u9700\u8981\u5c06\u53f3\u62ec\u53f7\u7684\u6570\u91cf\u51cf\u4e00\uff0c\u5426\u5219\u5176\u5b83\u60c5\u51b5+1</li> <li>\u5982\u679c\u5de6\u53f3\u626b\u63cf\u90fd\u6ca1\u6709\u95ee\u9898\u7684\u8bdd\u5c31\u8bf4\u660e\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5b57\u7b26\u4e32</li> </ul> <pre><code>class Solution {\npublic:\nbool checkValidString(string s) {\nint left = 0, right = 0, size = s.size();\nfor(int i = 0; i &lt; size; ++i)\n{\nleft  += s[i] == ')' ? -1 : 1;              //\u4ece\u5de6\u5411\u53f3\nright += s[size-1-i] == '(' ? -1 : 1;       //\u4ece\u53f3\u5411\u5de6\nif(left &lt; 0 || right &lt; 0)    return false;  //\u65e0\u6548\n}\nreturn true;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#600-1","title":"600. \u4e0d\u542b\u8fde\u7eed1\u7684\u975e\u8d1f\u6574\u6570","text":"<p>\u66b4\u529b\u4f1a\u8d85\u65f6</p> <p>\u53ef\u4ee5\u53bb\u6784\u9020\u8fd9\u6837\u7684\u4e00\u4e2a\u975e\u8d1f\u6574\u6570</p> <ul> <li> <p>\u5982\u679c\u524d\u4e00\u4f4d\u662f0\u5219\u4e0b\u4e00\u4f4d\u53ef\u4ee5\u662f0\u4e5f\u53ef\u4ee5\u662f1 </p> </li> <li> <p>\u5982\u679c\u524d\u4e00\u4f4d\u662f1\u5219\u4e0b\u4e00\u4f4d\u53ea\u80fd\u662f0</p> </li> </ul> <pre><code>class Solution {\npublic:\nint ans = 0;\nint g_n;\nset&lt;int&gt; st;\nint findIntegers(int n) {\ng_n = n;\nans = 1;\ndfs(1);\nreturn ans;\n}\nvoid dfs(int cur){\nif(cur &gt; g_n) return;\nans++;\nif((cur &amp; 1)){\ndfs(cur &lt;&lt; 1);\n} else{\ndfs(cur &lt;&lt; 1);\ndfs((cur &lt;&lt; 1)+1);\n}\nreturn;\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nint nums[32];\nint cnt = 0;\nconst int MAX = 1e9;\nvoid init() {\nint cur = 3;\nwhile (cur &lt;= MAX) {\nnums[cnt] = cur;\ncnt ++;\ncur &lt;&lt;= 1;\n}\n}\nbool check(int x) {\nfor (int i = 0; i &lt;cnt ;i++) {\nif ((x &amp; nums[i]) == nums[i]) {\nreturn false;\n}\n}\nreturn true;\n}\nint findIntegers(int n) {\ninit();\nint ans = 0;\nfor (int i = 0; i &lt;= n; i++) {\nif (check(i)) ans++;\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1221","title":"1221. \u5206\u5272\u5e73\u8861\u5b57\u7b26\u4e32","text":"<p>\u5bf9\u4efb\u4e00\u5e73\u8861\u5b57\u7b26\u4e32\u4e2d\u7684\u6700\u77ed\u5e73\u8861\u524d\u7f00\u505a\u5207\u5206 \u5207\u5206\u540e\u7684\u5f97\u5230\u4e24\u4e2a\u5e73\u8861\u524d\u7f00\u3002</p> <pre><code>class Solution {\npublic:\nint balancedStringSplit(string s) {\nint ans = 0, d = 0;\nfor (char ch : s) {\nch == 'L' ? ++d : --d;\nif (d == 0) {\n++ans;\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#704","title":"704. \u4e8c\u5206\u67e5\u627e","text":"<pre><code>class Solution {\npublic:\nint search(vector&lt;int&gt;&amp; nums, int target) {\nint l = 0, r = nums.size();\nint mid = (l + r) / 2;\nwhile (l &lt;= r) {\nmid = (l + r) / 2;\nif (nums[mid] == target) {\nreturn mid;\n} else if (nums[mid] &gt; target) {\nr = mid - 1;\n} else {\nl = mid + 1;\n}\n}\nreturn -1;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#470-rand7-rand10","title":"470. \u7528 Rand7() \u5b9e\u73b0 Rand10()","text":"<p>rand10 = rand5  * 2 + (rand2) * ( -1)</p> <pre><code>// The rand7() API is already defined for you.\n// int rand7();\n// @return a random integer in the range 1 to 7\nclass Solution {\npublic:\nint rand10() {\nint a = rand5(); int b = rand2(); return 2 * a + (b - 1);\n}\n// [1- 5]\nint rand5() {\nint ans = rand7();\nwhile (ans &gt; 5) ans = rand7();\nreturn ans;\n}\n// [0 , 1]\nint rand2() {\nint ans = rand7();\nwhile (ans == 7) ans = rand7();\nreturn ans % 2;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#offer-22-k","title":"\u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\nListNode* getKthFromEnd(ListNode* head, int k) {\nListNode *new_head = head, *ans = head;\nfor (int i = 0; i &lt; k; i++) {\nif (new_head)\nnew_head = new_head -&gt; next;\n}\nwhile (new_head) {\nans = ans -&gt; next;\nnew_head = new_head -&gt;next;\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1109","title":"1109. \u822a\u73ed\u9884\u8ba2\u7edf\u8ba1","text":"<p>\u5dee\u5206\uff1a\u5dee\u5206\u6570\u7ec4\u5bf9\u5e94\u7684\u6982\u5ff5\u662f\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u5bf9\u4e8e\u6570\u7ec4 [1,2,2,4][1,2,2,4]\uff0c\u5176\u5dee\u5206\u6570\u7ec4\u4e3a [1,1,0,2][1,1,0,2]\uff0c\u5dee\u5206\u6570\u7ec4\u7684\u7b2c ii \u4e2a\u6570\u5373\u4e3a\u539f\u6570\u7ec4\u7684\u7b2c i-1i\u22121 \u4e2a\u5143\u7d20\u548c\u7b2c ii \u4e2a\u5143\u7d20\u7684\u5dee\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5bf9\u5dee\u5206\u6570\u7ec4\u6c42\u524d\u7f00\u548c\u5373\u53ef\u5f97\u5230\u539f\u6570\u7ec4\u3002</p> <p>\u5dee\u5206\u6570\u7ec4\u7684\u6027\u8d28\u662f\uff0c\u5f53\u6211\u4eec\u5e0c\u671b\u5bf9\u539f\u6570\u7ec4\u7684\u67d0\u4e00\u4e2a\u533a\u95f4<code>[l,r][l,r]</code>\u65bd\u52a0\u4e00\u4e2a\u589e\u91cf<code>inc</code> \u65f6\uff0c\u5dee\u5206\u6570\u7ec4 d \u5bf9\u5e94\u7684\u6539\u53d8\u662f\uff1a<code>d[l][l]</code>\u589e\u52a0 <code>inc</code>\uff0c<code>d[r+1][r+1]</code> \u51cf\u5c11 <code>inc</code></p> <p>\u6362\u4e00\u79cd\u601d\u8def\u7406\u89e3\u9898\u610f\uff0c\u5c06\u95ee\u9898\u8f6c\u6362\u4e3a\uff1a\u67d0\u516c\u4ea4\u8f66\u5171\u6709 n \u7ad9\uff0c\u7b2c i \u6761\u8bb0\u5f55 bookings[i] = [i, j, k] \u8868\u793a\u5728 i \u7ad9\u4e0a\u8f66 k \u4eba\uff0c\u4e58\u5750\u5230 j \u7ad9\uff0c\u5728 j+1 \u7ad9\u4e0b\u8f66\uff0c\u9700\u8981\u6309\u7167\u8f66\u7ad9\u987a\u5e8f\u8fd4\u56de\u6bcf\u4e00\u7ad9\u8f66\u4e0a\u7684\u4eba\u6570</p> <p>\u6839\u636e 1 \u7684\u601d\u8def\uff0c\u5b9a\u4e49 counter[] \u6570\u7ec4\u8bb0\u5f55\u6bcf\u7ad9\u7684\u4eba\u6570\u53d8\u5316\uff0ccounter[i] \u8868\u793a\u7b2c i+1 \u7ad9\u3002\u904d\u5386 bookings[]\uff1abookings[i] = [i, j, k] \u8868\u793a\u5728 i \u7ad9\u589e\u52a0 k \u4eba\u5373 counters[i-1] += k\uff0c\u5728 j+1 \u7ad9\u51cf\u5c11 k \u4eba\u5373 counters[j] -= k</p> <p>\u904d\u5386\uff08\u6574\u7406\uff09counter[] \u6570\u7ec4\uff0c\u5f97\u5230\u6bcf\u7ad9\u603b\u4eba\u6570\uff1a \u6bcf\u7ad9\u7684\u4eba\u6570\u4e3a\u524d\u4e00\u7ad9\u4eba\u6570\u52a0\u4e0a\u5f53\u524d\u4eba\u6570\u53d8\u5316 counters[i] += counters[i - 1]</p>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#165","title":"165. \u6bd4\u8f83\u7248\u672c\u53f7","text":"<p>\u5207\u5206\u5b57\u7b26\u4e32 --- java\u7248\u672c</p> <p>\u6309\u7167.\u5207\u5206\u7136\u540e\u6bd4\u8f83\u6bcf\u4e00\u8282\u7684\u5b57\u7b26\u4e32\u7684int\u503c</p> <pre><code>class Solution {\npublic int compareVersion(String version1, String version2) {\nString[] v1 = version1.split(\"\\\\.\");\nString[] v2 = version2.split(\"\\\\.\");\nfor (int i = 0; i &lt; v1.length || i &lt; v2.length; ++i) {\nint x = 0, y = 0;\nif (i &lt; v1.length) {\nx = Integer.parseInt(v1[i]);\n}\nif (i &lt; v2.length) {\ny = Integer.parseInt(v2[i]);\n}\nif (x &gt; y) {\nreturn 1;\n}\nif (x &lt; y) {\nreturn -1;\n}\n}\nreturn 0;\n}\n}\n</code></pre> <p>\u53cc\u6307\u9488C++:\u9898\u76ee\u4e2d\u63d0\u5230\u6bcf\u4e00\u8282\u7684\u7248\u672c\u53f7\u90fd\u53ef\u4ee5\u5b58\u4e0b\u6765</p> <pre><code>class Solution {\npublic:\nint compareVersion(string version1, string version2) {\nint n = version1.length(), m = version2.length();\nint i = 0, j = 0;\nwhile (i &lt; n || j &lt; m) {\nint x = 0;\nfor (; i &lt; n &amp;&amp; version1[i] != '.'; ++i) {\nx = x * 10 + version1[i] - '0';\n}\n++i; // \u8df3\u8fc7\u70b9\u53f7\nint y = 0;\nfor (; j &lt; m &amp;&amp; version2[j] != '.'; ++j) {\ny = y * 10 + version2[j] - '0';\n}\n++j; // \u8df3\u8fc7\u70b9\u53f7\nif (x != y) {\nreturn x &gt; y ? 1 : -1;\n}\n}\nreturn 0;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1646","title":"1646. \u83b7\u53d6\u751f\u6210\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c","text":"<p>\u7b80\u5355\u6a21\u62df</p> <p><code>max_element(v.begin(), v.end())</code></p> <pre><code>class Solution {\npublic:\nint getMaximumGenerated(int n) {\nif (n == 0) {\nreturn 0;\n}\nvector&lt;int&gt; nums(n + 1);\nnums[1] = 1;\nfor (int i = 2; i &lt;= n; ++i) {\nnums[i] = nums[i / 2] + i % 2 * nums[i / 2 + 1];\n}\nreturn *max_element(nums.begin(), nums.end());\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#576","title":"576. \u51fa\u754c\u7684\u8def\u5f84\u6570","text":"<p>\u6df1\u641c\u4e00\u5b9a\u4f1a\u8d85\u65f6\uff0c\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u91cd\u590d\u8ba1\u7b97\u4e86 \u6240\u4ee5\u9700\u8981\u4fdd\u7559\u72b6\u6001\uff1a\u5750\u6807+\u5269\u4e0b\u7684\u6b65\u6570\u5373\u53ef\u552f\u4e00\u786e\u5b9a\u662f\u76f8\u540c\u72b6\u6001\u3002</p> <pre><code>class Solution {\npublic:\nint findPaths(int m, int n, int maxMove, int startRow, int startColumn) {\nthis-&gt;m = m;\nthis-&gt;n = n;\nmemset(dp, -1, sizeof(dp));\nreturn DFS(startRow, startColumn, maxMove); //\u641c\u7d22\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\u6709\u591a\u5c11\u8def\u5f84\u51fa\u754c\n}\nprivate:\nconst int M  = 1e9 + 7;\nint m, n;\nint dp[51][51][51];     //\u8bb0\u5fc6\u6570\u7ec4\nlong DFS(int i, int j, int d){\nif(i &lt; 0 || i &gt;= m || j &lt; 0 || j &gt;= n) return 1;  //\u51fa\u754c\u4e86\nif(d == 0) return 0;  //\u5df2\u7ecf\u6ca1\u6709\u6b65\u6570\u4e86\nif(dp[i][j][d] != -1) return dp[i][j][d];  //\u5982\u679c\u4e4b\u524d\u6765\u8fc7\nreturn dp[i][j][d] = (DFS(i + 1, j, d - 1) + DFS(i - 1, j, d - 1) + DFS(i, j + 1, d - 1) + DFS(i, j - 1, d - 1)) % M;   //\u5982\u679c\u4e4b\u524d\u6ca1\u6765\u8fc7\n}\n};\n\\\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1583","title":"1583. \u7edf\u8ba1\u4e0d\u5f00\u5fc3\u7684\u670b\u53cb","text":"<p>map\u9884\u5904\u7406 + set\u53bb\u91cd</p> <pre><code>class Solution {\npublic:\nset&lt;int&gt; s;\nbool func(int x, int y, int u, int v,  map&lt;pair&lt;int, int&gt;, int&gt; &amp;m) {\nif (s.find(x) == s.end() &amp;&amp; m[{x, u}] &gt; m[{x, y}] &amp;&amp; m[{u, x}] &gt; m[{u, v}]) {\ns.insert(x);\nreturn  1;\n}\nreturn 0;\n}\nmap&lt;pair&lt;int, int&gt;, int&gt; init(vector&lt;vector&lt;int&gt;&gt;&amp; p) {\nmap&lt;pair&lt;int, int&gt;, int&gt; ret;\nint n = p.size();\nfor (int i = 0; i &lt; n ;i++) {\nfor (int j = 0; j &lt; n - 1; j++) {\nret[{i, p[i][j]}] = n - 1 - j;\n}\n}\nreturn ret;\n}\nint unhappyFriends(int n, vector&lt;vector&lt;int&gt;&gt;&amp; p, vector&lt;vector&lt;int&gt;&gt;&amp; pairs) {\nint ans = 0;\nmap&lt;pair&lt;int, int&gt;, int&gt; m = init(p);\nint np = pairs.size();\nfor (int i = 0; i &lt; np; i++) {\nint x = pairs[i][0], y = pairs[i][1];\nfor (int j = 0; j &lt; np; j++) {\nint u = pairs[j][0], v = pairs[j][1];\nans += func(x, y, u, v , m);\nans += func(y, x, u, v, m);\nans += func(x, y, v, u, m);\nans += func(y, x, v, u, m);\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1337-k","title":"1337. \u77e9\u9635\u4e2d\u6218\u6597\u529b\u6700\u5f31\u7684 K \u884c","text":"<pre><code>class Solution {\npublic:\nvector&lt;int&gt; kWeakestRows(vector&lt;vector&lt;int&gt;&gt;&amp; mat, int k) {\nvector&lt;pair&lt;int, int&gt; &gt; vp;\nvector&lt;int&gt; ans(k, 0);\nfor (int i = 0; i &lt; mat.size(); i++) {\nint cnt = 0;\nfor (int j = 0; j &lt; mat[i].size(); j++) {\nif (mat[i][j] == 0) {\nbreak;\n} else {\ncnt++;\n}\n}\npair&lt;int, int&gt; a = {cnt, i};\nvp.push_back(a);\n}\nsort(vp.begin(), vp.end());\nfor (int i = 0; i &lt; k; i++) {\nans[i] = vp[i].second;\n}\nreturn ans;\n}\n};\n</code></pre> <p>pair\u7528\u6cd5\uff1a<code>pair&lt;int, int&gt; p(V1, V2)</code></p>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#374","title":"374. \u731c\u6570\u5b57\u5927\u5c0f","text":"<p>\u4e8c\u5206\u67e5\u627e</p> <pre><code>/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return       -1 if num is lower than the guess number\n *                1 if num is higher than the guess number\n *               otherwise return 0\n * int guess(int num);\n */\nclass Solution {\npublic:\nint guessNumber(int n) {\nlong left = 0;\nlong right = n;\nlong mid = right / 2;\nwhile (guess(mid) != 0) {\nif (guess(mid) == -1) {\nright = mid;\n} else {\nleft = mid + 1;\n}\nmid = (left + right) / 2;\n}\nreturn mid;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#203","title":"203. \u79fb\u9664\u94fe\u8868\u5143\u7d20","text":"<p>\u53cc\u6307\u9488 \u9884\u5904\u7406\u5934\u90e8</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* removeElements(ListNode* head, int val) {\nListNode * last = head;\n// \u7279\u6b8a\u5904\u7406\u5934\u90e8 \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662fval \u53ef\u4ee5\u4f5c\u4e3a\u524d\u9a71\u7ed3\u70b9\u7684\u503c\nwhile (last &amp;&amp; last -&gt; val == val) {\nlast = last -&gt; next;\n}\n// \u8bb0\u5f55\u524d\u9a71\u7ed3\u70b9\nListNode * pre = last;\nhead = pre;  // \u8bb0\u5f55\u5934\u8282\u70b9\n// \u5c06last\u6307\u9488\u540e\u79fb\nif (last) last = last -&gt; next;\nwhile (last != nullptr) {\nif (last -&gt; val == val)  pre -&gt; next = last -&gt; next; // pre\u8df3\u8fc7last\u7ed3\u70b9 \u5c06last\u7ed3\u70b9\u5220\u9664\nelse pre = last; // \u5f53last\u4e0d\u4e3aval \u65f6\u624d\u79fb\u52a8pre\n// last \u6bcf\u6b21\u90fd\u8981\u79fb\u52a8\nlast = last -&gt; next;\n}\nreturn head;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#160","title":"160. \u76f8\u4ea4\u94fe\u8868","text":"<p>\u54c8\u5e0c\u96c6\u5408\u5b58\u653e\u4e00\u6761\u94fe\u8def\u5b8c\u6574\u8def\u5f84\uff0c\u68c0\u67e5\u7b2c\u4e8c\u6761\u94fe\u8def\u662f\u5426\u6709\u91cd\u590d\u7ed3\u70b9</p> <p>\u53cc\u6307\u9488\uff1a\u601d\u60f3\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6\u4e0d\u540c\uff0c\u800c\u6307\u9488\u7684\u6b65\u8c03\u662f\u4e00\u81f4\u7684\uff0c\u90a3\u4e48\u5728\u4e00\u6b21\u4ea4\u6362\u904d\u5386\u540e\uff0c\u5c31\u4f1a\u76f8\u9047\u3002</p> <p></p> <p>\u8bc1\u660e\uff1aA\u7684\u957f\u5ea6\u4e3a<code>lena</code>\uff0c B\u7684\u957f\u5ea6\u4e3a<code>lenb</code>\u3002\u5047\u8bbe\u5728\u7b2c\u4e00\u6b21\u904d\u5386\u4e4b\u540eA\u9996\u5148\u8fbe\u5230<code>nullptr</code>,\u540e\u4eceB\u5f00\u59cb\u7ee7\u7eed\u904d\u5386\uff0c\u5f53B\u7ed3\u675f\u4e4b\u540e\uff0cA\u5728B\u94fe\u8def\u4e0a\u591a\u8d70\u7684\u6b65\u6570\u4e3alenb - lena\u4e3a1(\u4e0a\u56fe\u4e3a1)\uff0c\u6b64\u65f6\u4e8c\u8005\u540c\u6b65\u4f4d\u7f6e\uff0c\u5373\u4ece\u6b64\u65f6\u5f00\u59cb\u4e8c\u8005\u540e\u7eed\u904d\u5386\u7684\u5143\u7d20\u4e2a\u6570\u5c31\u76f8\u540c\u4e86\uff0c\u6545\u518d\u6309\u7167\u76f8\u540c\u7684\u6b65\u8c03\u8d70\u7684\u8bdd\uff0c\u5982\u679c\u5b58\u5728A = B\uff0c\u5c31\u8bf4\u660e\u6709\u76f8\u4ea4\u7684\u4ea4\u70b9\u3002</p> <pre><code>class Solution {\npublic:\nListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\nif (headA == nullptr || headB == nullptr) {\nreturn nullptr;\n}\nListNode *pA = headA, *pB = headB;\nwhile (pA != pB) {\npA = pA == nullptr ? headB : pA-&gt;next;\npB = pB == nullptr ? headA : pB-&gt;next;\n}\nreturn pA;\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\nunordered_set&lt;ListNode *&gt; record;\nwhile (headA != nullptr) {\nrecord.insert(headA);\nheadA = headA -&gt; next;\n}\nwhile (headB != nullptr) {\nif (record.count(headB)) {\nreturn headB;\n}\nheadB = headB -&gt; next;\n}\nreturn nullptr;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#525","title":"525. \u8fde\u7eed\u6570\u7ec4\u3001","text":"<p>\u524d\u7f00\u548c+\u54c8\u5e0c+\u6570\u5b66\u63a8\u5bfc</p> <p></p> <pre><code>class Solution {\npublic:\nint findMaxLength(vector&lt;int&gt;&amp; nums) {\nint n = nums.size();\nif(n &lt;= 1) return 0;\n//[j, i]\n//2(pre[i+1] - pre[j]) = i+1 -j\n//2pre[i+1] - (i+1) = 2pre[j] - j;\nunordered_map&lt;int, int&gt; mp;\nint pre = 0, res = 0;\nmp[0] = 0;\nfor(int i=0; i&lt;n; ++i) {\npre += nums[i];\nint now = 2*pre - (i+1);\nif(mp.count(now)) {\nres = max(res, i+1-mp[now]);\n} else {\nmp[now] = i+1;\n}\n}\nreturn res;\n}\n};\n</code></pre> <p>\u5b98\u65b9\u9898\u89e3</p> <pre><code>class Solution {\npublic:\nint findMaxLength(vector&lt;int&gt;&amp; nums) {\nint maxLength = 0;\nunordered_map&lt;int, int&gt; mp;\nint counter = 0;\nmp[counter] = -1;\nint n = nums.size();\nfor (int i = 0; i &lt; n; i++) {\nint num = nums[i];\nif (num == 1) {\ncounter++;\n} else {\ncounter--;\n}\nif (mp.count(counter)) {\nint prevIndex = mp[counter];\nmaxLength = max(maxLength, i - prevIndex);\n} else {\nmp[counter] = i;\n}\n}\nreturn maxLength;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#523","title":"523. \u8fde\u7eed\u7684\u5b50\u6570\u7ec4\u548c","text":"<p>\u6570\u5b66\u9898\uff1a</p> <p>\u540c\u4f59\u5b9a\u7406\uff1a\u5982\u679cA%k == 0, B % k == 0,\u90a3\u4e48(A - B)% k == 0</p> <p>\u4f18\u5316\u9898\uff1a</p> <p>\u526a\u679d</p> <pre><code>class Solution {\npublic boolean checkSubarraySum(int[] nums, int k) {\n// \u5f53\u51fa\u73b0\u4e24\u4e2a\u8fde\u7eed\u76840\u65f6\uff0c\u76f4\u63a5\u8fd4\u56detrue\uff0c\u56e0\u4e3a 0 % k = 0 \nfor (int i = 0; i &lt; nums.length - 1; i++) {\nif (nums[i] == 0 &amp;&amp; nums[i + 1] == 0) {\nreturn true;\n}\n}\n// \u5176\u4e2di\u4e3a\u5de6\u7aef\u70b9\uff0cj\u4e3a\u53f3\u7aef\u70b9\uff0c\u904d\u5386\u6bcf\u79cd\u60c5\u51b5\nfor (int i = 0; i &lt; nums.length; i++) {\nint sum = nums[i];\nfor (int j = i + 1; j &lt; nums.length; j++) {\nsum += nums[j];\nif (sum % k == 0) {\nreturn true;\n}\n}\n// \u52a0\u5230\u4e00\u8d77\u4e4b\u540e\u53d1\u73b0\u90fd\u6ca1k\u5927\uff0c\u540e\u9762\u7684\u4e5f\u4e0d\u4f1a\u518d\u6bd4k\u5927\u4e86\uff0c\u8df3\u8fc7\nif (sum &lt; k) {\nbreak;\n}\n}\nreturn false;\n}\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#342-4","title":"342. 4\u7684\u5e42","text":"<p>\u4f4d\u8fd0\u7b97</p> <p>\u6570\u5b66\u9898</p> <p>\u4e0b\u6807\u4ece0\u4f4d\u5f00\u59cb\uff0c\u5076\u6570\u4f4d\u4e3a4\u7684\u5e42\uff0c1010 = a</p> <p></p> <pre><code>func isPowerOfFour(n int) bool {\nreturn n &gt; 0 &amp;&amp; n&amp;(n-1) == 0 &amp;&amp; n&amp;0xaaaaaaaa == 0\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#461","title":"461. \u6c49\u660e\u8ddd\u79bb","text":"<p>\u5185\u7f6e\u51fd\u6570</p> <p>\u4f4d\u8fd0\u7b97</p> <p></p> <p>go</p> <pre><code>func hammingDistance(x, y int) int {\nreturn bits.OnesCount(uint(x ^ y))\n}\n</code></pre> <p>c++</p> <pre><code>class Solution {\npublic:\nint hammingDistance(int x, int y) {\nreturn __builtin_popcount(x ^ y);\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nint hammingDistance(int x, int y) {\nint s = x ^ y, ret = 0;\nwhile (s) {\ns &amp;= s - 1; // \u6d88\u9664\u6700\u4f4e\u4f4d\u76841\nret++;\n}\nreturn ret;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1190","title":"1190. \u53cd\u8f6c\u6bcf\u5bf9\u62ec\u53f7\u95f4\u7684\u5b50\u4e32","text":"<p>\u6808\u8fdb\u884c\u6a21\u62df</p> <p></p> <pre><code>class Solution {\npublic:\nstring reverseParentheses(string s) {\nstack&lt;string&gt; stk;\nstring str;\nfor (auto &amp;ch : s) {\nif (ch == '(') { // \u5de6\u62ec\u53f7\u8868\u793a\u8fdb\u5165\u65b0\u4e00\u5c42 \u9700\u8981\u5c06\u4e4b\u524d\u7684str\u4fdd\u7559 \u518d\u4e0e\u4e0b\u4e00\u5c42\u4f5c\u53e0\u52a0\nstk.push(str);\nstr = \"\";\n} else if (ch == ')') { // \u5df2\u7ecf\u5230\u6700\u91cc\u5c42 \u5c06\u6700\u91cc\u5c42\u7684\u5b57\u7b26\u4e32\u7ffb\u8f6c \u8fd4\u56de\u7ed9\u4e0a\u4e00\u5c42\nreverse(str.begin(), str.end());\nstr = stk.top() + str;\nstk.pop();\n} else {\nstr.push_back(ch);\n}\n}\nreturn str;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#664","title":"664. \u5947\u602a\u7684\u6253\u5370\u673a","text":"<p>C++\u533a\u95f4dp</p> <p></p> <pre><code>class Solution {\npublic:\nint strangePrinter(string s) {\nint n = s.size();\n// vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n, 0x3f3f3f3f));\nint dp[n][n];\nmemset(dp, 0x3f3f3f3f, sizeof(dp));\nfor(int i = 0; i &lt; n; i++)\ndp[i][i] = 1;\nfor(int len = 2; len &lt;= n; len++) {\nfor(int i = 0, j = len-1; j &lt; n; i++, j++) {\nif(s[i] == s[j])\ndp[i][j] = min(dp[i+1][j], dp[i][j-1]);\nelse {\nfor(int k = i; k &lt; j; k++)\ndp[i][j] = min(dp[i][j], dp[i][k]+dp[k+1][j]);\n}\n}  }\nreturn dp[0][n-1];\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1707","title":"1707. \u4e0e\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6700\u5927\u5f02\u6216\u503c","text":"<p>\u8d85\u65f6\u505a\u6cd5\uff1a\u66b4\u529b+\u526a\u679d</p> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; maximizeXor(vector&lt;int&gt;&amp; nums, vector&lt;vector&lt;int&gt;&gt;&amp; queries) {\nint n = nums.size();\nint m = queries.size();\nvector&lt;int&gt; ans(m);\nsort(nums.begin(), nums.end(), greater&lt;int&gt;());\nfor (int i = 0; i &lt; m; i++) {\nint MAX = 0;\nint x = queries[i][0], y = queries[i][1];\nint pos = lower_bound(nums.begin(),nums.end(), y, greater&lt;int&gt;()) - nums.begin();\n//cout &lt;&lt; pos &lt;&lt; endl;\nif (pos == n) {\nans[i] = -1;\ncontinue;\n}\nfor (int j = pos; j &lt; n ; j++) {\n//if (y &lt; nums[i]) break;\nif (nums[j] + x &gt;= MAX) {\nMAX = max(MAX, nums[j] ^ x);\n} else {\n//cout &lt;&lt; j &lt;&lt; endl;\nbreak;\n}\n}\nans[i] = MAX;\n}\nreturn ans;\n}\n};\n</code></pre> <p>\u5b57\u5178\u6811</p>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#810","title":"810. \u9ed1\u677f\u5f02\u6216\u6e38\u620f","text":"<p>\u6570\u5b66\u9898</p> <p>\u5982\u679c\u6570\u7ec4\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u600e\u4e48\u62ff\uff0cAlice\u90fd\u8d62 \u4f46\u5982\u679c\u957f\u5ea6\u662f\u5947\u6570\u5462\uff1f\u5947\u6570\u5c31\u8f93\u4e86\u5417\uff1f\u4e0d\u4e00\u5b9a\uff0c\u5982\u679c\u6570\u7ec4\u672c\u6765\u5f02\u6216\u7ed3\u679c\u5c31\u4e3a0\uff0c\u90a3\u4e48Alice\u8fd8\u662f\u8d62</p> <pre><code>class Solution {\npublic:\nbool xorGame(vector&lt;int&gt;&amp; nums) {\nif (nums.size() % 2 == 0) {\nreturn true;\n}\nint xorsum = 0;\nfor (int num : nums) {\nxorsum ^= num;\n}\nreturn xorsum == 0;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1035","title":"1035. \u4e0d\u76f8\u4ea4\u7684\u7ebf","text":"<p>lcs\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217</p> <pre><code>class Solution {\npublic:\nint maxUncrossedLines(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\nint n = nums1.size(), m = nums2.size();\nvector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(m + 1));\nfor (int i = 1; i &lt;= n; ++i) {\nfor (int j = 1; j &lt;= m; ++j) {\nif (nums1[i - 1] == nums2[j - 1]) {\ndp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1);\n} else {\ndp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n}\n}\n}\nreturn dp[n][m];\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#692-k","title":"692. \u524dK\u4e2a\u9ad8\u9891\u5355\u8bcd","text":"<p>map\u8003\u5bdf\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570</p> <pre><code>class Solution {\npublic:\ntypedef struct node {\nstring s;\nint cnt;\n}node;\nstatic bool cmp(node a, node b) {\nif (a.cnt == b.cnt) {\nreturn a.s &lt; b.s;\n}\nreturn a.cnt &gt; b.cnt;\n}\nvector&lt;string&gt; topKFrequent(vector&lt;string&gt;&amp; words, int k) {\nvector&lt;string&gt; ans(k);\nmap&lt;string, int&gt; m_si;\nvector&lt;node&gt; vn;\nfor (auto word : words) {\nm_si[word]++;\n}\nfor (auto x : m_si) {\nvn.push_back({x.first, x.second});\n}\nsort(vn.begin(), vn.end(), cmp);\nfor (int i = 0; i &lt; k; i++) {\nans[i] = vn[i].s;\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1738-k","title":"1738. \u627e\u51fa\u7b2c K \u5927\u7684\u5f02\u6216\u5750\u6807\u503c","text":"<p>\u4e8c\u7ef4\u524d\u7f00\u548c</p> <pre><code>class Solution {\npublic:\nint kthLargestValue(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int k) {\nint m = matrix.size(), n = matrix[0].size();\nvector&lt;vector&lt;int&gt;&gt; pre(m + 1, vector&lt;int&gt;(n + 1));\nvector&lt;int&gt; results;\nfor (int i = 1; i &lt;= m; ++i) {\nfor (int j = 1; j &lt;= n; ++j) {\npre[i][j] = pre[i - 1][j] ^ pre[i][j - 1] ^ pre[i - 1][j - 1] ^ matrix[i - 1][j - 1];\nresults.push_back(pre[i][j]);\n}\n}\nsort(results.begin(), results.end(), greater&lt;int&gt;());\nreturn results[k - 1];\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1442","title":"1442. \u5f62\u6210\u4e24\u4e2a\u5f02\u6216\u76f8\u7b49\u6570\u7ec4\u7684\u4e09\u5143\u7ec4\u6570\u76ee","text":"<p>n ^ 3\u505a\u6cd5\uff1a\u66b4\u529b\u679a\u4e3e\u4e09\u4e2a\u70b9\uff0c\u524d\u7f00\u548c</p> <pre><code>class Solution {\npublic:\nint countTriplets(vector&lt;int&gt;&amp; arr) {\nint n = arr.size();\nvector&lt;int&gt; sum(n, 0);\nsum[0] = arr[0];\nfor (int i = 1; i &lt; arr.size(); i++) {\nsum[i] = sum[i - 1] ^ arr[i];\n}\nint ans = 0;\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = i + 1; j &lt; n; j++) {\nfor (int k = j; k &lt; n; k++) {\nint a = sum[i] ^ sum[j - 1] ^ arr[i];\nint b = sum[k] ^ sum[j] ^ arr[j];\nif (a == b) {\n//cout &lt;&lt; i &lt;&lt; j &lt;&lt; k &lt;&lt; endl;\nans++;\n}\n}\n}\n}\nreturn ans;\n}\n};\n</code></pre> <p>n^2\u505a\u6cd5\uff1a\u524d\u7f00\u548c+\u95ee\u9898\u8f6c\u6362</p> <p></p> <pre><code>class Solution {\npublic:\nint countTriplets(vector&lt;int&gt;&amp; arr) {\n// \u7c7b\u4f3c\u524d\u7f00\u548c\nint n = arr.size();\nint* pre_ = new int[n + 1]();\nint sum = 0;\npre_[0] = 0;\nfor (int i = 1; i &lt;= n; i++)\n{\nsum ^= arr[i - 1];\npre_[i] = sum;         }\nint count = 0;\nfor (int i = 0; i &lt; n; i++)\n{\nfor (int j = i + 1; j &lt;= n; j++)\n{\nif (pre_[j] == pre_[i])\n{\ncount += j - i - 1;\n}\n}\n}\nreturn count;\n}\n};\n</code></pre> <p></p>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#993","title":"993.\u4e8c\u53c9\u6811\u7684\u5802\u5144\u5f1f\u7ed3\u70b9","text":"<p>BFS\u3002</p> <p>\u5982\u679c\u4e24\u4e2a\u7ed3\u70b9\u5728\u6bcf\u4e00\u5c42\uff0c\u90a3\u4e48\u5728\u6bcf\u4e00\u5c42for\u5faa\u73af\u5411\u961f\u5217\u6dfb\u52a0\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5c31\u5fc5\u7136\u4f1a\u5728\u540c\u4e00\u4e2afor\u5faa\u73af\u4e2d\u88ab\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002</p> <p></p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nusing PTT = pair&lt;TreeNode*, TreeNode*&gt;;\nbool isCousins(TreeNode* root, int x, int y) {\n// \u4f7f\u7528\u961f\u5217q\u6765\u8fdb\u884cbfs\n// \u5176\u4e2dpair\u4e2d\uff0cp.first \u8bb0\u5f55\u5f53\u524d\u7ed3\u70b9\u7684\u6307\u9488\uff0cp.second \u8bb0\u5f55\u5f53\u524d\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9\u7684\u6307\u9488\nqueue&lt;PTT&gt; q;\nq.push({root, nullptr});\nwhile(!q.empty()) {\nint n = q.size();\nvector&lt;TreeNode*&gt; rec_parent; // \u5b58\u653e\u7ed3\u70b9\nfor(int i = 0; i &lt; n; i++) {\nauto [cur, parent] = q.front(); q.pop();\nif(cur-&gt;val == x || cur-&gt;val == y)\nrec_parent.push_back(parent);\nif(cur-&gt;left) q.push({cur-&gt;left, cur}); // \u5b58\u653e\u8be5\u5f53\u524d\u7ed3\u70b9\u5b50\u8282\u70b9\u4ee5\u53ca\u5f53\u524d\u7ed3\u70b9\uff08\u7236\u8282\u70b9\uff09\nif(cur-&gt;right) q.push({cur-&gt;right, cur});\n}\n// `x` \u548c `y` \u90fd\u6ca1\u51fa\u73b0\nif(rec_parent.size() == 0)\ncontinue;\n// `x` \u548c `y` \u53ea\u51fa\u73b0\u4e00\u4e2a\nelse if(rec_parent.size() == 1)\nreturn false;\n// `x` \u548c `y` \u90fd\u51fa\u73b0\u4e86\nelse if(rec_parent.size() == 2)\n// `x` \u548c `y` \u7236\u8282\u70b9 \u76f8\u540c/\u4e0d\u76f8\u540c \uff1f\nreturn rec_parent[0] != rec_parent[1];\n}\nreturn false;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#421","title":"421.\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u6700\u5927\u5f02\u6216\u503c","text":"<ul> <li>Trie\u6811</li> <li>\u66b4\u529b+\u526a\u679d<ul> <li>\u5982\u679ci + j\u5c0f\u4e8e\u5f53\u524d\u5df2\u77e5\u7684ii ^ jj\u90a3\u4e48 i ^ j\u7684\u503c\u4e00\u5b9a\u5c0f\u4e8e ii ^ jj\u7684\u503c</li> <li>\u56e0\u4e3a\u8fdb\u4f4d\u5982\u679c\u8fd8\u5c0f\u7684\u8bdd\uff0c\u660e\u663e\u4e0d\u9700\u8981\u4e86</li> </ul> </li> </ul> <pre><code>class Solution {\npublic:\nint findMaximumXOR(vector&lt;int&gt;&amp; nums) {\nsort(nums.begin(), nums.end());\nint n = nums.size();\nlong long maxValue = 0;\nfor (int i = n -1; i &gt;= 1; i--) {\nfor (int j = i -1; j &gt;= 0; j--) {\nif ((long long)(nums[i]) + nums[j] &lt; maxValue) {\nbreak;\n}\nmaxValue = max(maxValue, (long long)(nums[i] ^ nums[j]));\n}\n}\nreturn maxValue;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#13","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570","text":"<p>\u5bf9\u4e8e\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\u5b57\u7b26\u4e32\u53ef\u4ee5</p> <ul> <li>\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26 str[i]</li> <li>\u68c0\u67e5str[i - 1]str[i]\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728map\u6620\u5c04\u4e2d\u51fa\u73b0\uff0c\u5982\u679c\u51fa\u73b0\u5219\u4f18\u5148\u91c7\u7528\u8be5\u53cc\u5b57\u7b26\u7684\uff0c\u5982\u679c\u6ca1\u6709\u51fa\u73b0\u5219\u91c7\u7528\u5355\u5b57\u7b26\u7684</li> <li>\u56e0\u4e3a\u662f\u4ece\u540e\u5f80\u524d\u63a8\uff0c\u6240\u6709\u5bf9\u4e8eIX\u4e2d\u7684I\u4f1a\u8ba1\u7b97\u4e24\u6b21\uff0c\u5373\u9700\u8981\u5c06IX9\u6620\u5c04\u4e3a8</li> </ul> <p></p> <pre><code>class Solution {\npublic:\nint romanToInt(string s) {\nunordered_map&lt;string, int&gt; m = {{\"I\", 1}, {\"IV\", 3}, {\"IX\", 8}, {\"V\", 5}, {\"X\", 10}, {\"XL\", 30}, {\"XC\", 80}, {\"L\", 50}, {\"C\", 100}, {\"CD\", 300}, {\"CM\", 800}, {\"D\", 500}, {\"M\", 1000}};\nint r = m[s.substr(0, 1)];\nfor(int i=1; i&lt;s.size(); ++i){\nstring two = s.substr(i-1, 2);\nstring one = s.substr(i, 1);\nr += m[two] ? m[two] : m[one];\n}\nreturn r;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#12","title":"12. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570","text":"<p>\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff0c\u7136\u540e\u6309\u5bf9\u5e94\u6570\u5b57\u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u5904\u7406\u5b57\u7b26\u4e32\u548c\u51cf\u53bb\u5bf9\u5e94\u7684\u503c\u3002</p> <p></p> <pre><code>class Solution {\npublic:\nstring intToRoman(int num) {\nstring strs[]= {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\nint nums[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\nstring ans;\nfor (int i = 0; num &gt; 0 &amp;&amp; i &lt; 13; i++) {\nwhile (nums[i] &lt;= num) {\nans += strs[i];\nnum -= nums[i];\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1310","title":"1310.\u5b50\u6570\u7ec4\u5f02\u6216\u67e5\u8be2","text":"<p>\u524d\u7f00\u548c</p> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; xorQueries(vector&lt;int&gt;&amp; arr, vector&lt;vector&lt;int&gt;&gt;&amp; queries) {\nint n = arr.size();\nvector&lt;int&gt; sum(n);\nint len = queries.size();\nsum[0] = arr[0];\nfor (int i = 1; i &lt; n; i++) {\nsum[i] = sum[i - 1] ^ arr[i];\n}\nvector&lt;int&gt; ans(len);\nint cnt = 0;\nfor (auto q : queries) {\nans[cnt++] = sum[q[0]] ^ sum[q[1]] ^ arr[q[0]];\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1734","title":"1734.\u89e3\u7801\u5f02\u6216\u540e\u7684\u6392\u5217","text":"<p>\u6570\u5b66\u601d\u7ef4</p> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; decode(vector&lt;int&gt;&amp; encoded) {\nint n = encoded.size() + 1;\nint total = 0;\nfor (int i = 1; i &lt;= n; i++) {\ntotal ^= i;\n}\nint odd = 0;\n// encoded[i] = perm[i] ^ perm[i + 1]\n// \u6b65\u957f\u4e3a2, perm[0] ^ encoded[i] ^ encode[i + 2] ... = perm[0] ^ encoded[1] ... encoded[n - 1]\nfor (int i = 1; i &lt; n - 1; i += 2) {\nodd ^= encoded[i];\n}\nvector&lt;int&gt; perm(n);\nperm[0] = total ^ odd; // \u6240\u4ee5perm[0]\u5c31\u53ef\u4ee5\u6c42\u51fa\u6765\u4e86\nfor (int i = 0; i &lt; n - 1; i++) {\n// \u6709\u4e86perm[0], encoded[i] ^ perm[i] = perm[i + 1]\nperm[i + 1] = perm[i] ^ encoded[i];\n}\nreturn perm;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#_3","title":"\u53f6\u5b50\u76f8\u4f3c\u7684\u6811","text":"<p>\u6df1\u5ea6\u524d\u5e8f\u904d\u5386\u8bb0\u5f55\u53f6\u5b50\u7ed3\u70b9</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nvoid preSearch(TreeNode* root1, vector&lt;int&gt; &amp;seq) {\nif (root1 == nullptr) return;\nif (!root1 -&gt; left &amp; !root1 -&gt; right) {\nseq.push_back(root1 -&gt; val);\nreturn ;\n}\npreSearch(root1 -&gt; left, seq);\npreSearch(root1 -&gt; right, seq);\n}\nbool leafSimilar(TreeNode* root1, TreeNode* root2) {\nvector&lt;int&gt; seq1, seq2;\npreSearch(root1, seq1);\npreSearch(root2, seq2);\nreturn seq1 == seq2;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1482-m","title":"1482. \u5236\u4f5cm\u675f\u82b1\u6240\u9700\u7684\u6700\u5c11\u5929\u6570","text":"<p>\u4e8c\u5206+\u8d2a\u5fc3</p> <p></p> <pre><code>class Solution {\npublic:\nbool check(vector&lt;int&gt;&amp; bloomDay, int m, int k, int limit) {\nint total = 0;\nint cur_cnt = 0;\n// \u679a\u4e3e\u5728limit\u5929 \u82b1\u76db\u5f00\u7684\u60c5\u51b5\nfor(auto day : bloomDay) {\n// \u82b1\u5f00\u7684\u5929\u6570 \u5982\u679c\u5927\u4e8e \u5f53\u524d\u5929\u6570limit\u8bf4\u660e\u8fd8\u6ca1\u6709\u5f00\u653e \u5c06cur_cnt \u91cd\u7f6e \u65ad\u5f00\nif(day &gt; limit)\ncur_cnt = 0;\nelse // \u5c0f\u4e8e\u4e14\u8fde\u7eed \u5c31++\ncur_cnt++;\n// \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u4e00\u675f\u82b1\nif(cur_cnt &gt;= k) {\ntotal++;\ncur_cnt = 0;\n}\n}\nreturn total &gt;= m;\n}\nint minDays(vector&lt;int&gt;&amp; bloomDay, int m, int k) {\nint n = bloomDay.size();\nif(m * k &gt; n) return -1; // \u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u662f \u82b1\u6570 &lt; \u9700\u8981\u7684\u82b1\u675f\n// \u4f18\u5316 \u679a\u4e3e\u8303\u56f4\u5728 min - max ele\nint left = *min_element(bloomDay.begin(), bloomDay.end());\nint right = *max_element(bloomDay.begin(), bloomDay.end());\n// \u4e8c\u5206\u679a\u4e3e\u5929\u6570 \u80fd\u7f29\u5c0f\u5c31\u7f29\u5c0f \u4e0d\u80fd\u7f29\u5c0f\u5c31\u6269\u5927\nwhile(left &lt;= right) {\nint mid = (left + right) / 2;\nif(check(bloomDay, m, k, mid))\nright = mid-1; // \u7f29\u5c0f\u533a\u95f4\nelse\nleft = mid+1; // \u6269\u5927\u533a\u95f4\n}\nreturn right + 1;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1723","title":"1723. \u5b8c\u6210\u6240\u6709\u5de5\u4f5c\u7684\u6700\u77ed\u65f6\u95f4","text":"<p>\u4e8c\u5206\u3001\u56de\u6eaf\u3001\u526a\u679d</p> <pre><code>class Solution {\npublic:\nbool backtrack(vector&lt;int&gt;&amp; jobs, vector&lt;int&gt;&amp; workloads, int idx, int limit) {\nif (idx &gt;= jobs.size()) {\nreturn true;\n}\nint cur = jobs[idx];\nfor (auto&amp; workload : workloads) {\nif (workload + cur &lt;= limit) {\nworkload += cur; // \u9009\u62e9\u5f53\u524d\u7684\u8fdb\u884c\u5206\u914d\nif (backtrack(jobs, workloads, idx + 1, limit)) {\nreturn true;\n}\nworkload -= cur; // \u4e0d\u9009\u62e9\u5f53\u524d\u7684\u8fdb\u884c\u5206\u914d\n}\n// \u5982\u679c\u5f53\u524d\u5de5\u4eba\u672a\u88ab\u5206\u914d\u5de5\u4f5c\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u5de5\u4eba\u4e5f\u5fc5\u7136\u672a\u88ab\u5206\u914d\u5de5\u4f5c\n// \u6216\u8005\u5f53\u524d\u5de5\u4f5c\u6070\u80fd\u4f7f\u8be5\u5de5\u4eba\u7684\u5de5\u4f5c\u91cf\u8fbe\u5230\u4e86\u4e0a\u9650\n// \u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u65e0\u9700\u5c1d\u8bd5\u7ee7\u7eed\u5206\u914d\u5de5\u4f5c\nif (workload == 0 || workload + cur == limit) { // \u56e0\u4e3a\u662f\u6574\u4e2afor\u5faa\u73af \u6bcf\u4e2a\u90fd\u8981\u5c1d\u8bd5 \u8fd9\u91cc\u526a\u679d\nbreak;\n}\n}\nreturn false;\n}\nbool check(vector&lt;int&gt;&amp; jobs, int k, int limit) {\nvector&lt;int&gt; workloads(k, 0);\nreturn backtrack(jobs, workloads, 0, limit);\n}\nint minimumTimeRequired(vector&lt;int&gt;&amp; jobs, int k) {\nsort(jobs.begin(), jobs.end(), greater&lt;int&gt;()); // \u4ece\u5927\u5230\u5c0f\u6392\u5217\nint l = jobs[0], r = accumulate(jobs.begin(), jobs.end(), 0); // limit -&gt; [min, max]\u5de5\u4f5c\u91cf\nwhile (l &lt; r) { // \u4e8c\u5206\u679a\u4e3elimit\nint mid = (l + r) &gt;&gt; 1;\nif (check(jobs, k, mid)) {\nr = mid;\n} else {\nl = mid + 1;\n}\n}\nreturn l;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1486","title":"1486.  \u6570\u7ec4\u5f02\u6216\u64cd\u4f5c","text":"<p>\u7b80\u7b54\u6a21\u62df</p> <p></p> <pre><code>class Solution {\npublic:\nint xorOperation(int n, int start) {\nint num = start;\nfor (int i = 1; i &lt; n; i++) {\nnum ^= (start + 2 * i);\n}\nreturn num;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1720","title":"1720. \u89e3\u7801\u5f02\u6216\u540e\u7684\u6570\u7ec4","text":"<p>\u7b80\u5355\u6570\u8bba</p> <p></p> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; decode(vector&lt;int&gt;&amp; encoded, int first) {\nint n = encoded.size();\nvector&lt;int&gt; ans(n + 1, first);\nfor (int i = 0; i &lt; n; i++) {\nans[i + 1] = ans[i] ^ encoded[i];\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#740","title":"740. \u5220\u9664\u5e76\u83b7\u5f97\u70b9\u6570","text":"<p>\u52a8\u6001\u89c4\u5212</p> <pre><code>class Solution {\npublic:\nint deleteAndEarn(vector&lt;int&gt;&amp; nums) {\nif(nums.size() &lt; 1) return 0;\nint maxn = 0;\nfor(int it : nums)\nmaxn = max(maxn, it);\nvector&lt;int&gt; cnt(maxn+1), dp(maxn+1);\nfor(int it : nums)\ncnt[it]++;\ndp[1] = cnt[1];\nfor(int i = 2; i &lt;= maxn; i++)\ndp[i] = max(dp[i-1], dp[i-2] + cnt[i] * i);\nreturn dp[maxn];\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#554","title":"554. \u7816\u5899","text":"<p>\u8d2a\u5fc3 \u601d\u7ef4\u9898</p> <p>\u5bf9\u4e8e\u6bcf\u4e00\u6761\u5782\u7ebf\uff0c\u7a7f\u8fc7\u7684\u7816\u5757\u548c\u7a7f\u8fc7\u7684\u95f4\u9699\u76f8\u52a0\u7ed3\u679c\u90fd\u662f\u603b\u9ad8\u5ea6 \u662f\u4e2a\u5b9a\u503c</p> <p>\u6240\u4ee5\u53ea\u9700\u8981\u627e\u51fa\u6700\u591a\u7684\u95f4\u9699\u90a3\u4e2a \u5c31\u627e\u5230\u4e86\u9ad8\u5ea6\u51cf\u6700\u591a\u7684\u95f4\u9699\u5c31\u627e\u5230\u4e86\u7a7f\u8fc7\u7684\u6700\u5c11\u7816\u6570\u3002</p> <p></p> <pre><code>class Solution {\npublic:\nint leastBricks(vector&lt;vector&lt;int&gt;&gt;&amp; wall) {\nunordered_map&lt;int, int&gt; cnt;\nfor (auto&amp; widths : wall) {\nint n = widths.size();\nint sum = 0;\nfor (int i = 0; i &lt; n - 1; i++) {\nsum += widths[i];\ncnt[sum]++;\n}\n}\nint maxCnt = 0;\nfor (auto&amp; [_, c] : cnt) {\nmaxCnt = max(maxCnt, c);\n}\nreturn wall.size() - maxCnt;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#690","title":"690. \u5458\u5de5\u7684\u91cd\u8981\u6027","text":"<p>bfs</p> <pre><code>/*\n// Definition for Employee.\nclass Employee {\npublic:\n    int id;\n    int importance;\n    vector&lt;int&gt; subordinates;\n};\n*/\nclass Solution {\npublic:\nint getImportance(vector&lt;Employee*&gt; employees, int id) {\nint ans = 0;\n//if (employees.size() == 0) return 0;\nunordered_set&lt;int&gt; emp_record;\nunordered_map&lt;int, int&gt; m;\nfor (int i = 0; i &lt; employees.size(); i++) {\nm[employees[i] -&gt; id] = i;\n}\nqueue&lt;Employee&gt; que_emp;\nque_emp.push(*employees[m[id]]);\nwhile (que_emp.size()) {\nEmployee temp = que_emp.front();\nque_emp.pop();\nans += temp.importance;\nfor (auto num : temp.subordinates) {\nif (emp_record.count(num) == 0) {\nemp_record.insert(num);\nque_emp.push(*employees[m[num]]);\n}\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#403","title":"403. \u9752\u86d9\u8fc7\u6cb3","text":"<p>\u89e3\u6cd51\uff1a</p> <p>DFS + \u8bb0\u5fc6\u5316\uff08\u8bb0\u5fc6\u5316\u641c\u7d22\uff09</p> <p></p> <pre><code>class Solution {\npublic:\nusing PII = pair&lt;int, int&gt;;\nunordered_map&lt;int, unordered_set&lt;int&gt;&gt; visited;\nunordered_set&lt;int&gt; stone_pos;\nint done;\nbool dfs(int prv_pos, int speed) {\nint cur_pos = prv_pos + speed;\nif(speed &lt; 0 || !stone_pos.count(cur_pos)) // \u4e0d\u80fd\u5411\u540e\u8df3 \u5e76\u4e14\u5f53\u524d\u4f4d\u7f6e\u6709\u77f3\u5934\u5b58\u5728 \nreturn false;\nif(visited[prv_pos].count(speed)) // \u9632\u6b62\u91cd\u590d\u8ba1\u7b97 \u4ee5\u540c\u4e00\u4e2a\u901f\u5ea6\u5230\u8fbe\u540c\u4e00\u4e2a\u4f4d\u7f6e \u4ee3\u8868\u662f\u540c\u4e00\u4e2a\u72b6\u6001\nreturn false;\nvisited[prv_pos].insert(speed);//\u5c06\u5f53\u524d\u65b0\u72b6\u6001\u63d2\u5165\u5230\u6570\u7ec4\u4e2d\nif(cur_pos == done) // \u8fbe\u5230\u6700\u540e\u4e00\u4e2a\nreturn true;\n// \u8fdb\u884c\u9012\u5f52\u641c\u7d22\nreturn dfs(cur_pos, speed-1) || dfs(cur_pos, speed) || dfs(cur_pos, speed+1);   }\nbool canCross(vector&lt;int&gt;&amp; stones) {\nint n = stones.size();\n// \u4fdd\u5b58\u77f3\u5934\u4f4d\u7f6e\nstone_pos = unordered_set&lt;int&gt;(stones.begin(), stones.end());\n// \u76ee\u6807\u4e3a\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\ndone = stones.back();\n// \u4ece0\u5f00\u59cb\u5411\u8df3\u4e00\u4e2a\nreturn dfs(0, 1);\n}\n};\n</code></pre> <p>\u52a8\u6001\u89c4\u5212</p> <ul> <li><code>d[i][speed]</code>\u8868\u793a\u4ee5speed\u80fd\u5426\u8df3\u5230\u7b2ci\u4e2a\u77f3\u5934</li> <li>\u521d\u59cb\u5316\uff1a<code>d[0][0] = 1</code></li> <li><code>dp[i][speed] = dp[j][speed - 1] or dp[j][spped] or dp[j][speed + 1]</code></li> </ul> <pre><code>class Solution {\npublic:\nbool canCross(vector&lt;int&gt;&amp; stones) {\nint n = stones.size();\n// dp[i][speed]\uff1a\u8868\u793a\u80fd\u5426\u4ee5speed\u7684\u901f\u5ea6\uff0c\u5230\u8fbe\u7b2ci\u4e2a\u77f3\u5934\nvector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n, 0));\ndp[0][0] = 1;\nfor(int i = 1; i &lt; n; i++) {\nfor(int j = 0; j &lt; i; j++) {\nint speed = stones[i] - stones[j]; // \u9700\u8981speed\u7684\u8ddd\u79bb\u624d\u80fd\u4ecej\u5230i\nif(speed &lt;= 0 || speed &gt; j+1) // \u4ecej\u5f00\u59cb\u8df3\u7684\u8ddd\u79bb\u6700\u5927\u4e3a j + 1, \u8ddd\u79bb\u8d85\u8fc7 j + 1\uff0c\u8bf4\u660e\u4e0d\u80fd\u4e00\u6b21\u8df3\u8dc3\u5230\u8fbe\ncontinue;\ndp[i][speed] = dp[j][speed-1] || dp[j][speed] || dp[j][speed+1];\n}\n}\nfor (int i = 0; i &lt; n; i++) {\nif (dp[n - 1][i]) return true;\n}\nreturn false;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#633","title":"633. \u5e73\u65b9\u6570\u4e4b\u548c","text":"<p>\u66b4\u529b</p> <pre><code>class Solution {\npublic:\nbool judgeSquareSum(int c) {\nfor (long a = 0; a * a &lt;= c; a++) {\ndouble b = sqrt(c - a * a);\nif (b == (int)b) {\nreturn true;\n}\n}\nreturn false;\n}\n};\n</code></pre> <p>Go\u7248\u672c</p> <pre><code>func judgeSquareSum(c int) bool {\nfor a := 0; a*a &lt;= c; a++ {\nrt := math.Sqrt(float64(c - a*a))\nif rt == math.Floor(rt) {\nreturn true\n}\n}\nreturn false\n}\n</code></pre> <p>\u53cc\u6307\u9488</p> <ul> <li>left = 0, right = sqrt(c)</li> <li>if (\u4e58\u79ef\u5927\u4e8e\u76ee\u6807 ) right --</li> <li> <p>if (\u6210\u7ee9\u5c0f\u4e8e) left++</p> </li> <li> <p>\u7ec8\u7ed3\u6761\u4ef6(left &gt; right), right == left \u53ef\u80fd\u662f8 = 2^2 + 2^2</p> </li> </ul> <pre><code>func judgeSquareSum(c int) bool {\nleft, right := 0, int(math.Sqrt(float64(c)))\nfor left &lt;= right {\nsum := left*left + right*right\nif sum == c {\nreturn true\n} else if sum &gt; c {\nright--\n} else {\nleft++\n}\n}\nreturn false\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#938","title":"938.\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8303\u56f4\u548c","text":"<p>\u4e2d\u5e8f\u904d\u5386</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nvoid midSearch(TreeNode *root, vector&lt;TreeNode *&gt; &amp;v) {\nif (!root)  return ;\nmidSearch(root -&gt; left, v);\nv.push_back(root);\nmidSearch(root -&gt; right, v);\n}\nint rangeSumBST(TreeNode* root, int low, int high) {\nvector&lt;TreeNode *&gt; v;\nint ans = 0;\nmidSearch(root, v);\nint i = 0;\nfor (i = 0; i &lt; v.size(); i++) {\nif (v[i] -&gt; val &gt;= low) break;\n}\nfor (int j = i; j &lt; v.size(); j++) {\nif (v[j]-&gt;val &lt;= high) ans += v[j]-&gt;val;\nelse break;\n}\nreturn ans;\n}\n};\n</code></pre> <p>\u5b98\u65b9\u9898\u89e3</p> <pre><code>class Solution {\npublic:\nint rangeSumBST(TreeNode *root, int low, int high) {\nif (root == nullptr) {\nreturn 0;\n}\n// \u5f53\u524d\u503c\u4e0d\u5728 [low, high]\u8303\u56f4\u5185\nif (root-&gt;val &gt; high) { return rangeSumBST(root-&gt;left, low, high);\n}\nif (root-&gt;val &lt; low) {\nreturn rangeSumBST(root-&gt;right, low, high);\n}\n// \u5f53\u524d\u503c + \u5de6\u5b69\u5b50\u7684\u503c + \u53f3\u5b69\u5b50\u7684\u503c\nreturn root-&gt;val + rangeSumBST(root-&gt;left, low, high) + rangeSumBST(root-&gt;right, low, high);\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1011-d","title":"1011. \u5728D\u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b","text":"<p>\u4e8c\u5206\u67e5\u627e</p> <p>\u4e8c\u5206\u679a\u4e3e\u8239\u7684limit \u7136\u540e\u68c0\u67e5\u8be5limit\u662f\u5426\u6ee1\u8db3</p> <pre><code>class Solution {\npublic:\nbool check(vector&lt;int&gt; &amp;weights, int D, int limit) {\nint cnt = 1, cur = 0;\nfor(auto &amp;weight : weights) {\nif(limit &lt; weight) return false;\nif(cur + weight &gt; limit) {\ncnt++;\ncur = 0;\n}\ncur += weight;\n}\nreturn cnt &lt;= D; // &lt;= D\u8bf4\u660e\u53ef\u4ee5\u5728D\u5929\u4e4b\u5185\u8fd0\u8f93\u5b8c\u6bd5\n}\nint shipWithinDays(vector&lt;int&gt;&amp; weights, int D) {\nint left = 1, right = 500*50000; // limit [1, 500 * 50000]\nint ans = right; // ans\u4fdd\u5b58limit\nwhile(left &lt;= right) {\nint mid = (left + right) / 2;\nif(check(weights, D, mid)) { // \u53ef\u4ee5\u6ee1\u8db3 \u8bd5\u56fe\u51cf\u5c11limit \u56e0\u4e3a\u8981\u6c42\u6700\u5c0f\u503c\nright = mid - 1;\nans = mid;\n}\nelse // \u4e0d\u80fd\u6ee1\u8db3 \u589e\u52a0limit\nleft = mid + 1;\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#897","title":"897. \u9012\u589e\u641c\u7d22\u6811","text":"<p>\u4e2d\u5e8f\u904d\u5386\u5b58\u6811\u7684\u7ed3\u70b9\u6307\u9488 \u7136\u540e\u91cd\u5efa\u6811</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nvoid midSearch(TreeNode *root, vector&lt;TreeNode *&gt; &amp;nodes) {\nif (root == nullptr) return;\nmidSearch(root -&gt; left, nodes);\nnodes.push_back(root);\nmidSearch(root -&gt; right, nodes);\n}\nTreeNode* increasingBST(TreeNode* root) {\nvector&lt;TreeNode *&gt; nodes;\nif (root == nullptr) return nullptr;\nmidSearch(root, nodes);\nnodes.push_back(nullptr);\nTreeNode *ans = nodes[0], *temp = nodes[0];\nfor (int i = 0; i &lt; nodes.size() - 1; i++) {\nnodes[i] -&gt; left = nullptr;\nnodes[i] -&gt; right = nodes[i + 1];\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#377iv","title":"377.\u7ec4\u5408\u603b\u6570IV","text":"<p>DP</p> <p><code>dp[i][j]</code>\u8868\u793a\u957f\u5ea6\u4e3ai\u7684 \u6784\u6210\u603b\u548c\u4e3aj\u7684\u65b9\u6848\u6570</p> <p><code>dp[0][0] = 1</code></p> <p></p> <pre><code>using ULL =  unsigned long long;\nclass Solution {\npublic:\nint combinationSum4(vector&lt;int&gt;&amp; nums, int target) {\nint len = target;\nvector&lt;vector&lt;ULL&gt;&gt; f(len + 1,vector&lt;ULL&gt;(target + 1,0));\nf[0][0] = 1; // \u6570\u7ec4\u957f\u5ea6\u4e3ai \u6784\u6210\u957f\u5ea6\u4e3aj\nint ans = 0;\nfor(int i = 1; i &lt;= len; i++){\nfor(int j = 0; j &lt;= target; j++){\nfor(auto x : nums){\nif(j &gt;= x) f[i][j] += f[i - 1][j - x];\n// \u4ece i - 1\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765 \u53ef\u80fd\u662f\u6570\u7ec4\u4efb\u610f\u4e00\u4e2a\u6570\u8f6c\u79fb\u8fc7\u6765 \n}\n}\n// \u5c06\u6bcf\u4e00\u4e2a\u957f\u5ea6 1 - target(\u51681) \u7684\u957f\u5ea6\u7684\u65b9\u6848\u4e66\u76f8\u52a0\nans += f[i][target];\n}\nreturn ans;\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nint combinationSum4(vector&lt;int&gt;&amp; nums, int target) {\nvector&lt;int&gt; f(target + 1,0); // or vector&lt;unsigned long long&gt; f(target + 1,0); \u5c31\u4e0d\u7528\u505a\u53d6\u6a21\u7684\u64cd\u4f5c\u4e86\nf[0] = 1;\nfor(int i = 1; i &lt;= target; i++){\nfor(auto x : nums){\n//c++\u8ba1\u7b97\u7684\u4e2d\u95f4\u7ed3\u679c\u4f1a\u6ea2\u51fa\uff0c\u4f46\u56e0\u4e3a\u6700\u7ec8\u7ed3\u679c\u662fint\n//\u56e0\u6b64\u6bcf\u6b21\u8ba1\u7b97\u5b8c\u90fd\u5bf9INT_MAX\u53d6\u6a21\uff0c0LL\u662f\u5c06\u8ba1\u7b97\u7ed3\u679c\u63d0\u5347\u5230long long\u7c7b\u578b\nif(i &gt;= x) f[i] =(0LL + f[i] + f[i - x]) % INT_MAX;\n}\n}\nreturn f[target];\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#368","title":"368. \u6700\u5927\u6574\u9664\u5b50\u96c6","text":"<p>DP</p> <p>dp[i] \u8868\u793a\u4ee5nums[i]\u4e3a\u672b\u5c3e\u5143\u7d20\u7684\u6574\u9664\u5b50\u96c6\u7684\u4e2a\u6570</p> <p>\u521d\u59cb\u72b6\u6001\uff1adp[i] = 1</p> <p>\u7b2c\u4e00\u904d\u627e\u5230\u6bcf\u4e2a\u4ee5nums[i]\u7ed3\u5c3e\u7684\u6574\u9664\u5b50\u96c6\u5927\u5c0f\u3002\u5e76\u8bb0\u5f55\u6700\u5927\u503c\u548c\u6700\u5927\u5b50\u96c6\u957f\u5ea6dp[i] =max(dp[i], dp[j] + 1);</p> <p>\u7b2c\u4e8c\u6b65\uff1a\u4ece\u540e\u5f80\u524d\u904d\u5386\u5148\u627e\u5230\u6ee1\u8db3\u6700\u5927\u503c\u548c\u6700\u5927\u5b50\u96c6\u957f\u5ea6\u7684\u5143\u7d20\uff0c\u7136\u540e\u6bcf\u9009\u4e00\u4e2a\u5143\u7d20\u5c31\u51cf\u53bb\u4e00\u4e2a\u6700\u5927\u5b50\u96c6\u957f\u5ea6\uff0c\u5982maxSize = 5\uff0c\u4e00\u76f4\u9012\u51cf\u76f4\u52301\u4e3a\u6b62\u3002\u5224\u65ad\u5143\u7d20\u662f\u5426\u7b26\u5408\u7684\u6761\u4ef6\u5c31\u662f\u5f53\u524ddp[i] == maxSize, \u4e14maxVlaue % nums[i] == 0</p> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; largestDivisibleSubset(vector&lt;int&gt;&amp; nums) {\nint len = nums.size();\nsort(nums.begin(), nums.end());\n// \u7b2c 1 \u6b65\uff1a\u52a8\u6001\u89c4\u5212\u627e\u51fa\u6700\u5927\u5b50\u96c6\u7684\u4e2a\u6570\u3001\u6700\u5927\u5b50\u96c6\u4e2d\u7684\u6700\u5927\u6574\u6570\nvector&lt;int&gt; dp(len, 1);\nint maxSize = 1;\nint maxVal = dp[0];\nfor (int i = 1; i &lt; len; i++) {\nfor (int j = 0; j &lt; i; j++) {\n// \u9898\u76ee\u4e2d\u8bf4\u300c\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u300d\u5f88\u91cd\u8981\nif (nums[i] % nums[j] == 0) {\ndp[i] = max(dp[i], dp[j] + 1);\n}\n}\nif (dp[i] &gt; maxSize) {\nmaxSize = dp[i];\nmaxVal = nums[i];\n}\n}\n// \u7b2c 2 \u6b65\uff1a\u5012\u63a8\u83b7\u5f97\u6700\u5927\u5b50\u96c6\nvector&lt;int&gt; res;\nif (maxSize == 1) {\nres.push_back(nums[0]);\nreturn res;\n}\nfor (int i = len - 1; i &gt;= 0 &amp;&amp; maxSize &gt; 0; i--) {\nif (dp[i] == maxSize &amp;&amp; maxVal % nums[i] == 0) {\nres.push_back(nums[i]);\nmaxVal = nums[i];\nmaxSize--;\n}\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#27","title":"27. \u79fb\u9664\u5143\u7d20","text":"<p>\u539f\u5730\u5220\u9664\u65e0\u5e8f\u6570\u7ec4\u7684\u7279\u5b9a\u9879</p> <p></p> <pre><code>class Solution {\npublic:\nint removeElement(vector&lt;int&gt;&amp; nums, int val) {\nint cur = 0;\nfor (auto num : nums ){\nif (val != num) {\nnums[cur++] = num;\n}\n}\nreturn cur;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#26","title":"26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u7684\u91cd\u590d\u9879","text":"<p>\u539f\u5730\u5220\u9664\u6709\u5e8f\u6570\u7ec4\u7684\u91cd\u590d\u9879</p> <pre><code>class Solution {\npublic int removeDuplicates(int[] nums) {\nif (nums.length == 0) return 0;\nint i = 0;\nfor (int j = 1; j &lt; nums.length; j++) {\nif (nums[j] != nums[i]) {\ni++;\nnums[i] = nums[j];\n}\n}\nreturn i + 1;\n}\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#220","title":"220. \u5b58\u5728\u91cd\u590d\u5143\u7d20","text":"<p>\u6ed1\u52a8\u7a97\u53e3 + set\u7ef4\u62a4\u7a97\u53e3\u5185\u7684\u72b6\u6001</p> <p></p> <pre><code>class Solution {\npublic:\nbool containsNearbyAlmostDuplicate(vector&lt;int&gt;&amp; nums, int k, int t) {\nset&lt;long&gt; s;\nfor (int i = 0; i &lt; nums.size(); ++i) {\n// \u6307\u9488\u5b9a\u4f4d\u6bd4 long(nums[i])-t \u5927\u7684\u6570\u7684\u4f4d\u7f6e\nauto pos = s.lower_bound(long(nums[i]) - t);\n// \u5982\u679c\u5b58\u5728\u4e14\u8be5\u6570\u5b57\u4e5f\u6bd4 long(nums[i]) + t \u5c0f\uff0c\u8bf4\u660e\u5b58\u5728\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\nif (pos!=s.end() &amp;&amp; *pos &lt;= long(nums[i]) + t) return true;\ns.insert(nums[i]);\nif (s.size() &gt; k) s.erase(nums[i-k]); // \u7ef4\u62a4\u6ed1\u52a8\u7a97\u53e3\n}\nreturn false;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#213","title":"213. \u6253\u5bb6\u52ab\u820d","text":"<p>\u53c2\u8003198 \u505a\u4e24\u6b21\u6253\u5bb6\u52ab\u820d \u5206\u4e3a\uff1a</p> <ol> <li>\u6253\u52ab\u7b2c\u4e00\u5bb6</li> <li>\u4e0d\u6253\u52ab\u7b2c\u4e00\u5bb6</li> </ol> <p></p> <pre><code>class Solution {\npublic:\nint rob0(vector&lt;int&gt;&amp; nums, int st, int end) {\nint n = nums.size();\nif (n == 0) return 0;\n//vector&lt;int&gt; dp(n + 1, 0); // dp[i]\u8868\u793a\u5077\u524di\u4e2a\u623f\u5b50\u7684\u6700\u5927\u91d1\u989d\n//dp[1] = nums[0];\nint cur = nums[st], pre = 0;\nfor (int i = st + 2; i &lt;= end; i++) {\nint temp = cur;\ncur = max(cur, pre + nums[i - 1]);\npre = temp;\n//dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1]);\n}\nreturn cur;\n}\nint rob(vector&lt;int&gt;&amp; nums) {\nint n = nums.size();\nif (n == 1) return nums[0];\n//return rob0(nums, 0, n);\nreturn max(rob0(nums, 0, n - 1), rob0(nums, 1, n));\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#208trie","title":"208.Trie\u6811","text":"<pre><code>class Trie {\nprivate:\nbool isEnd;\nTrie* next[26]; // \u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u53ef\u80fd\u670926\u4e2a\u5b57\u6bcd\u7684\u5206\u652f\npublic:\nTrie() {\nisEnd = false;\nmemset(next, 0, sizeof(next));\n}\nvoid insert(string word) {\nTrie* node = this;\n// \u5b58\u5728\u5c31\u4e00\u76f4\u627e\u5230\u5e95 \u4e0d\u5b58\u5728\u5c31\u521b\u5efa\u65b0\u7684\u7ed3\u70b9\nfor (char c : word) {\nif (node-&gt;next[c-'a'] == NULL) {\nnode-&gt;next[c-'a'] = new Trie();\n}\nnode = node-&gt;next[c-'a'];\n}\nnode-&gt;isEnd = true; // \u6807\u8bb0\u4e3a\u5b58\u5728\n}\nbool search(string word) {\nTrie* node = this;\nfor (char c : word) {\nnode = node-&gt;next[c - 'a'];\nif (node == NULL) { // \u5f53\u524d\u5b57\u5b57\u6bcd\u8fd8\u6ca1\u6709\u88ab\u5efa\u7acb\u8fc7 \u80af\u5b9a\u4e0d\u5b58\u5728\nreturn false;\n}\n}\n// \u5728Trie\u6811\u4e2d\u627e\u5230\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 \u5e76\u4e14\u5df2\u7ecf\u79fb\u52a8\u4e86\u8be5\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\nreturn node-&gt;isEnd;\n}\n// \u53ea\u8981\u6811\u4e2d\u80fd\u627e\u5230\u5bf9\u5e94\u7684prefix\u7684\u5b57\u7b26\u4e32\u5c31\u53ef \u4e0d\u7ba1\u662f\u5426\u7ed3\u5c3e\nbool startsWith(string prefix) {\nTrie* node = this;\nfor (char c : prefix) {\nnode = node-&gt;next[c-'a'];\nif (node == NULL) {\nreturn false;\n}\n}\nreturn true;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#783","title":"783.\u4e8c\u53c9\u6811\u8282\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb","text":"<p>\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u6709\u5e8f\u6570\u7ec4 \u6700\u5c0f\u7684\u8ddd\u79bb\u4e3a\u76f8\u90bb\u7684\u4e24\u4e2a\u503c\u7684\u5dee\u503c\u6700\u5c0f</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nvector&lt;int&gt; nums;\nvoid dfs(TreeNode*root) {\nif (root == nullptr) return ;\ndfs(root -&gt; left);\nnums.push_back(root -&gt; val);\ndfs(root -&gt; right);\n}\nint minDiffInBST(TreeNode* root) {\ndfs(root);\nint len = nums.size();\nint ans = INT_MAX;\nfor (int i = 1; i &lt; len; i++) {\nans = min(ans, nums[i] - nums[i - 1]);\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#264-ii","title":"264. \u4e11\u6570II","text":"<p>\u5c0f\u9876\u5806: \u5806\u9876\u4e3ax , \u4e0b\u4e00\u4e2a\u70b9\u5c31\u662f 2x, 3x, 5x</p> <p></p> <pre><code>class Solution {\npublic:\nint nthUglyNumber(int n) {\nvector&lt;int&gt; factors = {2, 3, 5};\nunordered_set&lt;long&gt; seen;\npriority_queue&lt;long, vector&lt;long&gt;, greater&lt;long&gt;&gt; heap;\nseen.insert(1L);\nheap.push(1L);\nint ugly = 0;\nfor (int i = 0; i &lt; n; i++) {\nlong curr = heap.top();\nheap.pop();\nugly = (int)curr;\nfor (int factor : factors) {\nlong next = curr * factor;\nif (!seen.count(next)) {\nseen.insert(next);\nheap.push(next);\n}\n}\n}\nreturn ugly;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#263","title":"263. \u4e11\u6570","text":"<pre><code>class Solution {\npublic:\nbool isUgly(int n) {\nif (n &lt;= 0) {\nreturn false;\n}\nvector&lt;int&gt; factors = {2, 3, 5};\nfor (int factor : factors) {\nwhile (n % factor == 0) {\nn /= factor;\n}\n}\nreturn n == 1;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#33","title":"33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4","text":"<p>\u4e8c\u5206\u641c\u7d22</p> <pre><code>class Solution {\npublic:\nint search(vector&lt;int&gt;&amp; nums, int target) {\nint lo = 0, hi = nums.size() - 1;\nwhile (lo &lt; hi) {\nint mid = (lo + hi) / 2;\nif ((nums[0] &gt; target) ^ (nums[0] &gt; nums[mid]) ^ (target &gt; nums[mid]))\nlo = mid + 1;\nelse\nhi = mid;\n}\nreturn lo == hi &amp;&amp; nums[lo] == target ? lo : -1;\n}\n};\n</code></pre> <p>\u4e8c\u5206\u6a21\u677f</p> <pre><code>class Solution {\npublic:\nint search(vector&lt;int&gt;&amp; nums, int target) {\nint lo = 0, hi = nums.size() - 1;\nwhile (lo &lt; hi) {\nint mid = (lo + hi) / 2;\nif (check[nums[mid]])\nlo = mid + 1; // target -&gt; [mid + 1, r]\nelse\nhi = mid;// target -&gt; [lo, mid]\n}\nreturn l;//\u6700\u540e\u662fl == r\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#80-ii","title":"80. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879II","text":"<p>\u53cc\u6307\u9488\uff08\u5feb\u6162\u6307\u9488\uff09\uff0ccur\u8868\u793a\u5f53\u524d\u904d\u5386\u5230\u7684\u6307\u9488\uff0cfill\u8868\u793a\u9700\u8981\u586b\u7684\u6307\u9488\uff0c\u6700\u540e\u6570\u7ec4\u7684\u957f\u5ea6\u5c31\u662f\u586b\u5165\u4e86\u591a\u5c11\u4e2a\u6570\u3002</p> <p></p> <pre><code>class Solution {\npublic:\nint removeDuplicates(vector&lt;int&gt;&amp; nums) {\nint n = nums.size();\nint cnt = 1;\nint fill = 1;\n// \u8fd9\u91cc\u76f4\u63a5\u4ece1\u5f00\u59cb\u907f\u514d\u540e\u9762\u6761\u4ef6\u5224\u65ad\nfor (int cur = 1; cur &lt; n; ++cur) {\nif (nums[cur] != nums[cur-1])  cnt = 1;\nelse ++cnt;\nif (cnt &lt;= 2){\nnums[fill] = nums[cur];\n++fill;\n}\n}\nreturn fill;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#88","title":"88.\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4","text":"<p>2021-04-05</p> <p></p> <pre><code>class Solution {\npublic:\nvoid merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) {\nint idx = m + n - 1;\nint i = m - 1, j = n - 1;\nwhile (i &gt;= 0 || j &gt;= 0) {\nif (i &gt;= 0 &amp;&amp; j &gt;= 0) {\nif (nums1[i] &gt; nums2[j]) {\nnums1[idx--] = nums1[i];\ni--;\n} else {\nnums1[idx--] = nums2[j];\nj--;\n}\n} else {\nif (i == -1) {\nnums1[idx--] = nums2[j];\nj--;\n}else {\nnums1[idx--] = nums1[i];\ni--;\n}\n}\n}\n}\n};\n</code></pre> <p></p>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#781","title":"781. \u68ee\u6797\u91cc\u9762\u7684\u5154\u5b50","text":"<p>2021-04-04</p> <p></p> <pre><code>class Solution {\npublic:\nint numRabbits(vector&lt;int&gt; &amp;answers) {\nunordered_map&lt;int, int&gt; count;\nfor (int y : answers) {\n++count[y];\n}\nint ans = 0;\nfor (auto &amp;[y, x] : count) {\nans += (x + y) / (y + 1) * (y + 1);\n}\nreturn ans;\n}\n};\n</code></pre> <p>\u4e24\u53ea\u76f8\u540c\u989c\u8272\u7684\u5154\u5b50\u770b\u5230\u7684\u5176\u4ed6\u540c\u8272\u5154\u5b50\u6570\u5fc5\u7136\u662f\u76f8\u540c\u7684\u3002\u53cd\u4e4b\uff0c\u82e5\u4e24\u53ea\u5154\u5b50\u770b\u5230\u7684\u5176\u4ed6\u540c\u8272\u5154\u5b50\u6570\u4e0d\u540c\uff0c\u90a3\u4e48\u8fd9\u4e24\u53ea\u5154\u5b50\u989c\u8272\u4e5f\u4e0d\u540c\u3002</p> <p>\u56e0\u6b64\uff0c\u5c06 \\textit{answers}answers \u4e2d\u503c\u76f8\u540c\u7684\u5143\u7d20\u5206\u4e3a\u4e00\u7ec4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\uff0c\u8ba1\u7b97\u51fa\u5154\u5b50\u7684\u6700\u5c11\u6570\u91cf\uff0c\u7136\u540e\u5c06\u6240\u6709\u7ec4\u7684\u8ba1\u7b97\u7ed3\u679c\u7d2f\u52a0\uff0c\u5c31\u662f\u6700\u7ec8\u7684\u7b54\u6848\u3002</p> <p>\u4f8b\u5982\uff0c\u73b0\u5728\u6709 13 \u53ea\u5154\u5b50\u56de\u7b54 5\u3002\u5047\u8bbe\u5176\u4e2d\u6709\u4e00\u53ea\u7ea2\u8272\u7684\u5154\u5b50\uff0c\u90a3\u4e48\u68ee\u6797\u4e2d\u5fc5\u7136\u6709 6 \u53ea\u7ea2\u5154\u5b50\u3002\u518d\u5047\u8bbe\u5176\u4e2d\u8fd8\u6709\u4e00\u53ea\u84dd\u8272\u7684\u5154\u5b50\uff0c\u540c\u6837\u7684\u9053\u7406\u68ee\u6797\u4e2d\u5fc5\u7136\u6709 66 \u53ea\u84dd\u5154\u5b50\u3002\u4e3a\u4e86\u6700\u5c0f\u5316\u53ef\u80fd\u7684\u5154\u5b50\u6570\u91cf\uff0c\u6211\u4eec\u5047\u8bbe\u8fd9 12 \u53ea\u5154\u5b50\u90fd\u5728\u8fd9 13 \u53ea\u5154\u5b50\u4e2d\u3002\u90a3\u4e48\u8fd8\u6709\u4e00\u53ea\u989d\u5916\u7684\u5154\u5b50\u56de\u7b54 5\uff0c\u8fd9\u53ea\u5154\u5b50\u53ea\u80fd\u662f\u5176\u4ed6\u7684\u989c\u8272\uff0c\u8fd9\u4e00\u989c\u8272\u7684\u5154\u5b50\u4e5f\u6709 6 \u53ea\u3002\u56e0\u6b64\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6700\u5c11\u4f1a\u6709 18 \u53ea\u5154\u5b50\u3002</p> <p>\u4e00\u822c\u5730\uff0c\u5982\u679c\u6709 x \u53ea\u5154\u5b50\u90fd\u56de\u7b54y\uff0c\u5219\u81f3\u5c11\u6709 ==x / (y + 1)== \u79cd\u4e0d\u540c\u7684\u989c\u8272\uff0c\u4e14\u6bcf\u79cd\u989c\u8272\u6709 ==y+1== \u53ea\u5154\u5b50\uff0c\u56e0\u6b64\u5154\u5b50\u6570\u81f3\u5c11\u4e3a</p> <p></p> <p>\u6211\u4eec\u53ef\u4ee5\u7528\u54c8\u5e0c\u8868\u7edf\u8ba1 answers \u4e2d\u5404\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\u5957\u7528\u4e0a\u8ff0\u516c\u5f0f\u8ba1\u7b97\uff0c\u5e76\u5c06\u8ba1\u7b97\u7ed3\u679c\u7d2f\u52a0\uff0c\u5373\u4e3a\u6700\u7ec8\u7b54\u6848\u3002</p> <p>\u5411\u4e0a\u53d6\u6574\uff1a (x + y) / (y + 1)</p>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1143","title":"1143.\u6700\u957f\u4e0a\u5347\u516c\u5171\u5b50\u5e8f\u5217","text":"<p>2021-04-05</p> <p>https://leetcode-cn.com/problems/longest-common-subsequence/</p> <p></p> <pre><code>class Solution {\npublic:\nint longestCommonSubsequence(string text1, string text2) {\nconst int M = text1.size();\nconst int N = text2.size();\nvector&lt;vector&lt;int&gt;&gt; dp(M + 1, vector&lt;int&gt;(N + 1, 0));\nfor (int i = 1; i &lt;= M; ++i) {\nfor (int j = 1; j &lt;= N; ++j) {\nif (text1[i - 1] == text2[j - 1]) {\ndp[i][j] = dp[i - 1][j - 1] + 1;\n} else {\ndp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n}\n}\n}\nreturn dp[M][N];\n}\n};\n</code></pre> <p></p> <pre><code>class Solution {\npublic:\nint longestCommonSubsequence(string s1, string s2) {\nint n = s1.size(), m = s2.size();\ns1 = \" \" + s1, s2 = \" \" + s2;\nint f[n+1][m+1];\nmemset(f, 0, sizeof(f));\nfor(int i = 0; i &lt;= n; i++) f[i][0] = 1;\nfor(int j = 0; j &lt;= m; j++) f[0][j] = 1;\nfor(int i = 1; i &lt;= n; i++) {\nfor(int j = 1; j &lt;= m; j++) {\nif(s1[i] == s2[j])\nf[i][j] = f[i-1][j-1] + 1;\nelse\nf[i][j] = max(f[i-1][j], f[i][j-1]);\n}\n}\nreturn f[n][m] - 1;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1721","title":"\u9762\u8bd5\u989817.21 \u76f4\u65b9\u56fe\u7684\u6c34\u91cf","text":"<p>\u7b97\u6cd5\u601d\u60f3\uff1a\u603b\u4f53\u79ef\u51cf\u53bb\u67f1\u5b50\u7684\u4f53\u79ef\u5c31\u662f\u96e8\u6c34\u7684\u4f53\u79ef</p> <pre><code>class Solution {\npublic:\nint trap(vector&lt;int&gt;&amp; height) {\nint Sum = accumulate(height.begin(), height.end(), 0); // \u5f97\u5230\u67f1\u5b50\u7684\u4f53\u79ef\nint volume = 0; // \u603b\u4f53\u79ef\u548c\u9ad8\u5ea6\u521d\u59cb\u5316\nint high = 1;\nint size = height.size();\nint left = 0; // \u53cc\u6307\u9488\u521d\u59cb\u5316\nint right = size - 1;\nwhile (left &lt;= right) {\n// \u5728\u5de6\u8fb9\u627e\u5230\u7b2c\u4e00\u4e2a\u9ad8\u5ea6 &gt;= height\u7684\nwhile (left &lt;= right &amp;&amp; height[left] &lt; high) {\nleft++;\n}\n// \u5728\u53f3\u8fb9\u627e\u5230\u7b2c\u4e00\u4e2a\u9ad8\u5ea6 &gt;= height\u7684\nwhile (left &lt;= right &amp;&amp; height[right] &lt; high) {\nright--;\n}\n// \u4e8c\u8005\u5dee\u503c+ 1\u5c31\u662f\u8fd9\u4e00\u5c42\u7684\u4f53\u79ef\nvolume += right - left + 1; // \u6bcf\u4e00\u5c42\u7684\u5bb9\u91cf\u90fd\u52a0\u8d77\u6765\nhigh++; // \u9ad8\u5ea6\u52a0\u4e00\n}\nreturn volume - Sum; // \u603b\u4f53\u79ef\u51cf\u53bb\u67f1\u5b50\u4f53\u79ef\uff0c\u5373\u96e8\u6c34\u603b\u91cf\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#74","title":"74.\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635","text":"<p>\u4e8c\u5206\u641c\u7d22\u3002</p> <p></p> <pre><code>class Solution {\npublic:\nbool searchMatrix(vector&lt;vector&lt;int&gt;&gt; matrix, int target) {\nauto row = upper_bound(matrix.begin(), matrix.end(), target, [](const int b, const vector&lt;int&gt; &amp;a) {\nreturn b &lt; a[0];\n});\nif (row == matrix.begin()) {\nreturn false;\n}\n--row;\nreturn binary_search(row-&gt;begin(), row-&gt;end(), target);\n}\n};\n</code></pre> <p>==lower_bound( begin,end,num)==\uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002</p> <p>==upper_bound( begin,end,num)==\uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002</p> <p>\u5728\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c\u91cd\u8f7dlower_bound()\u548cupper_bound()</p> <p>==lower_bound( begin,end,num,greater() )==:\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 <p>==upper_bound( begin,end,num,greater() )==:\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\nint a[] = {1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4};\ncout &lt;&lt; (lower_bound(a, a + 12, 4) - a) &lt;&lt; endl; //\u8f93\u51fa 9\ncout &lt;&lt; (upper_bound(a, a + 12, 4) - a) &lt;&lt; endl; //\u8f93\u51fa 12\ncout &lt;&lt; (lower_bound(a, a + 12, 1) - a) &lt;&lt; endl; //\u8f93\u51fa 0\ncout &lt;&lt; (upper_bound(a, a + 12, 1) - a) &lt;&lt; endl; //\u8f93\u51fa 3\ncout &lt;&lt; (lower_bound(a, a + 12, 3) - a) &lt;&lt; endl; //\u8f93\u51fa 6\ncout &lt;&lt; (upper_bound(a, a + 12, 3) - a) &lt;&lt; endl; //\u8f93\u51fa 9\ncout &lt;&lt; (lower_bound(a, a + 12, 5) - a) &lt;&lt; endl; //\u8f93\u51fa 12\ncout &lt;&lt; (upper_bound(a, a + 12, 5) - a) &lt;&lt; endl; //\u8f93\u51fa 12\ncout &lt;&lt; (lower_bound(a, a + 12, 0) - a) &lt;&lt; endl; //\u8f93\u51fa 0\ncout &lt;&lt; (upper_bound(a, a + 12, 0) - a) &lt;&lt; endl; //\u8f93\u51fa 0\nreturn 0;\n}\n</code></pre> <p>\u8f6c\u53d8\u4e3a\u4e00\u7ef4\u4e8c\u5206</p> <pre><code>class Solution {\npublic:\nbool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\nint m = matrix.size(), n = matrix[0].size();\nint low = 0, high = m * n - 1;\nwhile (low &lt;= high) {\nint mid = (high - low) / 2 + low;\nint x = matrix[mid / n][mid % n];\nif (x &lt; target) {\nlow = mid + 1;\n} else if (x &gt; target) {\nhigh = mid - 1;\n} else {\nreturn true;\n}\n}\nreturn false;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1006","title":"1006. \u7b28\u9636\u4e58","text":"<p>2021-04-01</p> <p></p> <pre><code>class Solution {\npublic:\nint clumsy(int N) {\nstack&lt;int&gt; stk;\nstk.push(N);\nN--;\nint index = 0; // \u7528\u4e8e\u63a7\u5236\u4e58\u3001\u9664\u3001\u52a0\u3001\u51cf\nwhile (N &gt; 0) {\nif (index % 4 == 0) {\nstk.top() *= N;\n} else if (index % 4 == 1) {\nstk.top() /= N;\n} else if (index % 4 == 2) {\nstk.push(N);\n} else {\nstk.push(-N);\n}\nindex++;\nN--;\n}\n// \u628a\u6808\u4e2d\u6240\u6709\u7684\u6570\u5b57\u4f9d\u6b21\u5f39\u51fa\u6c42\u548c\nint sum = 0;\nwhile (!stk.empty()) {\nsum += stk.top();\nstk.pop();\n}\nreturn sum;\n}\n};\n</code></pre> <pre><code>// \u8fd8\u6709\u8fd9\u79cd\u7528\u6cd5\nstk.top() *= N; // \u5c0f\u6280\u5de7 \u9762\u5bf9\u8981\u51cf\u53bb\u7684\u6570\u53ef\u4ee5\u53d8\u4e3a+(-N)\nstk.push(-N);\n// \u76f8\u540c\u7684\u8fd8\u6709 \u5806\u9ed8\u8ba4\u5927\u9876\u5806 \u5982\u679c\u8981\u6784\u5efa\u5c0f\u9876\u5806 \u5c31\u628a-element\u63d2\u5165push\u8fdb\u5806\u4e4b\u4e2d\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#acwing","title":"Acwing\u6bcf\u65e5\u4e00\u9898","text":""},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3725-20211026","title":"3725. \u5356\u7f50\u5934 : \u6570\u5b66(2021/10/26)","text":"<p>\u533a\u95f4\u6700\u5927\u957f\u5ea6\u4e3a<code>l</code>\u5373<code>[l, l*2 - 1]</code></p> <p></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nint main()\n{\nint T;\ncin &gt;&gt; T;\nwhile (T--) {\nint l, r;\ncin &gt;&gt; l &gt;&gt; r;\nif (r &gt;= 2 * l) cout &lt;&lt; \"NO\" &lt;&lt; endl;\nelse cout &lt;&lt; \"YES\" &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3705-mex-20211026","title":"3705. \u5b50\u96c6mex\u503c : \u6570\u5b66(2021/10/26)","text":"<p>\u7edf\u8ba1\u4ece0\u5230100\u7684\u6570\u5b57\u4e2a\u6570</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\nint T;\ncin &gt;&gt; T;\nwhile (T --) {\nint n;\ncin &gt;&gt; n;\nunordered_map&lt;int, int&gt; m;\nfor (int i = 0; i &lt; n; i++) {\nint tmp;\ncin &gt;&gt; tmp;\nm[tmp]++;\n}\nint mexa, mexb;\nfor (int i = 0; i &lt; 101; i++) {\nif (m.find(i) != m.end()) {\nm[i]--;\ncontinue;\n} else {\nmexa = i;\nbreak;\n}\n}\nfor (int i = 0; i &lt; 101; i++) {\nif (m.find(i) != m.end() &amp;&amp; m[i] != 0) {\nm[i]--;\ncontinue;\n} else {\nmexb = i;\nbreak;\n}\n}\ncout &lt;&lt; mexa + mexb &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3732-20211025","title":"3732. \u77e9\u9635\u590d\u539f \uff1a\u6784\u9020\u601d\u7ef4\u9898(2021/10/25)","text":"<p>\u6839\u636e\u5217\u9996tar\u503c\u786e\u5b9a\u4ed6\u5728\u67d0\u884c\u4e2d\u7684\u5217\u4f4d\u7f6e \u7136\u540e\u586b\u5145\u8be5\u5217\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nconst int N = 505;\nint a[N][N], b[N][N], c[N][N];\nusing namespace std;\nint main()\n{\nint T;\ncin &gt;&gt; T;\nwhile (T --) {\nint n , m;\ncin &gt;&gt; n &gt;&gt; m;\nunordered_map&lt;int, int &gt; idx;\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = 0; j &lt; m; j++) {\ncin &gt;&gt; a[i][j];\nidx[a[i][j]] = j;\n}\n}\nfor (int i = 0; i &lt; m; i++) {\nfor (int j = 0; j &lt; n; j++) {\ncin &gt;&gt; b[i][j];\n}\n}\nfor (int i = 0; i &lt; m; i++) {\nint tar = b[i][0];\nint col = idx[tar];\nfor (int j = 0; j &lt; n; j++) {\nc[j][col] = b[i][j];\n}\n}\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = 0; j &lt; m; j ++ ) {\ncout &lt;&lt; c[i][j] &lt;&lt; (j == m-1?\"\":\" \");\n}\ncout &lt;&lt; endl;\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3731-20211025","title":"3731. \u5e8f\u5217\u51d1\u96f6 \uff1a \u601d\u7ef4\u9898(2021/10/25)","text":"<p>\u4e24\u4e24\u4e00\u7ec4 \u5728\u540c\u4e00\u7ec4\u4e2d\u548c\u4e3a0</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[105];\nint b[105];\nint main()\n{\nint T;\ncin &gt;&gt; T;\nwhile (T -- ) {\nint n;\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i ++ ) {\ncin &gt;&gt; a[i];\nif (i % 2 == 1) {\nb[i - 1] = -a[i];\nb[i] = a[i - 1];\n}\n}\nfor (int i = 0; i &lt; n; i ++ ) {\ncout &lt;&lt; b[i] &lt;&lt; (i==n-1?\"\":\" \");\n}\ncout &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3730-20211025","title":"3730. \u5bfb\u627e\u5e8f\u5217(2021/10/25)","text":"<p>\u6784\u9020\uff1a\u5bf9\u4e8ei\u4fdd\u8bc1\u4e0ei-1\u4e0d\u540c\u5373\u53ef \u6700\u540e\u515c\u5e95\u68c0\u67e5n - 1\u4e0e0\u662f\u5426\u4e5f\u6ee1\u8db3</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 110;\nint n;\nint a[4][N];\nint main()\n{\nint T;\ncin &gt;&gt; T;\nwhile (T -- )\n{\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; 3; i ++ )\nfor (int j = 0; j &lt; n; j ++ )\ncin &gt;&gt; a[i][j];\na[3][0] = a[0][0];\nfor (int i = 1; i &lt; n - 1; i ++ )\nfor (int j = 0; j &lt; 3; j ++ )\nif (a[3][i - 1] != a[j][i])\n{\na[3][i] = a[j][i];\nbreak;\n}\nfor (int i = 0; i &lt; 3; i ++ )\nif (a[i][n - 1] != a[3][0] &amp;&amp; a[i][n - 1] != a[3][n - 2])\n{\na[3][n - 1] = a[i][n - 1];\nbreak;\n}\nfor (int i = 0; i &lt; n; i ++ ) cout &lt;&lt; a[3][i] &lt;&lt; ' ';\ncout &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3824","title":"3824.\u5728\u6821\u65f6\u95f4","text":"<p>\u7b80\u5355\u6a21\u62df</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[110];\nint main() {\nint T;\nint n;\ncin &gt;&gt; T;\nwhile(T--) {\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++) {\ncin &gt;&gt; a[i];\n}\nint cur = 0, ans = 0;\nint flag = 0;\nwhile (cur &lt; n) {\nif (a[cur] == 1) {\nans ++, cur ++;\nflag = 1;\n} else if (flag &amp;&amp; cur + 1 &lt; n &amp;&amp; a[cur + 1] != 0) { //\u5982\u679c\u4e0d\u662f00\u8bf4\u660e\u5728\u6821 0 1\nans ++, cur ++;\n} else { // 00\u60c5\u51b5\nwhile (cur &lt; n &amp;&amp; a[cur] == 0) { // 00\ncur++;\n}\n}\n}\ncout &lt;&lt; ans &lt;&lt; endl;\n}\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3781","title":"3781.\u4e58\u8f66\u95ee\u9898","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[35];\nint main () {\nint T;\ncin &gt;&gt;T;\nwhile (T--) {\nint n, m;\ncin &gt;&gt; n &gt;&gt; m;\nint ans  = 0;\nfor (int i = 0; i &lt;n; i++) {\ncin &gt;&gt; a[i];\n}\nfor(int i = 0; i &lt; n; i++) {\nans++;\nint sum = a[i];\nwhile ((i + 1) &lt; n &amp;&amp; a[i + 1] + sum &lt;= m) {\nsum += a[i + 1];\ni++;\n}\n//cout &lt;&lt; sum &lt;&lt; endl;\n}\ncout &lt;&lt; ans &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3729","title":"3729. \u6539\u53d8\u6570\u7ec4\u5143\u7d20","text":"<p>\u533a\u95f4\u5dee\u5206\uff1a\u8fd9\u4e2a\u4e0d\u9898\u76ee\u4e0d\u80fd\u76f4\u63a5\u7528\uff0c\u9700\u8981\u7ef4\u62a4\u8be5\u533a\u95f4\u7684\u6b21\u6570\u3002</p> <p>\u7b97\u6cd5\u539f\u7406\uff1a\u7ef4\u62a4\u6570\u636e<code>b[1 - n]</code>, \u6bcf\u6b21\u64cd\u4f5c\u5373\u5c06<code>b[l - r]</code>\u533a\u95f4\u505a+k\u64cd\u4f5c\uff1a</p> <p><code>b[l]++,b[r + 1]--</code>\u3002</p> <p>\u518d\u4f7f\u7528\u524d\u7f00\u548c\u4fbf\u53ef\u4ee5\u5f97\u5230\u76ee\u6807\u6570\u7ec4</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 200010;\nint n;\nint b[N];\nint main()\n{\nint T;\nscanf(\"%d\", &amp;T);\nwhile (T -- )\n{\nscanf(\"%d\", &amp;n);\nmemset(b, 0, (n + 1) * 4);\nfor (int i = 1; i &lt;= n; i ++ )\n{\nint a;\nscanf(\"%d\", &amp;a);\nint l = max(1, i - a + 1), r = i;\nb[l] ++, b[r + 1] -- ;\n}\nfor (int i = 1; i &lt;= n; i ++ )\n{\nb[i] += b[i - 1];\nprintf(\"%d \", !!b[i]);\n}\nputs(\"\");\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#acwing-3720","title":"AcWing 3720. \u6570\u7ec4\u91cd\u6392","text":"<pre><code>4\n3 4\n1 2 3\n1 1 2\n\n2 6\n1 4\n2 5\n\n4 4\n1 2 3 4\n1 2 3 4\n\n1 5\n5\n5\n</code></pre> <pre><code>Yes\nYes\nNo\nNo\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 505;\nint a[N], b[N];\nint main() {\nint T;\ncin &gt;&gt;T;\nwhile (T--) {\nint x, y;\ncin &gt;&gt; x &gt;&gt; y;\nfor (int i = 0; i &lt; x; i++) {\ncin &gt;&gt; a[i];\n}\nfor (int j = 0; j &lt; x; j++) {\ncin &gt;&gt; b[j];\n}\nsort(a, a + x);\nsort(b, b + x, greater&lt;int&gt;());\nint flag = 1;\nfor (int i = 0; i &lt; x; i++) {\nif (a[i] + b[i] &gt; y) {\ncout &lt;&lt; \"No\" &lt;&lt; endl;\nflag = 0;\nbreak;\n}\n}\nif (flag) cout &lt;&lt; \"Yes\" &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3686","title":"3686. \u79fb\u52a8\u5e8f\u5217","text":"<p>\u7edf\u8ba1\u6700\u5de6\u7aef1\u5f97\u5230<code>index</code>\u4e3a<code>l</code>\u548c\u6700\u53f3\u7aef1\u5f97\u5230<code>index</code>\u4e3a<code>r</code>\uff0c\u6700\u540e\u7edf\u8ba1<code>[l, r]</code>\u4e4b\u95f4\u76840\u5373\u53ef\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[55];\nint main() {\nint T;\ncin &gt;&gt; T;\nint n = 0;\nwhile (T--) {\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++) {\ncin &gt;&gt; a[i];\n}\nint l = 0;\nfor (int i = 0; i &lt; n; i++) {\nif (a[i] == 1) {\nl = i;break;\n}\n}\nint r = 0;\nfor (int i = n - 1; i &gt;= 0; i--) {\nif (a[i] == 1) {\nr = i;break;\n}\n}\nint cnt = 0;\nfor (int i = l; i &lt; r; i++) {\nif (a[i] == 0) {\ncnt++;\n}\n}\ncout &lt;&lt; cnt &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3646","title":"3646. \u5206\u6c34\u679c","text":"<p>\u8d2a\u5fc3\u7b97\u6cd5\uff1a\u4e09\u79cd\u53ef\u80fd\u7ec4\u5408 </p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nvoid resort(int &amp;a, int &amp;b, int &amp;c) {\nint arr[3] = {a, b, c};\nsort(arr, arr + 3, greater&lt;int&gt;());\na = arr[0], b = arr[1], c = arr[2];\n}\nint work(int a, int b, int c){\nint ans = 0;\nif (a &gt; 0) a--, ans++;\nif (b &gt; 0) b--, ans++;\nif (c &gt; 0) c--, ans++;\nresort(a, b, c);\nif (a &gt; 0 &amp;&amp; b &gt; 0) a--, b--, ans++;\nif (a &gt; 0 &amp;&amp; c &gt; 0) a--, c--, ans++;\nif (b &gt; 0 &amp;&amp; c &gt; 0) c--, b--, ans++;\nif (a &gt; 0 &amp;&amp; b &gt; 0 &amp;&amp; c &gt; 0) a--, b--, c--, ans++;\nreturn ans;    }\nint main() {\nint n;\ncin &gt;&gt; n;\nwhile (n --) {\nint a, b ,c;\ncin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\ncout &lt;&lt; work(a, b, c) &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3629","title":"3629. \u540c\u5fc3\u5706\u6d82\u8272","text":"<p>\u7b80\u5355\u9898\u76ee\uff1a\u4e0d\u8fc7\u8981\u6ce8\u610f\u7cbe\u5ea6\u95ee\u9898</p> <p><code>#definePI acos(-1)</code></p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 105;\n#define PI acos(-1)\nlong long  a[N];\nint main() {\nint n;\ncin &gt;&gt; n;\nfor (int i = 0; i &lt; n; i++) {\ncin &gt;&gt; a[i];\n}\nsort(a, a + n, greater&lt;int&gt;());\ndouble ans = 0;\nlong long temp = 0;\nfor (int i = 0; i &lt; n; i += 2) {\ntemp += a[i] * a[i];\n}\nfor (int i = 1; i &lt; n; i += 2) {\ntemp -= a[i] * a[i];\n}\nans = PI * temp;\nprintf(\"%.6lf\\n\", ans);\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3624","title":"3624. \u4e09\u503c\u5b57\u7b26\u4e32","text":"<p>\u53cc\u6307\u9488</p> <p>\u91c7\u7528\u4e09\u4e2a\u53d8\u91cf\u7ef4\u62a4\u72b6\u6001 \u5de6\u6307\u9488\u79fb\u52a8\u7684\u60c5\u51b5\u662f\u5f53\u524d\u533a\u95f4\u5185\u7684\u4e2a\u6570\u5927\u4e8e1</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 200010;\nint n;\nchar s[N];\nint cnt[3];\nint main()\n{\nint T;\nscanf(\"%d\", &amp;T);\nwhile (T -- )\n{\nscanf(\"%s\", s);\nn = strlen(s);\nmemset(cnt, 0, sizeof cnt);\nint res = n + 1;\nfor (int i = 0, j = 0; i &lt; n; i ++ )\n{\ncnt[s[i] - '1'] ++ ;\nwhile (cnt[s[j] - '1'] &gt; 1) cnt[s[j ++ ] - '1'] -- ;\nif (cnt[0] &amp;&amp; cnt[1] &amp;&amp; cnt[2])\nres = min(res, i - j + 1);\n}\nif (res == n + 1) res = 0;\nprintf(\"%d\\n\", res);\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3617","title":"3617. \u5b50\u77e9\u5f62\u8ba1\u6570","text":"<p>\u601d\u7ef4\u9898</p> <p>\u5c06k\u5206\u6210\u4e24\u4e2a\u6570\u76f8\u4e58\u7684\u5f62\u5f0f\uff08\u5047\u8bbe\u4e3ak = a * b\uff09</p> <p>\u5728row[]\u4e2d\u627e\u51fa\u6709\u591a\u5c11\u4e2aa\u4e2a\u8fde\u7eed\u76841\uff1b \u5728col[]\u4e2d\u627e\u51fa\u6709\u591a\u5c11\u4e2ab\u4e2a\u8fde\u7eed\u76841\uff1b</p> <p>\u5c06\u4e24\u8005\u76f8\u4e58\u518d\u7d2f\u52a0\uff1b</p> <p></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\nusing namespace std;\ntypedef long long LL;\nconst int N = 40010;\nint n, m, k;\nbool row[N], col[N];\nLL count(int x, bool arr[], int len)\n{\nint res = 0, cnt = 0;\nfor(int i = 1;i &lt;= len;i ++)\nif(arr[i]) cnt ++;\nelse\n{\nif(cnt &gt;= x) res += cnt - x + 1;\ncnt = 0;\n}\nif(cnt &gt;= x) res += cnt - x + 1;\nreturn res;\n}\nint main()\n{\ncin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\nfor(int i = 1;i &lt;= n;i ++) cin &gt;&gt; row[i];\nfor(int i = 1;i &lt;= m;i ++) cin &gt;&gt; col[i];\nLL res = 0;\nfor(int i = 1;i &lt;= k &amp;&amp; i &lt;= 40010;i ++)\nif(k % i == 0)\n{\nint a = i, b = k / i;\nLL cnta = count(a, row, n), cntb = count(b, col, m);\nres += cnta * cntb;\n}\ncout &lt;&lt; res &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3583","title":"3583.\u6574\u6570\u5206\u7ec4","text":"<p>dp</p> <p><code>dp[i][j]</code>\u8868\u793a\u524di\u4e2a\u6570\u5206\u6210j\u7ec4\u7684\u6700\u5927\u65b9\u6848\u6570</p> <p>\u8f6c\u79fb\u65b9\u7a0b<code>dp[i][j] = max(dp[i - 1][j], dp[k - 1][j - 1] + (i - k + 1))</code>\u8868\u793a\u5c06\u7b2ci\u4e2a\u5b57\u7b26\u5212\u5206\u5230\u7b2cj\u7ec4\u4e2d \u4e14\u7b2cj\u7ec4\u662f\u4ecek\u5f00\u59cb\u7684 \u662f\u5f53\u524d\u7ec4\u4e2d\u6700\u5c0f\u7684</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 5010;\nint n, m;\nint w[N];\nint f[N][N];\nint main()\n{\nscanf(\"%d%d\", &amp;n, &amp;m);\nfor (int i = 1; i &lt;= n; i ++ ) scanf(\"%d\", &amp;w[i]);\nsort(w + 1, w + n + 1);\nfor (int i = 1, k = 1; i &lt;= n; i ++ )\n{\nwhile (w[i] - w[k] &gt; 5) k ++ ;\nfor (int j = 1; j &lt;= m; j ++ )\nf[i][j] = max(f[i - 1][j], f[k - 1][j - 1] + (i - k + 1));\n}\nprintf(\"%d\\n\", f[n][m]);\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3580","title":"3580.\u6574\u6570\u914d\u5bf9","text":"<p>\u7b80\u5355\u601d\u7ef4</p> <p>1.\u5148\u9884\u5904\u7406 \u628a\u6210\u5bf9\u7684\u5904\u7406\u5b8c\u6bd5</p> <p>2.\u518d\u5bf9\u65b0\u6570\u7ec4\u505a\u6392\u5e8f</p> <p>3.\u6700\u4f18\u89e3\u662f\u4f4e\u4f4d\u4e0e\u6700\u8fd1\u9ad8\u4f4d\u505a\u914d\u5bf9</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e5;\nint a[N];\nint main() {\nint n;\ncin&gt;&gt; n;\nunordered_map&lt;int, int&gt; um;\nfor (int i = 0; i &lt; n; i++) {\ncin &gt;&gt; a[i];\num[a[i]]++;\n}\nvector&lt;int&gt; temp;\nfor (auto x : um) {\nif (x.second % 2) {\ntemp.push_back(x.first);\n}\n}\nn = temp.size();\nsort(temp.begin(), temp.end());\nint ans = 0;\nfor (int i = 1; i &lt; n; i += 2) {\nans += abs(temp[i - 1] - temp[i]);\n}\ncout &lt;&lt; ans &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3333k-","title":"3333.K-\u4f18\u5b57\u7b26\u4e32","text":"<p>\u601d\u7ef4\u9898\u76ee</p> <p></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nconst int N = 200010;\nint n, k;\nchar str[N];\nint main()\n{\nint T;\nscanf(\"%d\", &amp;T);\nfor (int C = 1; C &lt;= T; C ++ )\n{\nprintf(\"Case #%d: \", C);\nscanf(\"%d%d%s\", &amp;n, &amp;k, str);\nint cnt = 0;\nfor (int i = 0, j = n - 1; i &lt; j; i ++, j -- )\nif (str[i] != str[j])\ncnt ++ ;\nprintf(\"%d\\n\", abs(cnt - k));\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#34832","title":"3483.2\u7684\u6155\u6b21\u65b9","text":"<p>\u9012\u5f52</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\nusing namespace std;\nstring dfs(int n)\n{\nstring res;\nfor (int i = 14; i &gt;= 0; i -- )\nif (n &gt;&gt; i &amp; 1)\n{\n// \u4e0d\u662f\u7b2c\u4e00\u4e2a\u7684\u8bdd\u9700\u8981\u76f8\u52a0\nif (res.size()) res += '+';\n// i\u4e3a0\nif (!i) res += \"2(0)\";\n// i\u4e3a1\nelse if (i == 1) res += \"2\";\n// i &gt;= 2\nelse res += \"2(\" + dfs(i) + \")\";\n}\nreturn res;\n}\nint main()\n{\nint n;\nwhile (cin &gt;&gt; n)\ncout &lt;&lt; dfs(n) &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3404","title":"3404.\u8c01\u662f\u4f60\u7684\u6f5c\u5728\u670b\u53cb","text":"<p>\u7b80\u5355\u7edf\u8ba1</p> <p></p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint a[202];\nint main() {\nint n, m;\ncin &gt;&gt; n &gt;&gt; m;\nunordered_map&lt;int, int&gt; his;\nint x;\nfor (int i = 0; i &lt; n; i++) {\ncin &gt;&gt; x;\na[i] = x;\nhis[x] ++;\n}\nfor (int i = 0; i &lt; n; i++) {\nif (his[a[i]] - 1) {\ncout &lt;&lt; his[a[i]] - 1 &lt;&lt; endl;\n} else {\ncout &lt;&lt; \"BeiJu\" &lt;&lt; endl;\n}\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3481","title":"3481.\u9636\u4e58\u7684\u548c","text":"<p>\u542f\u53d1\u5f0f\u526a\u679d\uff0c\u4e8c\u8fdb\u5236\u679a\u4e3e\uff0c\u7206\u641c</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;unordered_set&gt;\nusing namespace std;\nint f[10];\nunordered_set&lt;int&gt; S;\nint main()\n{\nfor (int i = 0; i &lt; 10; i ++ )\n{\nf[i] = 1;\nfor (int j = i; j; j -- )\nf[i] *= j;\n}\n// \u603b\u5171\u670910\u4e2a\u6570\u5b57 \u6240\u6709\u5c31\u67092^10\u4e2a\u72b6\u6001\nfor (int i = 1; i &lt; 1 &lt;&lt; 10; i ++ )\n{\nint s = 0;\n// \u5bf9\u5f53\u524di\u72b6\u6001\u68c0\u67e5 \u6bcf\u4e00\u4f4d\u7684\u503c\nfor (int j = 0; j &lt; 10; j ++ )\nif (i &gt;&gt; j &amp; 1)\ns += f[j];\n// \u63d2\u5165\u5230\u96c6\u5408\u4e2d\nS.insert(s);\n}\nint n;\nwhile (cin &gt;&gt; n, n &gt;= 0)\nif (S.count(n))\nputs(\"YES\");\nelse\nputs(\"NO\");\nreturn 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;unordered_set&gt;\nusing namespace std;\nint f[10];\nunordered_set&lt;int&gt; S;\nvoid init() {\nf[0] = f[1] = 1;\nfor (int i = 2; i &lt; 10; i++) {\nf[i] = f[i - 1] * i;\n//cout &lt;&lt; f[i] &lt;&lt; endl;\n}\n}\nbool flag;\nvoid dfs(int cur, int sum, int &amp;target) {\nif (sum == target) {\nflag = 1; return ;\n}\nif (sum &gt; target) {\nreturn ;\n}\nfor (int i = cur + 1; i &lt; 10; i++) {\ndfs(i, sum + f[i], target);\n}\n}\nint main()\n{\nint target;\ninit();\nwhile (cin &gt;&gt; target) {\nif (target &lt; 0) return 0;\nif (target == 0) {\ncout &lt;&lt; \"NO\" &lt;&lt;endl;\ncontinue;\n}\nfor (int i = 0; i &lt; 10; i++) {\ndfs(i,  f[i], target);\nif (flag) {\nbreak;\n}\n}\nif (flag) {\nflag = 0;\ncout &lt;&lt; \"YES\"  &lt;&lt; endl;\ncontinue;\n} cout &lt;&lt; \"NO\" &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3502","title":"3502.\u4e0d\u540c\u8def\u5f84\u6570","text":"<p>\u8ff7\u5bab\u6a21\u677f\u9898\u76ee</p> <p></p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 7;\nint n, m, k;\nint a[N][N];\nint dir[][2] = {\n{-1, 0},\n{1, 0},\n{0, 1},\n{0 , -1}\n};\nint v[N][N];\nbool check(int x, int y ) {\nif (x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &lt; m) {\nreturn true;\n}\nreturn false;\n}\nset&lt;string&gt; strs;\nvoid getNum(int i, int j, string s, int cnt) {\nif (k + 1 == cnt) {\nstrs.insert(s);\nreturn;\n}\nfor (int x = 0; x &lt; 4; x++) {\nint dx = i + dir[x][0], dy = j + dir[x][1];\nif (check(dx, dy) &amp;&amp; !v[dx][dy]) {\n//v[dx][dy] = 1;\ngetNum(dx, dy, s + to_string(a[dx][dy]), cnt + 1);\n//v[dx][dy] = 0;\n}\n}\n}\nint main() {\ncin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = 0; j &lt; m; j++) {\ncin &gt;&gt; a[i][j];\n}\n}\nfor (int i = 0; i &lt; n; i++) {\nfor (int j = 0; j &lt; m; j++) {\n//string temp = \"\";\n//v[i][j] = 1;\ngetNum(i, j, to_string(a[i][j]), 1);\n//v[i][j] = 0;\n}\n}\n// for (auto x : strs) {\n//     cout &lt;&lt; x &lt;&lt; endl;\n// }\ncout &lt;&lt; strs.size() &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3493","title":"3493.\u6700\u5927\u7684\u548c","text":"<p>\u601d\u7ef4 + \u6ed1\u52a8\u7a97\u53e3 + \u524d\u7f00\u548c</p> <p>\u53ef\u4ee5\u9009\u62e9\u7684\u6570\u662f\u786e\u5b9a\u7684\u3002\u56e0\u4e3a\u6570&gt;1\uff0c\u6240\u6709\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u4e2ak\u533a\u95f4\u957f\u5ea6\u5185\u5f97\u4e0d\u53ef\u76f4\u63a5\u9009\u62e9\u7684\u603b\u548c\u3002\u7136\u540e\u76f8\u52a0\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 1e5+5;\nint a[N];\nbool v[N];\nlong long sum[N];\nint main() {\nint n, k;\ncin &gt;&gt; n &gt;&gt; k;\nfor (int i = 0; i &lt; n; i++) {\ncin &gt;&gt; a[i];\n}\nlong long ans = 0;\nfor (int i = 0; i &lt; n; i++) {\ncin &gt;&gt; v[i];\nif (v[i]) {\nans += a[i];\n}\n}\nsum[0] = !v[0]?0:a[0];\nfor (int i = 1; i&lt; n; i++) {\nsum[i] = sum[i - 1] + (!v[i]) * a[i];\n}\nlong long temp = 0;\nfor (int j = 0; j &lt;= n - k; j++) {\nlong long xx = sum[j + k - 1] - sum[j] + (!v[j]) * a[j];\ntemp = max(temp, xx);\n}\ncout &lt;&lt; temp + ans &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3485mt","title":"3485.\u6700\u5927\u5f02\u6216\u548c(MT\u7b14\u8bd5)","text":"<p>\u5206\u6790\uff1a</p> <p>\u5bf9\u4e8e==20%==\u7684\u6570\u636e\u663e\u7136\u53ef\u4ee5\u4f7f\u7528n^3\u7684\u7b97\u6cd5\u3002\u679a\u4e3e\u8d77\u59cb\u4e0b\u6807\u548c\u7ed3\u675f\u4e0b\u6807\u3002\u7136\u540e\u518d\u8ba1\u7b97\u8be5\u533a\u95f4\u7684\u503c\u3002</p> <p>\u5bf9\u4e8e==50%==\u7684\u6570\u636e\u53ef\u4ee5\u91c7\u7528n^2\u7684\u7b97\u6cd5\uff0c\u4f7f\u7528\u524d\u7f00\u548c\u5feb\u901f\u6c42\u53d6\u3002</p> <p>\u5bf9\u4e8e==100%==\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u5148\u6c42\u51fa\u5f02\u6216\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u7136\u540e\u95ee\u9898\u5c31\u7b49\u4ef7\u4e8e\u4ece\u4e00\u5806\u6570\u4e2d\u9009\u51fa\u4e24\u4e2a\u6570\uff0c\u4ed6\u4eec\u4e24\u4e2a\u7684\u5f02\u6216\u548c\u6700\u5927\u3002</p> <p>\u5373\uff1a<code>si = a1^a2^..^ai</code> , <code>sj = a1^a2^..^aj</code>, <code>si ^ aj = a^i+1...aj</code></p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100010 * 31, M = 100010; // \u5143\u7d20\u6570100010\uff0ctrie\u6811\u9ad831\nint n, m; // n\u5143\u7d20\u4e2a\u6570 m\u533a\u95f4\u6700\u5927\u503c\nint s[M]; // s\u7528\u4e8e\u8bb0\u5f55\u6bcf\u6b21\u8bfb\u53d6\u7684\u503c\nint son[N][2], cnt[N], idx; // son\u662ftrim\u6570\nvoid insert(int x, int v) { // \u5c06\u4e00\u4e2a\u6570\u5b57\u52a0\u5165\u5230trie\u6811\u4e2d\nint p = 0; // \u521d\u59cb\u5728\u5934\u7ed3\u70b9\nfor (int i = 30; i &gt;= 0; i--) { // \u4e00\u6b21\u5224\u65ad31\u4f4d\u6570\u5b57\nint u = x &gt;&gt; i &amp; 1;\nif (!son[p][u]) son[p][u] = ++idx; //\u5982\u679c\u8fd8\u6ca1\u6709\u521b\u5efa\u5c31\u521b\u5efa\u8be5\u7ed3\u70b9\np = son[p][u]; // \u79fb\u52a8\u5230\u5de6\u5b50\u6811\u6216\u8005\u53f3\u5b50\u6811\ncnt[p] += v;// v = 1 \u65b0\u589e\u52a0 , v = -1\u5220\u9664\n}\n}\nint query(int x) {\nint res = 0, p = 0;\nfor (int i = 30; i &gt;= 0; i--) {\nint u = x &gt;&gt; i &amp; 1;\n// \u6bcf\u6b21\u9009\u62e9\u4e0d\u4e00\u6837\u7684\u5b50\u6811 \u56e0\u4e3a\u662f\u5f02\u6216\uff0c\u4e24\u8005\u4e0d\u540c\u5fc5\u7136\u5f02\u6216\u4e3a1\nif (cnt[son[p][!u]]) p =son[p][!u] , res = res * 2 + 1; else p = son[p][u] , res = res * 2;\n}\nreturn res;\n}\nint main() {\ncin &gt;&gt; n &gt;&gt; m;\nfor (int i = 1; i&lt;= n; i++) {\nint x;\ncin &gt;&gt; x;\ns[i] = s[i - 1] ^ x;\n}\nint res = 0;\ninsert(s[0], 1);\nfor (int i = 1; i &lt;= n; i++) {\nif (i &gt; m) insert(s[i - m - 1], -1); // \u533a\u95f4\u5927\u4e8em\u5c31\u5220\u9664\nres = max(res, query(s[i]));\ninsert(s[i], 1);\n}\ncout &lt;&lt; res &lt;&lt; endl;\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3489-","title":"3489.\u661f\u671f\u51e0--\u6a21\u62df","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;unordered_map&gt;\nusing namespace std;\n// 1-12\u6708 \u6b63\u5e38\u65e5\u671f\nint months[13] = {\n0, 31, 28, 31, 30, 31, 30, 31, 31,\n30, 31, 30, 31\n};\n//\u5efa\u7acbmap\u6620\u5c04\nunordered_map&lt;string, int&gt; month_name = {\n{\"January\", 1},\n{\"February\", 2},\n{\"March\", 3},\n{\"April\", 4},\n{\"May\", 5},\n{\"June\", 6},\n{\"July\", 7},\n{\"August\", 8},\n{\"September\", 9},\n{\"October\", 10},\n{\"November\", 11},\n{\"December\", 12},\n};\n// \u661f\u671f\u51e0\u540d\u5b57\u6620\u5c04\nstring week_name[7] = {\n\"Monday\", \"Tuesday\", \"Wednesday\",\n\"Thursday\", \"Friday\", \"Saturday\",\n\"Sunday\"\n};\n// \u5224\u65ad\u662f\u5426\u662fleap\u5e74\nint is_leap(int year)\n{\nreturn year % 4 == 0 &amp;&amp; year % 100 || year % 400 == 0;\n}\n// \u83b7\u53d6\u8be5\u5e74\u4e2d\u67d0\u5e74\u67d0\u6708\u7684\u5929\u6570\nint get_days(int year, int month)\n{\nint s = months[month];\nif (month == 2) return s + is_leap(year);\nreturn s;\n}\nint main()\n{\nint d, m, y;\nstring str;\nwhile (cin &gt;&gt; d &gt;&gt; str &gt;&gt; y)\n{\nm = month_name[str];\nint i = 1, j = 1, k = 1; // i = year, j = month, k = days (1 - 30)\nint days = 0;\nwhile (i &lt; y || j &lt; m || k &lt; d) // \u76ee\u6807\u65e5\u671f\u8fd8\u6ca1\u6709\u8fbe\u5230\n{\nk ++, days ++ ; // \u672c\u6708\u5929\u6570++, \u603b\u5929\u6570++\nif (k &gt; get_days(i, j)) // \u5982\u679c\u672c\u6708\u5929\u6570 &gt; \u8be5\u6708\u5929\u6570 \u5373\u8fdb\u5165\u4e0b\u4e00\u4e2a\u6708\n{\nk = 1; // \u7b2c\u4e00\u5929\nj ++ ; // \u6708\u4efd++\nif (j &gt; 12) // \u5982\u679c\u6708\u4efd\u5927\u4e8e 12 \u8bf4\u660e\u8fdb\u5165\u4e0b\u4e00\u5e74\n{\nj = 1; // \u91cd\u65b0\u56de\u52301\u6708\ni ++ ; // year++\n}\n}\n}\n//\u7ed3\u679c = \u603b\u5929\u6570%7\ncout &lt;&lt; week_name[days % 7] &lt;&lt; endl;\n}\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#lc-weekcontest","title":"LC WeekContest","text":""},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#239","title":"239\u573a\u5468\u8d5b","text":""},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#5746","title":"5746. \u5230\u76ee\u6807\u5143\u7d20\u7684\u6700\u5c0f\u8ddd\u79bb","text":"<pre><code>class Solution {\npublic:\nint getMinDistance(vector&lt;int&gt;&amp; nums, int target, int start) {\nint ans = INT_MAX;\nfor (int i = 0; i &lt; nums.size(); i++) {\nif (nums[i] == target) {\nans = min(ans, abs(i - start));\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#5747","title":"5747. \u5c06\u5b57\u7b26\u4e32\u62c6\u5206\u4e3a\u9012\u51cf\u7684\u8fde\u7eed\u503c","text":"<p>\u4e8c\u8fdb\u5236\u679a\u4e3e</p> <pre><code>class Solution {\npublic:\nbool splitString(string s) {\nint n = s.size();\nfor (int i = 1; i &lt; 1 &lt;&lt; (n - 1); i++) {\nbool flag = true;\nunsigned long long last = -1, x = s[0] - '0';\nfor (int j = 0; j &lt; n - 1; j++) {\nif (i &gt;&gt; j &amp; 1) { // \u5f53\u524d\u4f4d\u9700\u8981\u5206\u5272\n// \u68c0\u67e5\u5408\u6cd5\u6027\nif (last != -1 &amp;&amp; x != last - 1) {\nflag = false;\nbreak;\n}\n// \u8bb0\u5f55\u4e0a\u4e00\u4e2a\u7684\u6570\u503c\nlast = x;\n// \u65b0\u503c\u4e3a j + 1\nx = s[j + 1] - '0';\n} else { // \u4e0d\u5206\u5272 \u7ee7\u7eed\u76f8\u52a0\nx = x * 10 + s[j + 1] - '0';\n}\n}\nif (x != last - 1) flag = false;\nif (flag) return true;\n}\nreturn false;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#5749","title":"5749. \u90bb\u4f4d\u4ea4\u6362\u7684\u6700\u5c0f\u6b21\u6570","text":"<p>\u6c42\u5f53\u524d\u5168\u6392\u5217\u7684\u4e0bk\u4e2a\u6392\u5217</p> <p><code>next_permutation(b.begin(), b.end())</code></p> <p>\u5148\u627e\u5230\u7b2ck\u4e2a\u6570\uff0c\u518d\u9006\u5e8f\u5bf9\u4ea4\u6362\u3002\u7b49\u4ef7\u6c42\u89e3\u9006\u6570\u5bf9</p> <p>C\u5b58A\u7684\u5143\u7d20\u5728B\u4e2d\u7684\u4e0b\u6807\u4f4d\u7f6e\u548c\u6b21\u6570\uff0c</p> <p></p> <pre><code>class Solution {\npublic:\nint getMinSwaps(string a, int k) {\nstring b = a;\nwhile (k--) next_permutation(b.begin(), b.end());\nint n = a.size();\nvector&lt;int&gt; c(n);\nint cnt[10] = {0};\nfor (int i = 0; i &lt; n; i++) {\nint x = a[i] - '0';\ncnt[x]++;\nint y = cnt[x];\nfor (int j = 0; j &lt; n; j++) {\nif (b[j] - '0' == x &amp;&amp; --y == 0) {\nc[i] = j;\nbreak;\n}\n}\n}\nint res = 0;\nfor (int i = 0; i &lt; n; i++) {\nfor (int j  = i + 1; j &lt; n; j++) {\nif (c[i] &gt; c[j]) res++;\n}\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#236","title":"236\u573a\u5468\u8d5b","text":""},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#_4","title":"\u6570\u7ec4\u5143\u7d20\u79ef\u7684\u7b26\u53f7","text":"<p>\u7b7e\u5230</p> <p></p>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#5727","title":"5727\u627e\u51fa\u6e38\u620f\u7684\u83b7\u80dc\u8005","text":"<p>\u7ea6\u745f\u592b\u73af </p> <p>\u5faa\u73af\u94fe\u8868\u6a21\u62df</p> <p>\u9012\u63a8</p> <p></p> <pre><code>class Solution {\npublic:\ntypedef struct node {\nint val;\nnode * next;\n}node;\nint findTheWinner(int n, int k) {\nif (n == 1) return 1;\nif (k == 1) return n;\nnode *head = new node();\nhead -&gt; val = 1, head -&gt; next = new node();\nnode *temp = head;\ntemp = temp -&gt; next;\nfor (int i = 2;i &lt;= n; i++) {\ntemp -&gt; val = i;\nif (i != n)\ntemp -&gt;  next = new node();\nelse temp -&gt; next = head;\ntemp = temp -&gt; next;\n}\nint remain = n;\n// for (int i = 0; i &lt;= n; i++) {\n//     cout &lt;&lt; head -&gt; val &lt;&lt; endl;\n//     head = head -&gt; next;\n// }\nnode * cur = head;\nwhile (remain != 1) {\nfor (int i = 1; i &lt; k - 1; i++) {\ncur = cur -&gt; next;  }\n//cout &lt;&lt; cur -&gt; val &lt;&lt; endl;\n//cout &lt;&lt; cur -&gt; next -&gt; val  &lt;&lt; endl;\ncur -&gt; next = cur -&gt; next -&gt; next;\ncur = cur -&gt; next;\nremain--;\n}\nreturn cur -&gt; val;\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nint f(int n, int k) {\nif (n == 1) return 0;\nreturn (f(n - 1, k) + k) %n;\n}\nint findTheWinner(int n, int k) {\nreturn f(n, k) + 1;\n}\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#_5","title":"\u6700\u5c11\u4fa7\u8df3\u6570","text":"<pre><code>const int N = 500010, INF = 1e8;\nint f[N][3];\nclass Solution {\npublic:\nint minSideJumps(vector&lt;int&gt;&amp; b) {\n// \u4e2d\u95f4\u8dd1\u9053 \u8df3\u5230\u5176\u5b83\u8dd1\u9053\u90fd\u9700\u89811\nf[0][1] = 0, f[0][0] = f[0][2] = 1;\nint n = b.size() - 1;\nfor (int i = 1; i &lt;= n; i ++ ) // \u7b2ci\u5c42\nfor (int j = 0; j &lt; 3; j ++ ) { // \u7b2ci\u5c42\u7684 \u4e09\u4e2a\u70b9\nf[i][j] = INF; // \u521d\u59cb\u72b6\u6001\u4e3aINF\nif (b[i] == j + 1) continue;// \u5f53\u524d\u8981\u6c42\u7684\u8be5\u70b9\u4f4d\u969c\u788d\u7269 \u8df3\u8fc7\nfor (int k = 0; k &lt; 3; k ++ ) { // \u679a\u4e3ei - 1\u5c42\u7684\u6240\u6709\u72b6\u6001\nif (b[i] == k + 1) continue; // \u4e0d\u80fd\u7531i - 1\u5c42\u901a\u8fc7\u5230\u8fbe\nint cost = 0; // \u5728\u540c\u4e00\u4e2a\u6c34\u5e73\u7ebf\u4e0a cost = 0\nif (k != j) cost = 1; // \u8bf4\u660e\u4e0d\u5728\u540c\u4e00\u4e2a\u6c34\u5e73\u7ebf\u4e0a\nf[i][j] = min(f[i][j], f[i - 1][k] + cost);\n}\n}\nreturn min(f[n][0], min(f[n][1], f[n][2]));\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#200","title":"\u524d200\u9053\u9898\u76ee","text":""},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#1","title":"1 \u4e24\u6570\u4e4b\u548c","text":"<pre><code>class Solution {\npublic:\nvector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\nvector&lt;int&gt; ans(2);\nint len = nums.size();\nfor (int i = 0; i &lt; len; i++) {\nfor (int j = i + 1; j &lt; len; j++) {\nif (nums[i] + nums[j] == target) {\nans[0] = i, ans[1] = j;\nreturn ans;\n}\n}\n}\nreturn nums;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#2","title":"2. \u4e24\u6570\u76f8\u52a0","text":"<pre><code>class Solution {\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\nListNode head = new ListNode(l1.val + l2.val);\nListNode cur = head;\nwhile(l1.next != null || l2.next != null){\nl1 = l1.next != null ? l1.next : new ListNode();\nl2 = l2.next != null ? l2.next : new ListNode();\ncur.next = new ListNode(l1.val + l2.val + cur.val / 10);\ncur.val %= 10;\ncur = cur.next;\n}\nif(cur.val &gt;= 10){\ncur.next = new ListNode(cur.val / 10);\ncur.val %= 10;\n}\nreturn head;\n}\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#3","title":"3. \u65e0\u91cd\u590d\u7684\u6700\u957f\u5b50\u4e32","text":"<pre><code>class Solution {\npublic:\nint lengthOfLongestSubstring(string s) {\nif(s.size() == 0) return 0;\nunordered_set&lt;char&gt; lookup;\nint maxStr = 0;\nint left = 0;\nfor(int i = 0; i &lt; s.size(); i++){\n// \u67e5\u627e\u5230\u4e86s[i] \u5220\u9664\u5de6\u8fb9\nwhile (lookup.find(s[i]) != lookup.end()){\nlookup.erase(s[left]);\nleft ++;\n}\nmaxStr = max(maxStr,i-left+1);\nlookup.insert(s[i]);\n}\nreturn maxStr;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#4","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u4e2d\u7684\u4e2d\u4f4d\u6570","text":"<pre><code>class Solution {\npublic:\ndouble findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\nint len1 = nums1.size(), len2 = nums2.size();\nint n = len1 + len2;\nfor (auto num : nums2) {\nnums1.push_back(num);\n}\nsort(nums1.begin(), nums1.end());\nif (n % 2 == 1) return nums1[n / 2];\nelse {\nint mid = n / 2 - 1;\ndouble a = nums1[mid], b = nums1[mid + 1];\nreturn (a + b) / 2;\n}\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#5","title":"5. \u6700\u957f\u56de\u6587\u4e32","text":"<pre><code>class Solution {\npublic:\nstring longestPalindrome(string s) {\nint n = s.size();\nvector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n));\nstring ans;\nfor (int l = 0; l &lt; n; ++l) {\nfor (int i = 0; i + l &lt; n; ++i) {\nint j = i + l;\nif (l == 0) {\ndp[i][j] = 1;\n} else if (l == 1) {\ndp[i][j] = (s[i] == s[j]);\n} else {\ndp[i][j] = (s[i] == s[j] &amp;&amp; dp[i + 1][j - 1]);\n}\nif (dp[i][j] &amp;&amp; l + 1 &gt; ans.size()) {\nans = s.substr(i, l + 1);\n}\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#6-z","title":"6. Z\u5b57\u5f62\u53d8\u6362","text":"<pre><code>class Solution {\npublic:\nstring convert(string s, int numRows) {\nif (numRows == 1) return s;\nvector&lt;string&gt; rows(min(numRows, int(s.size())));\nint curRow = 0;\nbool goingDown = false;\nfor (char c : s) {\nrows[curRow] += c;\nif (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;\ncurRow += goingDown ? 1 : -1;\n}\nstring ret;\nfor (string row : rows) ret += row;\nreturn ret;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#7","title":"7. \u6574\u6570\u7ffb\u8f6c","text":"<pre><code>class Solution {\npublic:\nint reverse(int x) {\nstring MAX = to_string(0x7fffffff); int MIN_ = 0x80000000;\nstring MIN = to_string(MIN_);\nbool sign = 0; // 0 positive\nif (x == MIN_) return 0;\nif (x &lt; 0) x = -x, sign = 1;\nstring old = to_string(x);\nstd::reverse(old.begin(), old.end()); // 321\nif (sign) { // \u8d1f\u6570\nold = '-' + old;\nif (MIN.length() &lt;= old.length()) {\nif (old &gt; MIN) return 0;\n}\n} else {\nif (MAX.length() &lt;= old.length()) {\nif (MAX &lt; old) return 0;\n}\n}\n//cout &lt;&lt; old &lt;&lt; endl;\nreturn atoi(old.c_str());\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#8","title":"8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570","text":"<pre><code>class Solution {\npublic:\nint myAtoi(string s) {\nint sign = 1, tmp = 0, i = 0;\nwhile(s[i] == ' ')  ++i;    //1.\u5ffd\u7565\u524d\u5bfc\u7a7a\u683c\nif(s[i] == '+' || s[i] == '-')    //2.\u786e\u5b9a\u6b63\u8d1f\u53f7\nsign = (s[i++] == '-') ? -1 : 1;   //s[i]\u4e3a+\u7684\u8bddsign\u4f9d\u65e7\u4e3a1\uff0c\u4e3a-\u7684\u8bddsign\u4e3a-1\nwhile(s[i] &gt;= '0' &amp;&amp; s[i] &lt;= '9')   //3.\u68c0\u67e5\u8f93\u5165\u662f\u5426\u5408\u6cd5\n{\nif(tmp &gt; INT_MAX / 10 || (tmp == INT_MAX / 10 &amp;&amp; s[i] - '0' &gt; 7))    //4.\u662f\u5426\u6ea2\u51fa\nreturn sign == 1 ? INT_MAX : INT_MIN;\ntmp = tmp * 10 + (s[i++] - '0');    //5.\u4e0d\u52a0\u62ec\u53f7\u6709\u6ea2\u51fa\u98ce\u9669\n}\nreturn tmp * sign;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#9","title":"9. \u5224\u65ad\u662f\u5426\u4e3a\u56de\u6587\u5b57\u7b26\u4e32","text":"<pre><code>class Solution {\npublic:\nbool isPalindrome(int x) {\nstring posiX = to_string(x);\nstring temp = posiX;\nreverse(posiX.begin(), posiX.end());\nreturn temp == posiX;\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nbool isPalindrome(int x) {\nif (x &lt; 0) return false;\nlong temp = 0;\nint r = x;\nwhile (r != 0) {\nif (temp &gt; x) return false;\ntemp = temp * 10 + r % 10;\nr /= 10;\n}\nreturn temp == x;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#10","title":"10.\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d","text":""},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#11","title":"11.\u76db\u6c34\u6700\u591a\u7684\u5bb9\u5668","text":"<pre><code>class Solution {\npublic int maxArea(int[] height) {\nint i = 0, j = height.length - 1, res = 0;\nwhile(i &lt; j){\nres = height[i] &lt; height[j] ? Math.max(res, (j - i) * height[i++]): Math.max(res, (j - i) * height[j--]); }\nreturn res;\n}\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#12_1","title":"12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57","text":"<p>13 \u4e2a\u6570\u5b57 \u4ece\u5927\u5230\u5c0f \u4f9d\u6b21\u51cf\u5230\u4e0d\u80fd\u51cf</p> <p></p> <pre><code>class Solution {\npublic:\nstring intToRoman(int num) {\nstring strs[]= {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\nint nums[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\nstring ans;\nfor (int i = 0; num &gt; 0 &amp;&amp; i &lt; 13; i++) {\nwhile (nums[i] &lt;= num) {\nans += strs[i];\nnum -= nums[i];\n}\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#13_1","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570","text":"<p>\u5efa\u7acb\u6620\u5c04\u51fd\u6570 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26 \u8ba1\u7b97\u5b83\u548c\u5b83\u4e4b\u524d\u7684 \u5bf9\u4e8eI, IV \u626b\u63cf\u5230V\u4f1a\u67e5\u770b\u524d\u4e00\u4e2a \u5373IV\u5f97\u52303 \u56e0\u4e3a\u524d\u4e00\u4e2aI\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e3a1\u3002\u7ed3\u5408\u7f16\u7801\u683c\u5f0f\uff0c\u56e0\u4e3aVIV\u662f\u4e0d\u5b58\u5728\u7684\u3002</p> <pre><code>class Solution {\npublic:\nint romanToInt(string s) {\nunordered_map&lt;string, int&gt; m = {{\"I\", 1}, {\"IV\", 3}, {\"IX\", 8}, {\"V\", 5}, {\"X\", 10}, {\"XL\", 30}, {\"XC\", 80}, {\"L\", 50}, {\"C\", 100}, {\"CD\", 300}, {\"CM\", 800}, {\"D\", 500}, {\"M\", 1000}};\nint r = m[s.substr(0, 1)];\nfor(int i=1; i&lt;s.size(); ++i){\nstring two = s.substr(i-1, 2);\nstring one = s.substr(i, 1);\nr += m[two] ? m[two] : m[one];\n}\nreturn r;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#14","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00","text":"<p>\u7ef4\u62a4cnt\u6307\u9488 \u6307\u5411\u516c\u5171\u4e0b\u6807</p> <p></p> <pre><code>class Solution {\npublic:\nstring longestCommonPrefix(vector&lt;string&gt;&amp; strs) {\nstring ans = \"\";\nint len = strs.size();\nif (len == 0) return \"\";\nint cnt = 0;\nwhile(1) {\nfor (int i = 0; i &lt; len; i++) {\nif (strs[i].length() == 0) return \"\";\nif (cnt &lt; strs[i].length() &amp;&amp; cnt &lt; strs[0].length() &amp;&amp; strs[i][cnt] == strs[0][cnt]) {\ncontinue;\n} else {\nreturn ans;\n}\n}\nans += strs[0][cnt++];\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":"<p>\u6392\u5e8f + \u4e09\u6307\u9488</p> <pre><code>class Solution {\npublic:\nvector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\nvector&lt;vector&lt;int&gt;&gt; res;\nint n = nums.size();\nif (n &lt; 3) return res;\nsort(nums.begin(), nums.end());\nfor (int i = 0; i &lt; n; i ++ ) {\n//1. \u5f00\u59cb\u9884\u5904\u7406\nif (nums[i] &gt; 0) return res;                    //\u82e5\u7b2c\u4e00\u4e2a\u6570\u5927\u4e8e0\uff0c\u540e\u9762\u600e\u4e48\u52a0\u90fd\u4e0d\u4f1a\u7b49\u4e8e0\u4e86\nif (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;  //\u8df3\u8fc7\u91cd\u590d\u6570\u5b57\n// i\u662f\u7b2c\u4e00\u4e2a\u6570 l \u4e09\u5143\u7ec4\u4e2d\u7b2c\u4e8c\u5c0f r \u6700\u5927\u7684\nint l = i + 1, r = n - 1;\nwhile (l &lt; r) {\nif (nums[i] + nums[l] + nums[r] == 0) {\nres.push_back({nums[i], nums[l], nums[r]});         //\u52a0\u5165\u4e00\u4e2a\u6b63\u786e\u65b9\u6848\nwhile (l &lt; r &amp;&amp; nums[l] == nums[l + 1]) l ++ ;      //\u8df3\u8fc7\u91cd\u590d\u6570\u5b57\nwhile (l &lt; r &amp;&amp; nums[r] == nums[r - 1]) r -- ;\nl ++ ;                                              //\u5de6\u6307\u9488\u524d\u8fdb\nr -- ;                                              //\u53f3\u6307\u9488\u540e\u9000\n}\nelse if (nums[i] + nums[l] + nums[r] &gt; 0) {\nr -- ;      //\u548c\u5927\u4e8e0\uff0c\u8981\u51cf\u5c11\u603b\u548c\u4e4b\u503c\uff0c\u5373\u53f3\u6307\u9488\u540e\u9000 \u56e0\u4e3a\u5de6\u6307\u9488\u4e0d\u80fd\u518d\u540e\u9000\u4e86\n}\nelse {\nl ++ ;      //\u548c\u5c0f\u4e8e0\uff0c\u8981\u589e\u52a0\u603b\u548c\u4e4b\u503c\uff0c\u5373\u5de6\u6307\u9488\u524d\u8fdb, \u56e0\u4e3a\u53f3\u6307\u9488\u4e0d\u80fd\u518d\u524d\u8fdb\u4e86\n}\n}\n}\nreturn res;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#17","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u7b26\u7ec4\u5408","text":"<p>\u56de\u6eaf\u6cd5</p> <p></p> <pre><code>class Solution {\npublic:\nvector&lt;string&gt; letterCombinations(string digits) {\nvector&lt;string&gt; combinations;\nif (digits.empty()) {\nreturn combinations;\n}\nunordered_map&lt;char, string&gt; phoneMap{\n{'2', \"abc\"},\n{'3', \"def\"},\n{'4', \"ghi\"},\n{'5', \"jkl\"},\n{'6', \"mno\"},\n{'7', \"pqrs\"},\n{'8', \"tuv\"},\n{'9', \"wxyz\"}\n};\nstring combination;\nbacktrack(combinations,combination, phoneMap, digits, 0 );\nreturn combinations;\n}\nvoid backtrack(vector&lt;string&gt;&amp; combinations, string&amp; combination,const unordered_map&lt;char, string&gt;&amp; phoneMap, const string&amp; digits, int index) {\nif (index == digits.length()) { // \u5f53\u524d\u8fbe\u5230\u5b57\u7b26\u7ec4\u5408\u957f\u5ea6\ncombinations.push_back(combination);\n} else {\nchar digit = digits[index];\nconst string&amp; letters = phoneMap.at(digit); // \u627e\u5230\u5bf9\u5e94\u7684letters \nfor (const char&amp; letter: letters) {\ncombination.push_back(letter);\nbacktrack(combinations,combination,phoneMap, digits, index + 1);\ncombination.pop_back();\n}\n}\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#19-n","title":"19. \u5220\u9664\u94fe\u8868\u7684\u7b2cN\u4e2a\u7ed3\u70b9","text":"<p>\u5148\u904d\u5386\u4e00\u904d\u5f97\u5230\u6574\u4e2a\u94fe\u8868\u7684\u957f\u5ea6 \u7136\u540e\u4ecehead\u8d70 len - n - 1\u6b21\uff0c\u5230\u9700\u8981\u5220\u9664\u7684\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u7ed3\u70b9\uff0c\u7136\u540e\u901a\u8fc7\u8be5\u7ed3\u70b9\u5220\u9664\u76ee\u6807\u7ed3\u70b9\uff0c\u8fd4\u56dehead</p> <p>\u8fb9\u754c\u6761\u4ef6\uff1a\u5f53len - n == 0 \u5373\u9700\u8981\u5220\u9664\u5934\u7ed3\u70b9 head = head -&gt; next\u5c31\u53ef\u4e86</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* removeNthFromEnd(ListNode* head, int n) {\nListNode *temp = head;\nint len = 0;\nwhile (temp) {\nlen++;\ntemp = temp -&gt; next;\n}\ntemp = head;\nlen = len - n;\nif (len == 0) {\nhead = head -&gt; next;\nreturn head;\n}\nfor (int i =0; i &lt; len - 1; i++) {\ntemp = temp -&gt; next;\n}\ntemp -&gt; next = temp -&gt; next -&gt; next;\nreturn head;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#20","title":"20. \u6709\u6548\u7684\u62ec\u53f7","text":"<p>\u7528\u6808\u6765\u6a21\u62df \u5bf9\u4e8e\u5de6\u62ec\u53f7\u538b\u6808 \u53f3\u62ec\u53f7\u8981\u68c0\u67e5\u6808\u72b6\u6001</p> <pre><code>class Solution {\npublic:\nbool isValid(string s) {\nstack&lt;char&gt; stk;\nfor (auto c: s) {\nif (c == ')' || c == '}' || c == ']') {\nif (stk.size() == 0) return false;\nchar top = stk.top();\nif (top == ')' || top == '}' || top == ']') return false;\nswitch (c) {\ncase ')':\nif (top != '(') return false;\nbreak;\ncase '}':\nif (top != '{') return false;\nbreak;\ncase ']':\nif (top != '[') return false;\nbreak;\n}\nstk.pop();\n} else {\nstk.push(c);\n}\n}\nreturn stk.empty();\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#21","title":"21.\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<p>\u9012\u5f52 \u6bcf\u6b21\u9012\u5f52\u90fd\u610f\u5473\u7740\u4e00\u6b21\u5206\u5272</p> <p></p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n// \u5982\u679c\u4e3a\u7a7a \u610f\u5473\u7740\u6709\u4e00\u4e2a\u5230\u8fbe\u4e86\u5c3d\u5934 \u5c06\u8fd9\u4e2a\u5269\u4e0b\u7684\u63a5\u5230\u524d\u4e00\u4e2a\u540e\u9762\u5373\u53ef\nif (l1 == NULL) {\nreturn l2;\n}\nif (l2 == NULL) {\nreturn l1;\n}\n// l1 \u7ed3\u70b9\u5c0f\u4e8el2\u7ed3\u70b9\nif (l1-&gt;val &lt;= l2-&gt;val) {\nl1-&gt;next = mergeTwoLists(l1-&gt;next, l2);\nreturn l1;\n}\n// l1\u7ed3\u70b9\u5c0f\u4e8e\u7b49\u4e8el2\u7ed3\u70b9\nl2-&gt;next = mergeTwoLists(l1, l2-&gt;next);\nreturn l2;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#22","title":"22. \u62ec\u53f7\u751f\u6210","text":"<p>\u9012\u5f52\u65b9\u6cd5(\u7c7b\u4f3c\u6df1\u641c)</p> <p></p> <pre><code>class Solution {\n// \u68c0\u67e5\u62ec\u53f7\u662f\u5426\u6709\u6548\u7684\u4e00\u79cd\u65b9\u5f0f\nbool valid(const string&amp; str) {\nint balance = 0;\nfor (char c : str) {\nif (c == '(') {\n++balance;\n} else {\n--balance;\n}\nif (balance &lt; 0) {\nreturn false;\n}\n}\nreturn balance == 0;\n}\nvoid generate_all(string&amp; current, int n, vector&lt;string&gt;&amp; result) {\n// n\u662f\u5de6\u53f3\u62ec\u53f7\u7684\u4e2a\u6570\u4e3a2 * n\nif (n == current.size()) {\n// \u5224\u65ad\u6b64\u6b21\u8fed\u4ee3\u7684\u662f\u5426\u7b26\u5408\u89c4\u5219\nif (valid(current)) {\nresult.push_back(current);\n}\nreturn;\n}\n// \u6b64\u5904\u4e24\u79cd\u65b9\u6848 \uff1a \u5f53\u524d\u586b'(' or \u5f53\u524d\u586b ')'\ncurrent += '(';\ngenerate_all(current, n, result);\ncurrent.pop_back();\ncurrent += ')';\ngenerate_all(current, n, result);\ncurrent.pop_back();\n}\npublic:\nvector&lt;string&gt; generateParenthesis(int n) {\nvector&lt;string&gt; result;\nstring current;\ngenerate_all(current, n * 2, result);\nreturn result;\n}\n};\n</code></pre> <p>\u56de\u6eaf\u65b9\u6cd5</p> <p>\u4f18\u5316\uff1a\u8ddf\u8e2a\u5224\u65ad\u5f53\u524d\u62ec\u53f7\u5e8f\u5217\u662f\u5426\u6709\u6548 -- \u6839\u636e\u5de6\u62ec\u53f7\u548c\u53f3\u62ec\u53f7\u4e2a\u6570\u6765\u5224\u65ad</p> <pre><code>class Solution {\nvoid backtrack(vector&lt;string&gt;&amp; ans, string&amp; cur, int open, int close, int n) {\nif (cur.size() == n * 2) {\nans.push_back(cur);\nreturn;\n}\n// \u5de6\u62ec\u53f7\u5c0f\u4e8en\nif (open &lt; n) {\ncur.push_back('(');\nbacktrack(ans, cur, open + 1, close, n);\ncur.pop_back();\n}\n// \u53f3\u62ec\u53f7\u5c0f\u4e8e\u5de6\u62ec\u53f7\nif (close &lt; open) {\ncur.push_back(')');\nbacktrack(ans, cur, open, close + 1, n);\ncur.pop_back();\n}\n}\npublic:\nvector&lt;string&gt; generateParenthesis(int n) {\nvector&lt;string&gt; result;\nstring current;\nbacktrack(result, current, 0, 0, n);\nreturn result;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#23-k","title":"23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868","text":"<p>K\u6b21\u5408\u5e76 \u4e24\u4e2a\u6709\u5e8f\u7684\u94fe\u8868</p> <pre><code>class Solution {\npublic:\nListNode* mergeTwoLists(ListNode *a, ListNode *b) {\nif ((!a) || (!b)) return a ? a : b;\nListNode head, *tail = &amp;head, *aPtr = a, *bPtr = b;\nwhile (aPtr &amp;&amp; bPtr) {\nif (aPtr-&gt;val &lt; bPtr-&gt;val) {\ntail-&gt;next = aPtr; aPtr = aPtr-&gt;next;\n} else {\ntail-&gt;next = bPtr; bPtr = bPtr-&gt;next;\n}\ntail = tail-&gt;next;\n}\ntail-&gt;next = (aPtr ? aPtr : bPtr);\nreturn head.next;\n}\nListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\nListNode *ans = nullptr;\nfor (size_t i = 0; i &lt; lists.size(); ++i) {\nans = mergeTwoLists(ans, lists[i]);\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#24","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":"<p>\u9012\u5f52</p> <pre><code>class Solution {\npublic:\nListNode* swapPairs(ListNode* head) {\nif (head == nullptr || head-&gt;next == nullptr) {\nreturn head;\n}\nListNode* newHead = head-&gt;next; // newHead\u8868\u793a\u7b2c\u4e8c\u4e2a\u8282\u70b9\nhead-&gt;next = swapPairs(newHead-&gt;next);// \u7b2c\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u4e0b\u4e00\u4e2a\u9012\u5f52\nnewHead-&gt;next = head;// \u5c06\u7b2c\u4e8c\u4e2a\u8282\u70b9\u7684next \u6307\u5411\u7b2c\u4e00\u4e2a\nreturn newHead;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#26_1","title":"26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879","text":"<p>\u53cc\u6307\u9488 \u4e00\u6b21\u5faa\u73af</p> <p>i\u6307\u5411\u5f53\u524d\u4e0b\u6807 j\u6307\u5411\u5faa\u73af</p> <pre><code>class Solution {\npublic int removeDuplicates(int[] nums) {\nif (nums.length == 0) return 0;\nint i = 0;\nfor (int j = 1; j &lt; nums.length; j++) {\nif (nums[j] != nums[i]) {\ni++;\nnums[i] = nums[j];\n}\n}\nreturn i + 1;\n}\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#31","title":"31. \u4e0b\u4e00\u4e2a\u6392\u5217","text":"<p>\u4e00\u4e2a\u5f88\u79d2\u7684\u601d\u8def</p> <pre><code>class Solution {\npublic:\nvoid nextPermutation(vector&lt;int&gt;&amp; nums) {\nint i = nums.size() - 2, j = nums.size() - 1;\nwhile(i &gt;= 0 &amp;&amp; nums[i] &gt;= nums[i+1])   --i;    //\u5bfb\u627e\u6bd4\u540e\u9762\u90a3\u4e2a\u6570\u5c0f\u7684nums[i]\nif(i &gt;= 0)   {\nwhile(j &gt;= 0 &amp;&amp; nums[j] &lt;= nums[i]) --j;    //\u5bfb\u627e\u6bd4nums[i]\u5927\u7684\u7b2c\u4e00\u4e2a\u6570\nswap(nums[i], nums[j]);\n}\nsort(nums.begin() + i + 1, nums.end());     //\u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u6392\u5217\uff0ci\u4e3a-1\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#198","title":"198. \u6253\u5bb6\u52ab\u820d","text":"<p>\u7b80\u5355dp</p> <p>dp[i]\u8868\u793a\u5077\u524di\u5bb6\u80fd\u5f97\u5230\u7684\u6700\u5927\u503c</p> <p><code>dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1])</code></p> <pre><code>class Solution {\npublic:\nint rob(vector&lt;int&gt;&amp; nums) {\nint n = nums.size();\nif (n == 0) return 0;\nvector&lt;int&gt; dp(n + 1, 0); // dp[i]\u8868\u793a\u5077\u524di\u4e2a\u623f\u5b50\u7684\u6700\u5927\u91d1\u989d\ndp[1] = nums[0];\nfor (int i = 2; i &lt;= n; i++) {\ndp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1]);\n}\nreturn dp[n];\n}\n};\n</code></pre> <p>\u8fdb\u4e00\u6b65\u5bf9\u7a7a\u95f4\u8fdb\u884c\u538b\u7f29</p> <pre><code>class Solution {\npublic:\nint rob(vector&lt;int&gt;&amp; nums) {\nint n = nums.size();\nif (n == 0) return 0;\n//vector&lt;int&gt; dp(n + 1, 0); // dp[i]\u8868\u793a\u5077\u524di\u4e2a\u623f\u5b50\u7684\u6700\u5927\u91d1\u989d\n//dp[1] = nums[0];\nint cur = nums[0], pre = 0;\nfor (int i = 2; i &lt;= n; i++) {\nint temp = cur;\ncur = max(cur, pre + nums[i - 1]);\npre = temp;\n//dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1]);\n}\nreturn cur;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#_6","title":"\u5e38\u89c1\u9762\u8bd5\u9898","text":""},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#_7","title":"\u81ea\u5efa\u94fe\u8868","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nstruct node{\nint data;\nnode *next;\nnode(int data,node *next=NULL){\nthis-&gt;data = data;\nthis-&gt;next = next;\n}\n};\nnode *createlist(const int num){\nnode *head = NULL;\nfor (int i = 0; i &lt; num; i++) {\nhead = new node(i, head);\n}\nreturn head;\n}\nvoid displaylist(node *head){\ncout&lt;&lt;\"list node -&gt; \";\nwhile(head!=NULL){\ncout&lt;&lt;head-&gt;data&lt;&lt;\" \";\nhead = head-&gt;next;\n}\ncout&lt;&lt;endl;\n}\nint main(){\nnode *head = createlist(5);\ndisplaylist(head);\nreturn 0;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#_8","title":"\u53cd\u8f6c\u94fe\u8868","text":"<pre><code>class Solution {\npublic:\nListNode* reverseList(ListNode* head) {\nListNode* prev = nullptr;\nListNode* curr = head;\nwhile (curr) {\nListNode* next = curr-&gt;next;\ncurr-&gt;next = prev;\nprev = curr;\ncurr = next;\n}\nreturn prev;\n}\n};\n</code></pre> <pre><code>class Solution {\npublic:\nListNode* reverseList(ListNode* head) {\nif (!head || !head-&gt;next) {\nreturn head;\n}\nListNode* newHead = reverseList(head-&gt;next);\nhead-&gt;next-&gt;next = head;\nhead-&gt;next = nullptr;\nreturn newHead;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#_9","title":"\u73af\u5f62\u94fe\u8868","text":"<p>\u54c8\u5e0c\u8868\u5b58\u653e\u8d70\u8fc7\u7684\u8bb0\u5f55</p> <pre><code>class Solution {\npublic:\nbool hasCycle(ListNode *head) {\nunordered_set&lt;ListNode*&gt; seen;\nwhile (head != nullptr) {\nif (seen.count(head)) {\nreturn true;\n}\nseen.insert(head);\nhead = head-&gt;next;\n}\nreturn false;\n}\n};\n</code></pre> <p>\u5feb\u6162\u6307\u9488</p> <pre><code>class Solution {\npublic:\nbool hasCycle(ListNode* head) {\nif (head == nullptr || head-&gt;next == nullptr) {\nreturn false;\n}\nListNode* slow = head;\nListNode* fast = head-&gt;next;\nwhile (slow != fast) {\nif (fast == nullptr || fast-&gt;next == nullptr) {\nreturn false;\n}\nslow = slow-&gt;next;\nfast = fast-&gt;next-&gt;next;\n}\nreturn true;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#_10","title":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\nListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n// \u5982\u679c\u4e3a\u7a7a \u610f\u5473\u7740\u6709\u4e00\u4e2a\u5230\u8fbe\u4e86\u5c3d\u5934 \u5c06\u8fd9\u4e2a\u5269\u4e0b\u7684\u63a5\u5230\u524d\u4e00\u4e2a\u540e\u9762\u5373\u53ef\nif (l1 == NULL) {\nreturn l2;\n}\nif (l2 == NULL) {\nreturn l1;\n}\n// l1 \u7ed3\u70b9\u5c0f\u4e8el2\u7ed3\u70b9\nif (l1-&gt;val &lt;= l2-&gt;val) {\nl1-&gt;next = mergeTwoLists(l1-&gt;next, l2);\nreturn l1;\n}\n// l1\u7ed3\u70b9\u5c0f\u4e8e\u7b49\u4e8el2\u7ed3\u70b9\nl2-&gt;next = mergeTwoLists(l1, l2-&gt;next);\nreturn l2;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#_11","title":"\u6c42\u5f00\u65b9","text":"<p>\u4e8c\u5206\u67e5\u627e</p> <pre><code>int mySqrt(int a) {\nif (a == 0) return a;\nint l = 1, r = a, mid, sqrt;\nwhile (l &lt;= r) {\nmid = l + (r - 1) / 2;\nsqrt = a / mid;\nif (sqrt == mid) {\nreturn mid;\n} else if (mid &gt; sqrt){\nr = mid - 1;\n} else if {\nl = mid + 1;\n}\nreturn r;\n}\n}\n</code></pre> <p>\u725b\u987f\u8fed\u4ee3\u6cd5:\u4e3a\u4e86\u9632\u6b62\u5e73\u65b9\u8d8a\u754c</p> <pre><code>int mySqrt(int a) {\nlong x = a;\nwhile (x * x &gt; a) {\nx = (x + a / x) / 2;\n}\nreturn x;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#_12","title":"\u5feb\u901f\u6392\u5e8f","text":"<pre><code>void quick_sort(vector&lt;int&gt; &amp;nums, int l, int r) {\nif (l + 1 &gt;= r) return;\nint first = l, last = r - 1, key = nums[first];\nwhile (first &lt; last) {\nwhile (first &lt; last &amp;&amp; nums[last] &gt;= key) last--;\nnums[first] = nums[last]; // \u627e\u5230\u5c0f\u4e8ekey\u7684\nwhile (first &lt; last &amp;&amp; nums[first] &lt;= key) first++;\nnums[last] = nums[first];\n}\nnums[first] = key;\nquick_sort(nums, l, first);\nquick_sort(nums, first + 1, r);\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#k","title":"\u7b2cK\u5927\u6570","text":"<pre><code>int findKthLarget(vector&lt;int&gt; &amp;nums, int k) {\nint l = 0, r = nums.size(), target = num.size() - k;\nwhile (l &lt; r) {\nint mid = quickSelection(nums, l, r);\nif (mid == target) {\nreturn nums[mid];\n}\nif (mid &lt; target) {\nl = mid + 1;\n} else {\nr = mid - 1;\n}\n}\nreturn nums[l];\n}\nint quicSelection(vector&lt;int&gt; &amp;nums, int l, int r) {\nint i = l + 1, j = r;\nwhile (true) {\nwhile (i &lt; r &amp;&amp; nums[i] &lt;= nums[j]) ++i;\nwhile (l &lt; j &amp;&amp; nums[j] &gt;= nums[l]) --j;\nif (i &gt;= j) break;\nswap(nums[i], nums[j]);\n}\nswap(nums[l], nums[j]);\nreturn j;\n}\n</code></pre>"},{"location":"algorithm/lc-daily/LC%20Daiyly%20Problems/#_13","title":"\u77e9\u9635\u4e2d\u6700\u5927\u7684\u6b63\u65b9\u5f62","text":"<pre><code>int maxmalSqare(vector&lt;vector=&gt;&gt;)\n</code></pre>"},{"location":"algorithm/lc-weekly/LeetCode344thContest/","title":"\u7b2c 344 \u573a\u5468\u8d5b","text":""},{"location":"algorithm/lc-weekly/LeetCode344thContest/#6416","title":"6416. \u627e\u51fa\u4e0d\u540c\u5143\u7d20\u6570\u76ee\u5dee\u6570\u7ec4","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u957f\u5ea6\u4e3a n \u3002</p> <p>nums \u7684 \u4e0d\u540c\u5143\u7d20\u6570\u76ee\u5dee \u6570\u7ec4\u53ef\u4ee5\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 diff \u8868\u793a\uff0c\u5176\u4e2d diff[i] \u7b49\u4e8e\u524d\u7f00 nums[0, ..., i] \u4e2d\u4e0d\u540c\u5143\u7d20\u7684\u6570\u76ee \u51cf\u53bb \u540e\u7f00 nums[i + 1, ..., n - 1] \u4e2d\u4e0d\u540c\u5143\u7d20\u7684\u6570\u76ee\u3002</p> <p>\u8fd4\u56de nums \u7684 \u4e0d\u540c\u5143\u7d20\u6570\u76ee\u5dee \u6570\u7ec4\u3002</p> <p>\u6ce8\u610f nums[i, ..., j] \u8868\u793a nums \u7684\u4e00\u4e2a\u4ece\u4e0b\u6807 i \u5f00\u59cb\u5230\u4e0b\u6807 j \u7ed3\u675f\u7684\u5b50\u6570\u7ec4\uff08\u5305\u542b\u4e0b\u6807 i \u548c j \u5bf9\u5e94\u5143\u7d20\uff09\u3002\u7279\u522b\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u5982\u679c i &gt; j \uff0c\u5219 nums[i, ..., j] \u8868\u793a\u4e00\u4e2a\u7a7a\u5b50\u6570\u7ec4\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1anums = [1,2,3,4,5] \u8f93\u51fa\uff1a[-3,-1,1,3,5] \u89e3\u91ca\uff1a \u5bf9\u4e8e i = 0\uff0c\u524d\u7f00\u4e2d\u6709 1 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 4 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[0] = 1 - 4 = -3 \u3002 \u5bf9\u4e8e i = 1\uff0c\u524d\u7f00\u4e2d\u6709 2 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 3 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[1] = 2 - 3 = -1 \u3002 \u5bf9\u4e8e i = 2\uff0c\u524d\u7f00\u4e2d\u6709 3 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 2 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[2] = 3 - 2 = 1 \u3002 \u5bf9\u4e8e i = 3\uff0c\u524d\u7f00\u4e2d\u6709 4 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 1 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[3] = 4 - 1 = 3 \u3002 \u5bf9\u4e8e i = 4\uff0c\u524d\u7f00\u4e2d\u6709 5 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 0 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[4] = 5 - 0 = 5 \u3002</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1anums = [3,2,3,4,2] \u8f93\u51fa\uff1a[-2,-1,0,2,3] \u89e3\u91ca\uff1a \u5bf9\u4e8e i = 0\uff0c\u524d\u7f00\u4e2d\u6709 1 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 3 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[0] = 1 - 3 = -2 \u3002 \u5bf9\u4e8e i = 1\uff0c\u524d\u7f00\u4e2d\u6709 2 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 3 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[1] = 2 - 3 = -1 \u3002 \u5bf9\u4e8e i = 2\uff0c\u524d\u7f00\u4e2d\u6709 2 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 2 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[2] = 2 - 2 = 0 \u3002 \u5bf9\u4e8e i = 3\uff0c\u524d\u7f00\u4e2d\u6709 3 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 1 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[3] = 3 - 1 = 2 \u3002 \u5bf9\u4e8e i = 4\uff0c\u524d\u7f00\u4e2d\u6709 3 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 0 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[4] = 3 - 0 = 3 \u3002 </p> <p>\u7b80\u5355\u9898\u76ee\u6a21\u62df\u5373\u53ef\uff1a\u4e24\u4e2aset\u6700\u540e\u51cf\u53bb\u5927\u5c0f</p> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; distinctDifferenceArray(vector&lt;int&gt;&amp; nums) {\nint n = nums.size();\nvector&lt;int&gt; ans(n, 0);\nfor (int i = 0; i &lt; n; i++) {\nunordered_set&lt;int&gt; set1;\nfor (int j = 0; j &lt;= i; j++) {\nset1.insert(nums[j]);\n}\nunordered_set&lt;int&gt; set2;\nfor (int j = i + 1; j &lt; n; j++) {\nset2.insert(nums[j]);\n}\nans[i] = set1.size() - set2.size();\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-weekly/LeetCode344thContest/#6417","title":"6417. \u9891\u7387\u8ddf\u8e2a\u5668","text":"<p>\u8bf7\u4f60\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5bf9\u5176\u4e2d\u7684\u503c\u8fdb\u884c\u8ddf\u8e2a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u652f\u6301\u5bf9\u9891\u7387\u76f8\u5173\u67e5\u8be2\u8fdb\u884c\u5e94\u7b54\u3002</p> <p>\u5b9e\u73b0 FrequencyTracker \u7c7b\uff1a</p> <ul> <li>FrequencyTracker()\uff1a\u4f7f\u7528\u4e00\u4e2a\u7a7a\u6570\u7ec4\u521d\u59cb\u5316 FrequencyTracker \u5bf9\u8c61\u3002</li> <li>void add(int number)\uff1a\u6dfb\u52a0\u4e00\u4e2a number \u5230\u6570\u636e\u7ed3\u6784\u4e2d\u3002</li> <li>void deleteOne(int number)\uff1a\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u5220\u9664\u4e00\u4e2a number \u3002\u6570\u636e\u7ed3\u6784 \u53ef\u80fd\u4e0d\u5305\u542b number \uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u5220\u9664\u4efb\u4f55\u5185\u5bb9\u3002</li> <li>bool hasFrequency(int frequency): \u5982\u679c\u6570\u636e\u7ed3\u6784\u4e2d\u5b58\u5728\u51fa\u73b0 frequency \u6b21\u7684\u6570\u5b57\uff0c\u5219\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002</li> </ul> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165 [\"FrequencyTracker\", \"add\", \"add\", \"hasFrequency\"] [[], [3], [3], [2]] \u8f93\u51fa [null, null, null, true]</p> <p>\u89e3\u91ca FrequencyTracker frequencyTracker = new FrequencyTracker(); frequencyTracker.add(3); // \u6570\u636e\u7ed3\u6784\u73b0\u5728\u5305\u542b [3] frequencyTracker.add(3); // \u6570\u636e\u7ed3\u6784\u73b0\u5728\u5305\u542b [3, 3] frequencyTracker.hasFrequency(2); // \u8fd4\u56de true \uff0c\u56e0\u4e3a 3 \u51fa\u73b0 2 \u6b21</p> <p>\u6a21\u62df\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e24\u4e2amap\u7ef4\u62a4\u6570\u636e\uff1a</p> <pre><code>class FrequencyTracker {\npublic:\nunordered_map&lt;int, int&gt; mp;\nunordered_map&lt;int, int&gt; curSet;\nFrequencyTracker() {\n}\nvoid add(int number) {\nif (curSet[mp[number]] != 0)\ncurSet[mp[number]] --;\nmp[number] ++;\ncurSet[mp[number]] ++;\n}\nvoid deleteOne(int number) {\nif (mp.find(number) == mp.end() || mp[number] == 0) {\nreturn ;\n}\ncurSet[mp[number]] --;\nmp[number] --;\ncurSet[mp[number]] ++;\n}\nbool hasFrequency(int frequency) {\nreturn curSet[frequency] != 0;\n}\n};\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * FrequencyTracker* obj = new FrequencyTracker();\n * obj-&gt;add(number);\n * obj-&gt;deleteOne(number);\n * bool param_3 = obj-&gt;hasFrequency(frequency);\n */\n</code></pre>"},{"location":"algorithm/lc-weekly/LeetCode344thContest/#6418","title":"6418. \u6709\u76f8\u540c\u989c\u8272\u7684\u76f8\u90bb\u5143\u7d20\u6570\u76ee","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3001\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 nums \u3002\u4e00\u5f00\u59cb\uff0c\u6240\u6709\u5143\u7d20\u90fd\u662f \u672a\u67d3\u8272 \uff08\u503c\u4e3a 0 \uff09\u7684\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 queries \uff0c\u5176\u4e2d queries[i] = [indexi, colori] \u3002</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\uff0c\u4f60\u9700\u8981\u5c06\u6570\u7ec4 nums \u4e2d\u4e0b\u6807\u4e3a indexi \u7684\u683c\u5b50\u67d3\u8272\u4e3a colori \u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e0e queries \u76f8\u7b49\u7684\u6570\u7ec4 answer \uff0c\u5176\u4e2d answer[i]\u662f\u524d i \u4e2a\u64cd\u4f5c \u4e4b\u540e \uff0c\u76f8\u90bb\u5143\u7d20\u989c\u8272\u76f8\u540c\u7684\u6570\u76ee\u3002</p> <p>\u66f4\u6b63\u5f0f\u7684\uff0canswer[i] \u662f\u6267\u884c\u5b8c\u524d i \u4e2a\u64cd\u4f5c\u540e\uff0c0 &lt;= j &lt; n - 1 \u7684\u4e0b\u6807 j \u4e2d\uff0c\u6ee1\u8db3 nums[j] == nums[j + 1] \u4e14 nums[j] != 0 \u7684\u6570\u76ee\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1an = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]] \u8f93\u51fa\uff1a[0,1,1,0,2] \u89e3\u91ca\uff1a\u4e00\u5f00\u59cb\u6570\u7ec4 nums = [0,0,0,0] \uff0c0 \u8868\u793a\u6570\u7ec4\u4e2d\u8fd8\u6ca1\u67d3\u8272\u7684\u5143\u7d20\u3002 - \u7b2c 1 \u4e2a\u64cd\u4f5c\u540e\uff0cnums = [2,0,0,0] \u3002\u76f8\u90bb\u5143\u7d20\u989c\u8272\u76f8\u540c\u7684\u6570\u76ee\u4e3a 0 \u3002 - \u7b2c 2 \u4e2a\u64cd\u4f5c\u540e\uff0cnums = [2,2,0,0] \u3002\u76f8\u90bb\u5143\u7d20\u989c\u8272\u76f8\u540c\u7684\u6570\u76ee\u4e3a 1 \u3002 - \u7b2c 3 \u4e2a\u64cd\u4f5c\u540e\uff0cnums = [2,2,0,1] \u3002\u76f8\u90bb\u5143\u7d20\u989c\u8272\u76f8\u540c\u7684\u6570\u76ee\u4e3a 1 \u3002 - \u7b2c 4 \u4e2a\u64cd\u4f5c\u540e\uff0cnums = [2,1,0,1] \u3002\u76f8\u90bb\u5143\u7d20\u989c\u8272\u76f8\u540c\u7684\u6570\u76ee\u4e3a 0 \u3002 - \u7b2c 5 \u4e2a\u64cd\u4f5c\u540e\uff0cnums = [2,1,1,1] \u3002\u76f8\u90bb\u5143\u7d20\u989c\u8272\u76f8\u540c\u7684\u6570\u76ee\u4e3a 2 \u3002</p> <p>\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u94fe\u63a5\uff1ahttps://leetcode.cn/problems/number-of-adjacent-elements-with-the-same-color \u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002</p> <p>\u8d85\u65f6\u505a\u6cd5\uff1a</p> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; colorTheArray(int n, vector&lt;vector&lt;int&gt;&gt;&amp; queries) {\nvector&lt;int&gt; ans(queries.size(), 0);\nunordered_map&lt;int, unordered_set&lt;int&gt;&gt; mp;\nvector&lt;int&gt; nums(n, 0);\nint size = queries.size();\nint tmp = 0;\nfor (int i = 0; i &lt; size; i++) {\nint idx = queries[i][0];\nint col = queries[i][1];\nint oldColr = nums[idx];\ntmp -= check(mp[oldColr]);\nmp[oldColr].erase(idx);\ntmp += check(mp[oldColr]);\ntmp -= check(mp[col]);\nmp[col].insert(idx);\ntmp += check(mp[col]);\nnums[idx] = col;\nans[i] = tmp;\n}\nreturn ans;\n}\nint check(unordered_set&lt;int&gt; &amp;tmp) {\nif(tmp.size() &lt;= 1) {\nreturn 0;\n}\nvector&lt;int&gt; cur;\nint ans = 0;\ncur.assign(tmp.begin(), tmp.end());\nsort(cur.begin(), cur.end());\nfor (int i = 0; i + 1 &lt; cur.size(); i++) {\nif (cur[i] + 1 == cur[i + 1]) {\nans ++;\n}\n}\nreturn ans;\n}\n};\n</code></pre> <p>\u6b63\u786e\u505a\u6cd5\uff1a\u53ea\u5173\u6ce8\u6bcf\u6b21\u66f4\u6539\u4e24\u8fb9\u5143\u7d20\u662f\u5426\u8054\u901a\uff0c\u590d\u7528\u4e0a\u4e00\u6b21\u7ed3\u679c\u3002</p> <pre><code>class Solution {\npublic:\nvector&lt;int&gt; colorTheArray(int n, vector&lt;vector&lt;int&gt;&gt; &amp;queries) {\nint q = queries.size(), cnt = 0;\nvector&lt;int&gt; ans(q), a(n + 2); // \u907f\u514d\u8ba8\u8bba\u4e0b\u6807\u51fa\u754c\u7684\u60c5\u51b5\nfor (int qi = 0; qi &lt; q; qi++) {\nint i = queries[qi][0] + 1, c = queries[qi][1]; // \u4e0b\u6807\u6539\u6210\u4ece 1 \u5f00\u59cb\n// \u5982\u679c\u5f53\u524d\u6709\u989c\u8272\uff0c\u5219\u9700\u8981\u5224\u65ad\u4e24\u8fb9\u662f\u5426\u4e00\u81f4\uff0c\u5982\u679c\u4e00\u81f4\u5219\u5bf9\u5e94 + 1\nif (a[i]) cnt -= (a[i] == a[i - 1]) + (a[i] == a[i + 1]);\n// \u5c06i\u8bbe\u7f6e\u4e3a\u5f53\u524d\u989c\u8272\na[i] = c;\n// \u9700\u8981\u5224\u65ad\u4e24\u8fb9\u662f\u5426\u4e00\u81f4\uff0c\u5982\u679c\u4e00\u81f4\u5219\u5bf9\u5e94 + 1\ncnt += (a[i] == a[i - 1]) + (a[i] == a[i + 1]);\nans[qi] = cnt;\n}\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/lc-weekly/LeetCode344thContest/#6419","title":"6419. \u4f7f\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84\u503c\u76f8\u7b49\u7684\u6700\u5c0f\u4ee3\u4ef7","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \u8868\u793a\u4e00\u68f5 \u6ee1\u4e8c\u53c9\u6811 \u91cc\u9762\u8282\u70b9\u7684\u6570\u76ee\uff0c\u8282\u70b9\u7f16\u53f7\u4ece 1 \u5230 n \u3002\u6839\u8282\u70b9\u7f16\u53f7\u4e3a 1 \uff0c\u6811\u4e2d\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 i \u90fd\u6709\u4e24\u4e2a\u5b69\u5b50\uff0c\u5206\u522b\u662f\u5de6\u5b69\u5b50 2 * i \u548c\u53f3\u5b69\u5b50 2 * i + 1 \u3002</p> <p>\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u503c\uff0c\u7528\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3001\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 cost \u8868\u793a\uff0c\u5176\u4e2d cost[i] \u662f\u7b2c i + 1 \u4e2a\u8282\u70b9\u7684\u503c\u3002\u6bcf\u6b21\u64cd\u4f5c\uff0c\u4f60\u53ef\u4ee5\u5c06\u6811\u4e2d \u4efb\u610f \u8282\u70b9\u7684\u503c \u589e\u52a0 1 \u3002\u4f60\u53ef\u4ee5\u6267\u884c\u64cd\u4f5c \u4efb\u610f \u6b21\u3002</p> <p>\u4f60\u7684\u76ee\u6807\u662f\u8ba9\u6839\u5230\u6bcf\u4e00\u4e2a \u53f6\u5b50\u7ed3\u70b9 \u7684\u8def\u5f84\u503c\u76f8\u7b49\u3002\u8bf7\u4f60\u8fd4\u56de \u6700\u5c11 \u9700\u8981\u6267\u884c\u589e\u52a0\u64cd\u4f5c\u591a\u5c11\u6b21\u3002</p> <p>\u6ce8\u610f\uff1a</p> <p>\u6ee1\u4e8c\u53c9\u6811 \u6307\u7684\u662f\u4e00\u68f5\u6811\uff0c\u5b83\u6ee1\u8db3\u6811\u4e2d\u9664\u4e86\u53f6\u5b50\u8282\u70b9\u5916\u6bcf\u4e2a\u8282\u70b9\u90fd\u6070\u597d\u6709 2 \u4e2a\u8282\u70b9\uff0c\u4e14\u6240\u6709\u53f6\u5b50\u8282\u70b9\u8ddd\u79bb\u6839\u8282\u70b9\u8ddd\u79bb\u76f8\u540c\u3002 \u8def\u5f84\u503c \u6307\u7684\u662f\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u4e4b\u548c</p> <p></p> <p>\u89e3\u6cd5\u4e00\uff0c\u8d2a\u5fc3\u601d\u8def\uff1a\u4ece\u4e0b\u5230\u4e0a\u6a21\u62df\uff0c\u4ece\u6700\u540e\u975e\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\uff0c\u6bd4\u8f83\u7ed3\u70b9\u4e0b\u9762\u7684\u8def\u5f84\u548c\uff0c\u8ba1\u7b97ans</p> <pre><code>class Solution {\npublic:\nint minIncrements(int n, vector&lt;int&gt; &amp;cost) {\nint ans = 0;\nfor (int i = n / 2; i; i--) { // \u4ece\u6700\u540e\u4e00\u4e2a\u975e\u53f6\u8282\u70b9\u5f00\u59cb\u7b97\nans += abs(cost[i * 2 - 1] - cost[i * 2]); // \u4e24\u4e2a\u5b50\u8282\u70b9\u53d8\u6210\u4e00\u6837\u7684\ncost[i - 1] += max(cost[i * 2 - 1], cost[i * 2]); // \u7d2f\u52a0\u8def\u5f84\u548c\n}\nreturn ans;\n}\n};\n</code></pre> <p>\u89e3\u6cd5\u513f\uff0cDSF\uff1a</p> <pre><code>class Solution {\npublic:\nint minIncrements(int n, vector&lt;int&gt;&amp; cost) {\nint ans = 0;\nfunction&lt;int(int)&gt; dfs = [&amp;](int i) -&gt; int {\nif (i &gt;= n) {\nreturn 0;\n}\nint sum = cost[i];\nint l = dfs(2 * i + 1); /* \u6c42\u5de6\u5b50\u6811\u7684\u548c */\nint r = dfs(2 * i + 2); /* \u6c42\u53f3\u5b50\u6811\u7684\u548c */\nsum += max(l, r);  /* \u5f53\u524d\u8def\u5f84\u7684\u548c */\nans += abs(l - r); /* \u9700\u8981\u5e73\u8861\u5de6\u53f3\u5b50\u6811\u7684\u64cd\u4f5c\u6570 */\nreturn sum;\n};\ndfs(0);\nreturn ans;\n}\n};\n</code></pre>"},{"location":"algorithm/notes/basic-algo/","title":"1.\u540c\u5411\u53cc\u6307\u9488 - \u6ed1\u52a8\u7a97\u53e3","text":"<p>\u9898\u76ee\u94fe\u63a5</p> <ul> <li> <p>209</p> </li> <li> <p>713</p> </li> <li> <p>3</p> </li> </ul>"},{"location":"algorithm/notes/basic-algo/#2-","title":"2.\u540c\u5411\u53cc\u6307\u9488 - \u4e24\u6570\u4e4b\u548c &amp; \u4e09\u6570\u4e4b\u548c","text":"<p>\u9898\u76ee\u94fe\u63a5</p> <ul> <li>167</li> <li>15</li> </ul>"},{"location":"algorithm/notes/basic-algo/#3-","title":"3.\u53cc\u5411\u53cc\u6307\u9488 - \u63a5\u96e8\u6c34 \u524d\u540e\u7f00\u5206\u89e3","text":"<p>\u9898\u76ee\u94fe\u63a5\uff1a</p> <ul> <li>11</li> <li>42</li> </ul>"},{"location":"algorithm/notes/basic-algo/#4","title":"4.\u4e8c\u5206\u67e5\u627e \u5faa\u73af\u4e0d\u53d8\u91cf","text":""},{"location":"algorithm/notes/basic-algo/#5","title":"5.\u4e8c\u5206\u67e5\u627e \u6536\u62fe\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4","text":""},{"location":"algorithm/notes/basic-algo/#6-k","title":"6.\u53cd\u8f6c\u94fe\u8868 - K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c","text":""},{"location":"algorithm/notes/basic-algo/#7-","title":"7.\u5feb\u6162\u6307\u9488 - \u73af\u5f62\u94fe\u8868 \u91cd\u6392\u94fe\u8868","text":""},{"location":"algorithm/notes/basic-algo/#8","title":"8.\u524d\u540e\u6307\u9488 \u94fe\u8868\u5220\u9664 \u94fe\u8868\u53bb\u91cd","text":""},{"location":"algorithm/notes/basic-algo/#9","title":"9.\u4e8c\u53c9\u6811 \u9012\u5f52 \u5e95\u5c42\u539f\u7406","text":""},{"location":"algorithm/notes/basic-algo/#10","title":"10.\u4e8c\u53c9\u6811 \u76f8\u540c \u5bf9\u79f0 \u5e73\u8861 \u53f3\u89c6\u56fe","text":""},{"location":"algorithm/notes/basic-algo/#11","title":"11.\u4e8c\u53c9\u641c\u7d22\u6811 \u524d\u5e8f \u4e2d\u5e8f \u540e\u7eed","text":""},{"location":"algorithm/notes/basic-algo/#12-","title":"12.\u4e8c\u53c9\u6811 - \u6700\u8fd1\u516c\u5171\u7956\u5148","text":""},{"location":"algorithm/notes/basic-algo/#13-bfs","title":"13.\u4e8c\u53c9\u6811 - \u5c42\u6b21\u904d\u5386BFS","text":""},{"location":"algorithm/notes/basic-algo/#14","title":"14.\u56de\u6eaf \u5b50\u96c6\u578b \u5206\u5272\u56de\u6587\u4e32","text":""},{"location":"algorithm/notes/basic-algo/#15","title":"15.\u56de\u6eaf \u7ec4\u5408\u578b \u526a\u679d","text":""},{"location":"algorithm/notes/basic-algo/#16-n","title":"16.\u56de\u6eaf\u578b \u6392\u5217\u578b N\u7687\u540e","text":""},{"location":"algorithm/notes/basic-algo/#17","title":"17.\u52a8\u6001\u89c4\u5212 \u4ece\u8ba1\u5212\u641c\u7d22\u5230\u9012\u63a8","text":""},{"location":"algorithm/notes/basic-algo/#180-1","title":"18.0-1\u80cc\u5305 \u5b8c\u5168\u80cc\u5305 \u76ee\u6807\u548c\u96f6\u94b1\u5151\u6362","text":""},{"location":"algorithm/notes/basic-algo/#19","title":"19.\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217","text":""},{"location":"algorithm/notes/basic-algo/#20","title":"20.\u6700\u957f\u9012\u589e\u81ea\u5e8f\u5217","text":""},{"location":"algorithm/notes/basic-algo/#21dp","title":"21.\u72b6\u6001\u673aDP \u4e70\u5356\u80a1\u7968\u7cfb\u5217","text":""},{"location":"algorithm/notes/basic-algo/#22dp","title":"22.\u533a\u95f4DP \u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217 \u6700\u4f18\u4e09\u89d2\u5256\u5206","text":""},{"location":"algorithm/notes/basic-algo/#23dp","title":"23.\u6811\u5f62DP \u6811\u7684\u76f4\u5f84","text":""},{"location":"algorithm/notes/basic-algo/#24iii","title":"24.\u6253\u5bb6\u52ab\u820dIII \u6811\u4e0a\u6700\u5927\u72ec\u7acb\u96c6","text":""},{"location":"java-notes/JavaVirtualMachine%28JVM%29/","title":"Java Virtual Machine(JVM)","text":"<p>JVM\u662f\u6a21\u62df\u786c\u4ef6\u8f6f\u4ef6\uff0c\u5305\u62ec\u4e00\u5957\u5b57\u8282\u7801\u6307\u4ee4\u96c6\u3001\u5bc4\u5b58\u5668\u3001\u6808\u3001\u5783\u573e\u56de\u6536\u3001\u5806\u548c\u5b58\u50a8\u65b9\u6cd5\u57df\u3002\u4e0e\u786c\u4ef6\u6ca1\u6709\u76f4\u63a5\u7684\u4ea4\u4e92\u3002</p> <p>TODO \uff1a\u8865\u5145\u601d\u7ef4\u5bfc\u56fe</p> <p>Java\u6e90\u6587\u4ef6(.java)\u901a\u8fc7Java\u7f16\u8bd1\u5668\u7f16\u8bd1\u6210\u4e3a\u5b57\u8282\u7801(.class)\uff0c\u6b64\u79cd\u5b57\u8282\u7801\u5728\u4e0d\u540c\u5e73\u53f0\u7684\u4e0d\u540c\u865a\u62df\u673a\u90fd\u662f\u4e00\u5957\u6307\u4ee4\uff0c\u6240\u4ee5\u53ef\u4ee5\u8de8\u5e73\u53f0\uff0c\u6700\u540e\u901a\u8fc7JVM\u4e2d\u7684\u89e3\u91ca\u5668\u5c06\u5b57\u8282\u7801\u7ffb\u8bd1\u6210\u4e3a\u7279\u5b9a\u673a\u5668\u4e0a\u7684\u5b57\u8282\u7801(\u4e8c\u8fdb\u5236)\u3002</p>"},{"location":"java-notes/JavaVirtualMachine%28JVM%29/#1","title":"1.\u7ebf\u7a0b","text":""},{"location":"java-notes/JavaVirtualMachine%28JVM%29/#21","title":"2..1","text":"<p>JVM\u5141\u8bb8\u4e00\u4e2a\u5e94\u7528\u5e76\u53d1\u6267\u884c\u591a\u4e2a\u7ebf\u7a0b\u3002Hotspot JVM\u7684Java\u7ebf\u7a0b\u4e0e\u539f\u751f\u7ebf\u7a0b\u4e3a\u4e00\u5bf9\u4e00\u5173\u7cfb\u3002\u5f53Java\u7ebf\u7a0b\u521d\u59cb\u5316\u5b8c\u6bd5\u540e\uff1a\u672c\u5730\u5b58\u50a8\u3001\u7f13\u51b2\u533a\u5206\u914d\u3001\u540c\u6b65\u5bf9\u8c61\u3001\u6808\u3001\u7a0b\u5e8f\u8ba1\u6570\u5668\u7b49\uff0c\u5c31\u4f1a\u521b\u5efa\u4e0e\u4e4b\u5bf9\u5e94\u7684\u539f\u751f\u7ebf\u7a0b\u3002</p> <p>Java\u7ebf\u7a0b\u7ed3\u675f\u540e\uff0c\u539f\u751f\u7ebf\u7a0b\u88ab\u56de\u6536\uff0c\u91ca\u653e\u539f\u751f\u7ebf\u7a0b\u548cJava\u7ebf\u7a0b\u7684\u5360\u7528\u8d44\u6e90\u3002\u64cd\u4f5c\u7cfb\u7edf\u8d1f\u8d23\u8c03\u5ea6\u539f\u751f\u7ebf\u7a0b\u3002\u5c06\u5176\u5206\u914d\u5230\u53ef\u7528\u7684CPU\u3002\u5f53\u539f\u751f\u7ebf\u7a0b\u521d\u59cb\u5316\u5b8c\u6bd5\uff0c\u5c31\u4f1a\u8c03\u7528Java\u7ebf\u7a0b\u7684<code>run()</code>\u65b9\u6cd5\u3002</p> <p>Hot Spot JVM\u7cfb\u7edf\u7ea7\u7ebf\u7a0b\u4e3a\u5982\u4e0b\uff1a</p> \u7ebf\u7a0b \u529f\u80fd \u865a\u62df\u673a\u7ebf\u7a0b \u8fd9\u4e2a\u7ebf\u7a0b\u7b49\u5f85JVM\u5b89\u5168\u64cd\u4f5c\u51fa\u73b0\u3002\u8fd9\u4e9b\u64cd\u4f5c\u5fc5\u987b\u8981\u5728\u72ec\u7acb\u7ebf\u7a0b\u4e4b\u4e2d\u6267\u884c\uff0c\u56e0\u4e3a\u5f53\u5806\u4fee\u6539\u65e0\u6cd5\u8fdb\u884c\u65f6\uff0c\u7ebf\u7a0b\u90fd\u9700\u8981\u518dJVM\u5b89\u5168\u70b9\u3002\u64cd\u4f5c\u7c7b\u578b\u5982\u4e0b\uff1astop-the-word\u5783\u573e\u56de\u6536\u3001\u7ebf\u7a0b\u6808dump\u3001\u7ebf\u7a0b\u6682\u505c\u3001\u7ebf\u7a0b\u504f\u5411\u9501(biased locking)\u89e3\u9664 \u5468\u671f\u6027\u4efb\u52a1\u7ebf\u7a0b \u8d1f\u8d23\u5b9a\u65f6\u5668\u65f6\u95f4\uff08\u4e5f\u5c31\u662f\u4e2d\u65ad\uff09\uff0c\u7528\u6765\u8c03\u5ea6\u5468\u671f\u6027\u7684\u64cd\u4f5c\u7684\u6267\u884c\u3002 GC\u7ebf\u7a0b \u8fd9\u4e9b\u7ebf\u7a0b\u652f\u6301 JVM \u4e2d\u4e0d\u540c\u7684\u5783\u573e\u56de\u6536\u6d3b\u52a8\u3002 \u7f16\u8bd1\u5668\u7ebf\u7a0b \u8fd9\u4e9b\u7ebf\u7a0b\u5728\u8fd0\u884c\u65f6\u5c06\u5b57\u8282\u7801\u52a8\u6001\u7f16\u8bd1\u6210\u672c\u5730\u5e73\u53f0\u76f8\u5173\u7684\u673a\u5668\u7801\u3002 \u4fe1\u53f7\u5206\u53d1\u7ebf\u7a0b \u8fd9\u4e2a\u7ebf\u7a0b\u63a5\u6536\u53d1\u9001\u5230 JVM \u7684\u4fe1\u53f7\u5e76\u8c03\u7528\u9002\u5f53\u7684 JVM \u65b9\u6cd5\u5904\u7406\u3002"},{"location":"java-notes/JavaVirtualMachine%28JVM%29/#2jvm","title":"2.JVM\u5185\u5b58\u533a\u57df","text":""},{"location":"java-notes/JavaVirtualMachine%28JVM%29/#3jvm","title":"3.JVM\u8fd0\u884c\u65f6\u5185\u5b58","text":""},{"location":"java-notes/JavaVirtualMachine%28JVM%29/#4","title":"4.\u5783\u573e\u56de\u6536\u53ca\u7b97\u6cd5","text":""},{"location":"java-notes/JavaVirtualMachine%28JVM%29/#5java","title":"5.Java\u5f15\u7528\u7c7b\u578b","text":""},{"location":"java-notes/JavaVirtualMachine%28JVM%29/#6gc","title":"6.GC\u5206\u4ee3\u6536\u96c6&amp;\u5206\u533a\u6536\u96c6","text":""},{"location":"java-notes/JavaVirtualMachine%28JVM%29/#7gc","title":"7.GC\u5783\u573e\u6536\u96c6\u5668","text":""},{"location":"java-notes/JavaVirtualMachine%28JVM%29/#8jvm","title":"8.JVM\u7c7b\u52a0\u8f7d\u673a\u5236","text":""},{"location":"java-notes/content/","title":"s","text":""},{"location":"java-notes/java-core/java-core-basic/","title":"\u4e00\u3001\u5f00\u53d1\u73af\u5883\u51c6\u5907","text":""},{"location":"java-notes/java-core/java-core-basic/#_2","title":"\u4e0b\u8f7d","text":"<p>\u8fdb\u5165 JDK \u5b98\u65b9\u4e0b\u8f7d\u5730\u5740 (opens new window)\uff0c\u6839\u636e\u81ea\u5df1\u7684\u73af\u5883\u9009\u62e9\u4e0b\u8f7d\u6240\u9700\u7248\u672c\u3002</p>"},{"location":"java-notes/java-core/java-core-basic/#_3","title":"\u5b89\u88c5","text":"<p>windows \u73af\u5883\u7684 jdk \u5305\u662f exe \u5b89\u88c5\u6587\u4ef6\uff0c\u542f\u52a8\u540e\u6839\u636e\u5b89\u88c5\u5411\u5bfc\u5b89\u88c5\u5373\u53ef\u3002</p> <p>Linux \u73af\u5883\u7684 jdk \u5305\uff0c\u89e3\u538b\u5230\u672c\u5730\u5373\u53ef\u3002</p> <p>Linux\u591a\u7248\u672cJava\u5305\u7ba1\u7406\uff1aSDKMAN</p> <p>Win\u591a\u7248\u672c\u5de5\u5177\uff1a\u5982\u4f55\u5728Windows\u4e2d\u5feb\u901f\u5207\u6362\u4e0d\u540c\u7684Java\u7248\u672c - Jaxu - \u535a\u5ba2\u56ed (cnblogs.com)</p>"},{"location":"java-notes/java-core/java-core-basic/#_4","title":"\u73af\u5883\u53d8\u91cf","text":""},{"location":"java-notes/java-core/java-core-basic/#windows","title":"Windows","text":"<p>\u8ba1\u7b97\u673a &gt; \u5c5e\u6027 &gt; \u9ad8\u7ea7\u7cfb\u7edf\u8bbe\u7f6e &gt; \u73af\u5883\u53d8\u91cf</p> <p>\u6dfb\u52a0\u4ee5\u4e0b\u73af\u5883\u53d8\u91cf\uff1a</p> <p><code>JAVA_HOME</code>\uff1a<code>C:\\Program Files (x86)\\Java\\jdk1.8.0_91</code> \uff08\u6839\u636e\u81ea\u5df1\u7684\u5b9e\u9645\u8def\u5f84\u914d\u7f6e\uff09</p> <p><code>CLASSPATH</code>\uff1a<code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</code> \uff08\u6ce8\u610f\u524d\u9762\u6709\u4e2a\".\"\uff09</p> <pre><code>Path`\uff1a`%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n</code></pre>"},{"location":"java-notes/java-core/java-core-basic/#linux","title":"Linux","text":"<p>\u6267\u884c <code>vi /etc/profile</code> \uff0c\u7f16\u8f91\u73af\u5883\u53d8\u91cf\u6587\u4ef6</p> <p>\u6dfb\u52a0\u4e24\u884c\uff1a</p> <pre><code>export JAVA_HOME=path/to/java\nexport PATH=JAVA_HOME/bin:JAVA_HOME/jre/bin:\n</code></pre> <p>\u6267\u884c <code>source /etc/profile</code> \uff0c\u7acb\u5373\u751f\u6548\u3002</p>"},{"location":"java-notes/java-core/java-core-basic/#_5","title":"\u6d4b\u8bd5\u5b89\u88c5\u6210\u529f\u6d4b\u8bd5\u5b89\u88c5\u6210\u529f","text":"<p>\u6267\u884c\u547d\u4ee4 <code>java -version</code> \uff0c\u5982\u679c\u5b89\u88c5\u6210\u529f\uff0c\u4f1a\u6253\u5370\u5f53\u524d java \u7684\u7248\u672c\u4fe1\u606f\u3002</p>"},{"location":"java-notes/java-core/java-core-basic/#_6","title":"\u5f00\u53d1\u5de5\u5177","text":"<p>\u5de5\u6b32\u5584\u5176\u4e8b\uff0c\u5fc5\u5148\u5229\u5176\u5668\u3002\u7f16\u5199 Java \u7a0b\u5e8f\uff0c\u5f53\u7136\u6709\u5fc5\u8981\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684 IDE\u3002</p> <p>IDE\uff08Integrated Development Environment\uff0c\u5373\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff09\u662f\u7528\u4e8e\u63d0\u4f9b\u7a0b\u5e8f\u5f00\u53d1\u73af\u5883\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e00\u822c\u5305\u62ec\u4ee3\u7801\u7f16\u8f91\u5668\u3001\u7f16\u8bd1\u5668\u3001\u8c03\u8bd5\u5668\u548c\u56fe\u5f62\u7528\u6237\u754c\u9762\u7b49\u5de5\u5177\u3002</p> <p>\u5e38\u89c1\u7684 Java IDE \u5982\u4e0b\uff1a</p> <ul> <li>Eclipse - \u4e00\u4e2a\u5f00\u653e\u6e90\u4ee3\u7801\u7684\u3001\u57fa\u4e8e Java \u7684\u53ef\u6269\u5c55\u5f00\u53d1\u5e73\u53f0\u3002</li> <li>NetBeans - \u5f00\u653e\u6e90\u7801\u7684 Java \u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c\u9002\u7528\u4e8e\u5404\u79cd\u5ba2\u6237\u673a\u548c Web \u5e94\u7528\u3002</li> <li>IntelliJ IDEA - \u5728\u4ee3\u7801\u81ea\u52a8\u63d0\u793a\u3001\u4ee3\u7801\u5206\u6790\u7b49\u65b9\u9762\u7684\u5177\u6709\u5f88\u597d\u7684\u529f\u80fd\u3002</li> <li>MyEclipse - \u7531 Genuitec \u516c\u53f8\u5f00\u53d1\u7684\u4e00\u6b3e\u5546\u4e1a\u5316\u8f6f\u4ef6\uff0c\u662f\u5e94\u7528\u6bd4\u8f83\u5e7f\u6cdb\u7684 Java \u5e94\u7528\u7a0b\u5e8f\u96c6\u6210\u5f00\u53d1\u73af\u5883\u3002</li> <li>EditPlus - \u5982\u679c\u6b63\u786e\u914d\u7f6e Java \u7684\u7f16\u8bd1\u5668\u201cJavac\u201d\u4ee5\u53ca\u89e3\u91ca\u5668\u201cJava\u201d\u540e\uff0c\u53ef\u76f4\u63a5\u4f7f\u7528 EditPlus \u7f16\u8bd1\u6267\u884c Java \u7a0b\u5e8f\u3002</li> </ul>"},{"location":"java-notes/java-core/java-core-basic/#hello-world","title":"\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff1aHello World","text":"<p>\u6dfb\u52a0 HelloWorld.java \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a</p> <pre><code>public class HelloWorld {\npublic static void main(String[] args) {\nSystem.out.println(\"Hello World\");\n}\n}\n</code></pre> <p>\u6267\u884c\u540e\uff0c\u63a7\u5236\u53f0\u8f93\u51fa\uff1a</p> <pre><code>Hello World\n</code></pre>"},{"location":"java-notes/java-core/java-core-basic/#2","title":"2.\u57fa\u7840\u8bed\u6cd5\u7279\u6027","text":""},{"location":"java-notes/java-core/java-core-basic/#21","title":"2.1 \u6ce8\u91ca","text":"<pre><code>public class HelloWorld {\n/*\n     * JavaDoc \u6ce8\u91ca\n     */\npublic static void main(String[] args) {\n// \u5355\u884c\u6ce8\u91ca\n/* \u591a\u884c\u6ce8\u91ca\uff1a\n           1. \u6ce8\u610f\u70b9a\n           2. \u6ce8\u610f\u70b9b\n         */\nSystem.out.println(\"Hello World\");\n}\n}\n</code></pre>"},{"location":"java-notes/java-core/java-core-basic/#22","title":"2.2 \u57fa\u7840\u6570\u636e\u7c7b\u578b","text":""},{"location":"java-notes/java-core/java-core-basic/#221","title":"2.2.1 \u6570\u636e\u7c7b\u578b","text":"<ul> <li>\u503c\u7c7b\u578b\uff1a</li> <li>\u5f15\u7528\u7c7b\u578b\uff1a</li> <li>\u503c\u7c7b\u578bVS\u5f15\u7528\u7c7b\u578b\uff1a</li> </ul>"},{"location":"java-notes/java-core/java-core-basic/#222","title":"2.2.2 \u503c\u7c7b\u578b","text":""},{"location":"java-notes/java-core/java-core-basic/#23","title":"2.3 \u53d8\u91cf","text":""},{"location":"java-notes/java-core/java-core-basic/#24","title":"2.4 \u6570\u7ec4","text":""},{"location":"java-notes/java-core/java-core-basic/#25","title":"2.5 \u679a\u4e3e","text":""},{"location":"java-notes/java-core/java-core-basic/#26","title":"2.6 \u64cd\u4f5c\u7b26","text":""},{"location":"java-notes/java-core/java-core-basic/#27","title":"2.7 \u65b9\u6cd5","text":""},{"location":"java-notes/java-core/java-core-basic/#28","title":"2.8 \u63a7\u5236\u8bed\u53e5","text":""},{"location":"java-notes/java-core/java-core-basic/#29","title":"2.9 \u5f02\u5e38","text":""},{"location":"java-notes/java-core/java-core-basic/#210","title":"2.10 \u6cdb\u578b","text":""},{"location":"java-notes/java-core/java-core-basic/#211","title":"2.11 \u53cd\u5c04","text":""},{"location":"java-notes/java-core/java-core-basic/#212","title":"2.12 \u6ce8\u89e3","text":""},{"location":"java-notes/java-core/java-core-basic/#213","title":"2.13 \u5e8f\u5217\u5316","text":""},{"location":"java-notes/java-core/java-core-basic/#java","title":"\u6df1\u5165\u7406\u89e3Java\u57fa\u7840\u6570\u636e\u7c7b\u578b","text":""},{"location":"java-notes/java-core/java-core-basic/#java_1","title":"Java\u9762\u5411\u5bf9\u8c61","text":""},{"location":"java-notes/java-core/java-core-basic/#java_2","title":"Java\u65b9\u6cd5\u8be6\u89e3","text":""},{"location":"java-notes/java-core/java-core-basic/#java_3","title":"Java\u6570\u7ec4\u8be6\u89e3","text":""},{"location":"java-notes/java-core/java-core-basic/#java_4","title":"Java\u679a\u4e3e\u8be6\u89e3","text":""},{"location":"java-notes/java-core/java-core-basic/#java_5","title":"Java\u63a7\u5236\u8bed\u53e5","text":""},{"location":"java-notes/java-core/java-core-basic/#java_6","title":"Java\u5f02\u5e38\u8be6\u89e3","text":""},{"location":"java-notes/java-core/java-core-basic/#java_7","title":"Java\u6cdb\u578b\u8be6\u89e3","text":""},{"location":"java-notes/java-core/java-core-basic/#java_8","title":"Java\u53cd\u5c04\u548c\u52a8\u6001\u4ee3\u7406\u8be6\u89e3","text":""},{"location":"java-notes/java-core/java-core-basic/#java_9","title":"Java\u6ce8\u89e3\u8be6\u89e3","text":""},{"location":"java-notes/java-core/java-core-basic/#java_10","title":"Java\u5e38\u7528\u5de5\u5177\u7c7b\u8be6\u89e3","text":""},{"location":"java-notes/java-core/java-core-basic/#java-string","title":"Java String\u7c7b\u578b\u8be6\u89e3","text":""},{"location":"live/NoodlesMixedWithScallionOil/","title":"\u8471\u6cb9\u62cc\u9762","text":""},{"location":"live/NoodlesMixedWithScallionOil/#1","title":"1.\u51c6\u5907\u6750\u6599","text":"<ul> <li>\u5c0f\u8471 2\uffe5</li> <li>\u9762\u6761 1\uffe5</li> <li>\u9e21\u86cb</li> <li>\u9999\u6599</li> </ul>"},{"location":"live/NoodlesMixedWithScallionOil/#2","title":"2.\u5236\u4f5c\u8fc7\u7a0b","text":"<ol> <li>\u5c0f\u8471\u6d17\u5e72\u51c0 \u64e6\u5e72\u51c0\u6c34\u5206</li> <li>\u8471\u767d\u548c\u8471\u7eff\u5206\u5f00</li> <li>\u9999\u6599\uff1a\u4e00\u9897\u516b\u89d2\u3001\u4e00\u5c0f\u5757\u6842\u76ae\u30012\u7247\u9999\u53f6</li> <li>\u8c03\u6599\uff1a6\u52fa\u751f\u62bd\u3001\u4e09\u52fa\u8001\u62bd\u30012\u5c0f\u52fa\u767d\u7cd6</li> <li>\u714e\u9e21\u86cb</li> <li>5\u6210\u6cb9\u4e0b\u8471\u767d\u548c\u9999\u6599\uff0c\u5168\u7a0b\u6700\u5c0f\u706b\u70b8\u76f4\u91d1\u9ec4</li> <li>\u8471\u767d\u548c\u9999\u6599\u53bb\u9664</li> <li>\u5c0f\u706b\u70b8\u8471\u7eff</li> <li>\u6492\u5165\u5c0f\u867e\u7c73\uff0c\u653e\u5165\u8c03\u6599\uff0c\u6599\u6c41\u5192\u70df\u5173\u706b\uff0c\u5012\u51fa\u667e\u51c9</li> <li>\u9762\u716e\u719f\u8fc7\u6c34</li> </ol>"},{"location":"live/NoodlesMixedWithScallionOil/#3","title":"3.\u6210\u679c","text":""},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/","title":"\u5de5\u4f5c\u5feb\u4e00\u5e74\u7684\u5f97\u4e0e\u5931","text":""},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/#1","title":"1.\u4e3a\u4ec0\u4e48\u4f1a\u5199\u8fd9\u7bc7\u6587\u7ae0","text":"<p>\u5199\u8fd9\u7bc7\u6587\u7ae0\u6ca1\u6709\u522b\u7684\u76ee\u7684\uff0c\u603b\u662f\u89c9\u5f97\u5f97\u5199\u70b9\u4ec0\u4e48\uff0c\u6765\u8868\u8fbe\u548c\u8bb0\u5f55\u8fd9\u4e00\u5e74\u7684\u6240\u5f97\u6240\u5931\u3002\u540c\u65f6\u4e5f\u4e3a\u4e86\u6392\u89e3\u65f6\u95f4\uff0c\u627e\u70b9\u6709\u610f\u4e49\u7684\u4e8b\u60c5\u53bb\u505a\u3002\u6700\u540e\u501f\u52a9\u8fd9\u7bc7\u6587\u7ae0\u5e0c\u671b\u5bf9\u672a\u6765\u6709\u6e05\u6670\u7684\u89c4\u5212\u548c\u8ba4\u77e5\u3002</p> <p>-- 2023-06-03 \u4e00\u4e2a\u8ff7\u832b\u65e0\u804a\u7684\u4e0b\u5348\u3002</p> <p>\u501f\u6b64\u6587\u7ae0\uff0c\u8bb0\u5f55\u6211\u8fd9\u4e00\u5e74\u6240\u5f97\u6240\u5931\u3001\u6240\u60f3\u6240\u601d\u3002</p> <p>\uff08\u56e0\u4e3a\u56fe\u5e8a\u5728github\uff0c\u6709\u6253\u4e0d\u5f00\u7684\u60c5\u51b5\uff0c\u8bf7\u6302TiZi\uff09</p> <p>\u7b80\u5355\u505a\u4e00\u4e2a\u81ea\u6211\u4ecb\u7ecd\uff1a</p> <p>1999\u5e74\u51fa\u751f\uff0c\u6bd5\u4e1a\u4e8e\u6210\u90fd\uff0c\u76ee\u524d\u5728\u6210\u90fd\u963f\u91cc\u5df4\u5df4\u672c\u5730\u751f\u6d3b\u5de5\u4f5c\uff0c\u5c0f\u5c0fP5\u7a0b\u5e8f\u5458\u3002</p>"},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/#2","title":"2.\u4e8b\u4e1a\uff1a\u8fdb\u5165\u4e92\u8054\u7f51\u516c\u53f8\u5de5\u4f5c","text":""},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/#21-21","title":"2.1 21\u5e74\u7684\u6691\u671f\u5b9e\u4e60\u7ecf\u5386","text":"<p>\u521a\u4ece\u6210\u90fd\u4e00\u4e2a\u672b\u6d41211\u672c\u79d1\u6bd5\u4e1a\uff0c\u5927\u4e09\u5728\u8003\u7814\u548c\u5de5\u4f5c\u4e4b\u95f4\u6765\u56de\u6a2a\u8df3\uff0c\u6700\u540e\u9009\u62e9\u4e86\u4e00\u6761\u5f53\u65f6\u6700\u9002\u5408\u81ea\u5df1\u7684\u9053\u8def\uff0c\u90a3\u5c31\u662f\u53bb\u5de5\u4f5c\uff0c\u53bb\u627e\u5b9e\u4e60\uff0c\u8fdb\u5165\u793e\u4f1a\u52a0\u6cb9\u5de5\u4f5c\uff0c\u591a\u8d5a\u70b9\u94b1\u3002\u627e\u5b9e\u4e60\u7684\u8def\u4e0a\u4e5f\u6ca1\u6709\u90a3\u4e48\u8f7b\u677e\uff0c\u56e0\u4e3a\u51c6\u5907\u7684\u5f88\u665a\uff0c\u5e78\u597d\u5927\u4e09\u6709\u7740\u65e0\u9650\u7684\u52a8\u529b\u53bb\u5b66\u4e60\uff0c\u4e0d\u65ad\u8bd5\u9519\uff0c\u5728\u9762\u8bd5\u4e2d\u5bf9\u9762\u8bd5\u9898\u4e0d\u65ad\u7684\u719f\u6089\uff0c\u5c31\u7b97\u5982\u6b64\uff0c\u6700\u540e\u4e5f\u53ea\u662f\u627e\u5230\u4e86\u5317\u4eac\u7684<code>\u597d\u672a\u6765</code>\u516c\u53f8\uff0c\u5f88\u611f\u8c22\u80fd\u7ed9\u6211\u4e00\u4e2a\u6691\u671f\u5b9e\u4e60offer\uff0c\u5f88\u6e05\u6670\u7684\u8bb0\u7740200/\u5929\u7684\u5b9e\u4e60\u85aa\u8d44\uff0c\u662fgolang\u5c97\u4f4d\uff0c\u5f53\u65f6\u4e5f\u6ca1\u60f3\u5230\u6700\u540e\u627e\u7684\u786e\u5b9ejava\u5c97\u4f4d\u3002</p> <p>\u5b9e\u4e60\u9762\u8bd5\u7ecf\u9a8c\uff1a</p> <ol> <li>\u7b80\u5386\uff1a\u5bf9\u4e8e\u7b80\u5386\u4e0a\u7684\u5185\u5bb9\uff0c\u81ea\u5df1\u8981\u786e\u8ba4\u90fd\u4f1a\uff0c\u4e0d\u4f1a\u7684\u4e0d\u8981\u5199\uff0c\u4f1a\u88ab\u95ee\u3002</li> <li>\u9879\u76ee\uff1a\u9879\u76ee\u8981\u4e86\u89e3\u96be\u70b9\uff0c\u6ca1\u6709\u96be\u70b9\u53ef\u4ee5\u8bf4\u540e\u7eed\u53ef\u4ee5\u63d0\u5347\u7684\u70b9\u3002</li> <li>\u7b97\u6cd5\uff1a\u591a\u5237LeetCode\uff0c\u5468\u672b\u4e5f\u53ef\u4ee5\u6253lc\u7684\u53cc\u5468\u8d5b\u548c\u5468\u8d5b\u3002\u63a8\u8350c++\u56e0\u4e3a\uff0cstl\u5f88\u65b9\u4fbf\u3002</li> <li>\u5176\u5b83\uff1a\u81ea\u4fe1\uff0c\u51b7\u9759\u3002\u5bf9\u4e8e\u81ea\u5df1\u4e86\u89e3\u7684\uff0c\u8981\u6761\u7406\u6e05\u6670\u7684\u56de\u7b54\u3002\u5bf9\u4e8e\u81ea\u5df1\u4e0d\u4e86\u89e3\u7684\u8981\u52aa\u529b\u601d\u8003\uff0c\u8bf4\u51fa\u81ea\u5df1\u7684\u601d\u8003\uff0c\u9762\u8bd5\u5b98\u57fa\u672c\u4f1a\u5f15\u5bfc\u3002</li> </ol> <p>\u963f\u91cc\u7684\u5b9e\u4e60\u798f\u5229\uff1a</p> <ol> <li>\u57fa\u672c\u85aa\u8d44\uff1a\u672c\u79d1350/\u5929\uff0c\u7814\u7a76\u751f400/\u5929</li> <li>\u623f\u8865\u6bcf\u67082k</li> <li>\u514d\u8d39\u4f53\u68c0</li> <li>\u62a5\u9500\u5f02\u5730\u5c31\u804c\u6765\u56de\u4ea4\u901a\u8d39\u7528</li> <li>\u5165\u804c\u4e03\u5929\u5185\u62a5\u9500\u4f4f\u5bbf\uff0c\u8ba9\u4f60\u627e\u623f\u5b50</li> <li>\u9910\u8865\u3001\u4e5d\u70b9\u4e4b\u540e\u53c810\u5757\u94b1\u591c\u5bb5</li> <li>\u6709\u8f6c\u6b63\u673a\u4f1a</li> </ol>"},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/#22-21","title":"2.2 21\u5e74\u676d\u5dde\u963f\u91cc\u5b9e\u4e60","text":"<p>\u63a5\u7740\u4e0a\u6587\u627e\u5b9e\u4e60\uff0c\u5728\u51c6\u5907\u63a5\u4e86\u597d\u672a\u6765\u7684\u5b9e\u4e60offer\u7684\u65f6\u5019\uff0c\u963f\u91cc\u901a\u77e5\u9762\u8bd5\u90fd\u901a\u8fc7\u4e86\uff0c\u9a6c\u4e0a\u4e5f\u8981\u53d1offer\uff0c\u90a3\u65f6\u5019\u56e0\u4e3a\u8981\u6691\u671f\u5b9e\u4e60\u66ff\u4ee3\uff0c\u9700\u8981\u6750\u6599\uff0c\u9519\u70b9\u5c31\u63a5\u4e86\u597d\u672a\u6765\u7684\u5b9e\u4e60offer\uff0c\u73b0\u5728\u56de\u8fc7\u5934\u6765\u770b\uff0c\u5f53\u65f6\u5e78\u597d\u6ca1\u505a\u9519\u8bef\u51b3\u5b9a\uff0c\u6765\u5230\u676d\u5dde\u963f\u91cc\u672c\u5730\u751f\u6d3b\u5b9e\u4e60\u3002</p> <p>\u8bf4\u8d77\u53bb\u676d\u5dde\uff0c\u60f3\u8d77\u6765\u5f53\u65f6\u5728\u6210\u90fd\u548c\u676d\u5dde\u4e2d\u9009\u62e9\uff0c\u6700\u540e\u9009\u62e9\u4e86\u676d\u5dde\uff0c\u56e0\u4e3a\u77e5\u9053\u676d\u5dde\u662f\u603b\u90e8\uff0c\u7ed3\u679c\u6700\u540e\u4e5f\u6ca1\u53bb\u5230\u963f\u91cc\u603b\u90e8(\u897f\u6eaa\u56ed\u533a)\uff0c\u53bb\u7684\u662f\u8682\u8681\u91d1\u670d\u7684Z\u7a7a\u95f4\uff0c\u697c\u578b\u50cfZ\uff0c\u4e00\u4e2a\u7855\u5927\u7684\u8682\u8681\u96c6\u56e2\u6302\u5728\u697c\u9876\uff0c\u5174\u594b\u7684\u62cd\u4e86\u4e00\u4e0b\u7167\u7247\u3002</p> <p>\u676d\u5dde\u5b9e\u4e60\u7b97\u662f\u5feb\u4e50\u7684\uff0c\u89c1\u5230\u4e86\u5e26\u6211\u7684\u5e08\u5144\uff0c\u4e5f\u662f\u6cb3\u5357\u4eba\uff0c\u73b0\u4ee5\u79bb\u804c\uff0c\u6700\u540e\u4e00\u6b21\u542c\u8bf4\u662f\u5728Zoom\uff0c\u795d\u597d\u3002</p> <p>\u7136\u540e\u5c31\u662f\u5feb\u4e50\u7684\u5b9e\u4e60\u671f\u95f4\uff0c\u90a3\u65f6\u5019\u6211\u4e5f\u6ca1\u60f3\u6211\u6700\u540e\u80fd\u8f6c\u6b63\uff0c\u4e00\u4e2a\u5c0f\u5c0f\u672c\u79d1\uff0c\u5377\u8fc7\u4e86C9\uff0c\u6700\u540e\u62ff\u5230\u4e86\u79cb\u62db\u76f4\u901aoffer\u3002</p> <p>\u8fd9\u4e2a\u8fc7\u7a0b\u6211\u4e0d\u80fd\u5c55\u5f00\u8bf4\u4e86\uff0c\u56e0\u4e3a\u5185\u5bb9\u592a\u591a\u4e86\uff0c\u540e\u7eed\u5982\u679c\u6709\u673a\u4f1a\u6211\u518d\u8be6\u7ec6\u8bf4\u8bf4\u3002</p> <p>\u8865\u4e00\u4e0b\u6691\u671f\u5b9e\u4e60offer\uff0c\u5b9e\u4e60\u5230\u8f6c\u6b63\u7684\u6d41\u7a0b\uff1a</p> <p>\u6625\u62db\u5b98\u7f51\u6295\u9012 -&gt; \u9762\u8bd52-3\u6280\u672f\u9762 -&gt; 1\u9762HR -&gt; \u6700\u540e\u53d1\u653eoffer -&gt; \u5165\u804c -&gt; 2-3\u4e2a\u6708\u5b9e\u4e60 -&gt; \u5728\u79cb\u62db\u5f00\u542f\u4e4b\u524d\u8fdb\u884c\u8f6c\u6b63\u7b54\u8fa9 -&gt; \u901a\u8fc7\u5c31\u76f4\u63a5\u53d1\u653e\u6b63\u5f0foffer -&gt; \u6bd5\u4e1a\u4e4b\u540e\u5373\u53ef\u5165\u804c</p> <p>\u8865\u4e00\u4e0b\u901a\u77e5\u4e66\u53ca\u6700\u540e\u7684\u5408\u7167\uff1a\u6574\u4f53\u6765\u8bf4\u6536\u83b7\u5f88\u591a\uff0c\u4e5f\u5f88\u5feb\u4e50\u3002</p> <p></p> <p></p>"},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/#23-22","title":"2.3 22\u5e74\u6210\u90fd\u963f\u91cc\u5b9e\u4e60","text":"<p>\u5b9e\u4e60\u8f6c\u6b63\u901a\u8fc7\u540e\uff0c\u56de\u5230\u5b66\u6821\u7ee7\u7eed\u5b8c\u6210\u5269\u4e0b\u7684\u672c\u79d1\u5b66\u4e1a\uff0c\u8fd9\u4e2a\u65f6\u95f4\u66f4\u5feb\u4e50\uff0c\u4e0e\u5ba4\u53cb\u6216\u8005\u5176\u5b83\u4eba\u6765\u6bd4\uff0c\u5df2\u7ecf\u5f88\u597d\u4e86\uff0c\u5fd9\u7740\u6bd5\u4e1a\u7684\u4e8b\uff0c\u4e5f\u5fd9\u4e9b\u73ed\u4e0a\u7684\u4e8b\uff08\u73ed\u957f\uff09\uff0c\u5e2e\u52a9\u73ed\u4e0a\u7684\u540c\u5b66\u5b8c\u6210\u5b66\u4e1a\u548c\u987a\u5229\u6bd5\u4e1a\u3002</p> <p>\u5230\u5927\u56db\u7684\u540e\u534a\u6bb5\uff0c\u6211\u89c9\u5f97\u592a\u95f2\u4e86\uff0c\u521a\u597d\u4e3b\u7ba1\u53c8\u8bf4\u6210\u90fd\u8fd9\u8fb9\u8fd8\u80fd\u7ee7\u7eed\u5b9e\u4e60\uff0c\u4e8e\u662f\u5c31\u53c8\u5230\u6210\u90fd\u8fd9\u8fb9\u7ee7\u7eed\u5b9e\u4e60\uff0c\u9047\u5230\u4e00\u4e2a\u8682\u8681\u8fc7\u6765\u7684\u4e3b\u7ba1\uff0c\u5bf9\u6211\u5f88\u597d\u4e5f\u5f88\u91cd\u89c6\uff0c\u5c31\u7b2c\u4e00\u6b21\u4ea7\u751f\u4e86\u7559\u5728\u6210\u90fd\u7684\u60f3\u6cd5\uff0c\u89c9\u5f97\u6210\u90fd\u8fd9\u8fb9\u6c1b\u56f4\u5f88\u597d\uff0c\u867d\u7136\u6838\u5fc3\u6ca1\u6709\u676d\u5dde\u90a3\u8fb9\u597d\uff0c\u4f46\u662f\u6211\u5728\u6210\u90fd\u5b9e\u4e60\u7684\u8fd9\u51e0\u4e2a\u6708\u5f7b\u5e95\u6539\u53d8\u4e86\u6211\u8fd9\u4e9b\uff0c\u6211\u8fc7\u5f88\u5feb\u4e50\uff0c\u800c\u4e14\u5b66\u5230\u4e86\u5f88\u591a\u5f00\u53d1\u76f8\u5173\u7684\uff0c\u5f53\u7136\u8fd9\u90e8\u5206\u5b9e\u4e60\u4e3a\u540e\u9762\u7559\u5728\u8fd9\u91cc\u8bd5\u7528\u671f\uff0c\u8d77\u4e86\u5f88\u5927\u7684\u4f5c\u7528\u3002</p> <p>\u524d\u524d\u540e\u540e\u7b97\u8d77\u6765\u5b9e\u4e60\u4e86\u534a\u5e74\u3002\u522b\u4eba\u5728\u6bd5\u4e1a\u65c5\u884c\uff0c\u4eab\u53d7\u6700\u540e\u7684\u5927\u5b66\u751f\u6d3b\uff0c\u6211\u5728\u5b9e\u4e60\uff0c\u4ee5\u81f3\u4e8e\u6bd5\u4e1a\u4e4b\u540e\u5341\u5206\u7559\u5ff5\u5728\u5b66\u6821\u7684\u65e5\u5b50\u3002\u597d\u5728\u8fd9\u6bb5\u7ecf\u5386\u8ba9\u6211\u540e\u9762\u7684\u5de5\u4f5c\u5f97\u5230\u4e86\u4fdd\u969c\uff0c\u8bd5\u7528\u671f\u4e5f\u8f7b\u677e\u901a\u8fc7\u3002</p>"},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/#24","title":"2.4 \u5de5\u4f5c\u4e00\u5e74\u7684\u601d\u8003","text":"<p>\u6280\u672f\u53ea\u662f\u4e00\u90e8\u5206\uff0c\u505a\u597d\u4e1a\u52a1\u4e5f\u633a\u597d\u7684\uff0c\u505a\u4e1a\u52a1\u5f00\u53d1\u6700\u96be\u7684\u5c31\u662f\u5982\u4f55\u7406\u89e3\u4e1a\u52a1\uff0c\u6280\u672f\u6ca1\u6709\u5f88\u96be\u7684\u90e8\u5206\u3002\u5fd9\u5b8c\u6bcf\u5929\u7684\u5de5\u4f5c\uff0c\u56de\u5230\u5bb6\u4e5f\u5e94\u8be5\u4fdd\u6301\u7ee7\u7eed\u5b66\u4e60\uff0c\u8fd9\u4e00\u70b9\u6211\u53bb\u5e74\u505a\u7684\u4e0d\u597d\u6211\u53cd\u601d\u3002</p> <p>\u4e5f\u5e94\u8be5\u62bd\u51fa\u4e00\u6bb5\u65f6\u95f4\u53bb\u8fd0\u52a8\uff0c\u53bb\u953b\u70bc\uff0c\u62e5\u6709\u5065\u5eb7\u7684\u8eab\u4f53\u624d\u80fd\u505a\u4ee5\u540e\u7684\u4e8b\u3002</p> <p>\u8f6f\u6280\u80fd\u4e5f\u5f88\u91cd\u8981\uff0c\u6700\u96be\u7684\u5c31\u662f\u8ddf\u4eba\u6253\u4ea4\u9053\uff0c\u4eca\u5929\u4f60\u8ba9\u4ed6\u5e2e\u4e00\u4e2a\u5fd9\uff0c\u660e\u5929\u4ed6\u627e\u4f60\u5e2e\u5fd9\uff0c\u4e00\u5b9a\u8981\u5b66\u4f1a\u597d\u597d\u6c9f\u901a\uff0c\u6ee1\u8db3\u4eba\u60c5\u5473\u7684\u540c\u65f6\u4e5f\u8981\u63d0\u9ad8\u6c9f\u901a\u7684\u6548\u7387\uff0c\u5b66\u4f1a\u770b\u4eba\u4e0b\u83dc\u789f\uff0c\u6bd4\u5982\u8ddf\u6280\u672f\u6253\u4ea4\u9053\uff0c\u5c31\u9ad8\u6548\u4e00\u70b9\uff0c\u67e5\u7ebf\u4e0a\u95ee\u9898\uff0c\u76f4\u63a5\u7ed9\u4ed6traceId\uff0c\u8ddfHR\u548c\u4ea7\u54c1\u5c31\u8981\u66f4\u6709\u98ce\u8da3\u548c\u5e7d\u9ed8\u7684\u8bdd\u9898\u6765\u804a\u3002</p>"},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/#3","title":"3.\u7231\u60c5\uff1a\u8c08\u8c08\u7406\u60f3\u7684\u7231\u60c5(\u7231\u60c5\u89c2)","text":"<p>\u5bf9\u4e8e\u7231\u60c5\u6211\u6709\u5f88\u591a\u6545\u4e8b\uff0c\u4f46\u662f\u597d\u4e8e\u9762\u5b50\uff0c\u8003\u8651\u5230\u8fd9\u7bc7\u6587\u7ae0\u4f1a\u88ab\u719f\u4eba\u770b\u5230\uff0c\u6709\u4e9b\u4e8b\u6211\u4e0d\u80fd\u5927\u8c08\u7279\u8c08\u3002</p> <p>\u4e0a\u6587\u63d0\u5230\u4e86\u4eba\u4e0e\u4eba\u4e4b\u95f4\u6253\u4ea4\u9053\u662f\u4e00\u4ef6\u5f88\u96be\u7684\u4e8b\uff0c\u8c08\u670b\u53cb\u6211\u53cd\u800c\u89c9\u5f97\u6ca1\u6709\u90a3\u4e48\u96be\uff0c\u96be\u7684\u662f\u5982\u4f55\u9047\u89c1\uff0c\u4e5f\u5c31\u662f\u770b\u7f18\u5206\u3002</p> <p>\u6709\u60c5\u4eba\u7ec8\u6210\u7737\u5c5e\uff0c\u65e0\u60c5\u81ea\u7136\u8d70\u4e0d\u5230\u6700\u540e\uff0c\u8c08\u604b\u7231\u7684\u8fc7\u7a0b\u5c31\u662f\u4e92\u76f8\u53d8\u597d\u7684\u8fc7\u7a0b\uff0c\u4e92\u76f8\u5438\u5f15\uff0c\u4eba\u751f\u5e94\u8be5\u6d12\u8131\uff0c\u5982\u679c\u6709\u610f\u96be\u5e73\uff0c\u90a3\u5c31\u5c3d\u4eba\u4e8b\uff0c\u542c\u5929\u547d\uff0c\u4e3a\u81ea\u5df1\u7684\u8fc7\u9519\u6f47\u6d12\u4e70\u5355\u3002</p> <p></p>"},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/#4","title":"4.\u751f\u6d3b\uff1a\u4e0d\u60f3\u518d\u8fc7\u7684\u592a\u7cd9\u4e86","text":""},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/#41","title":"4.1 \u751f\u6d3b\u5e94\u8be5\u662f\u5065\u5eb7\u7684","text":"<p>\u5982\u6807\u9898\uff0c\u751f\u6d3b\u4e2d\u81ea\u5df1\u5e94\u8be5\u5b66\u4f1a\u7167\u987e\u81ea\u5df1\uff0c\u8eab\u4f53\u8981\u591a\u591a\u953b\u70bc\uff0c\u8981\u6ce8\u610f\u536b\u751f\uff0c\u5929\u51b7\u52a0\u8863\uff0c\u540c\u65f6\u4e5f\u8981\u53ca\u65f6\u6392\u89e3\u5b64\u72ec\u548c\u4e0d\u597d\u7684\u60c5\u7eea\u3002</p> <ul> <li>\u5065\u8eab\uff1a\u4e00\u4e2a\u5065\u5eb7\u7684\u8eab\u4f53</li> <li>\u53a8\u827a\uff1a\u5b66\u4f1a\u81ea\u5df1\u505a\u996d<ul> <li>\u81ea\u5df1\u505a\u559c\u6b22\u7684</li> <li>\u4e5f\u80fd\u7167\u987e\u5176ta\u4eba</li> </ul> </li> <li>\u6ce8\u91cd\u536b\u751f\uff1a<ul> <li>\u7a7f\u642d\u611f\u89c9</li> <li>\u53ca\u65f6\u6d17\u6fa1</li> <li>\u6253\u626b\u536b\u751f</li> </ul> </li> <li>\u7cbe\u795e\u5065\u5eb7<ul> <li>\u8bfb\u4e66</li> <li>\u770b\u7535\u5f71\u3001\u542c\u6b4c</li> <li>\u5f39\u5409\u4ed6</li> </ul> </li> </ul>"},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/#42","title":"4.2 \u751f\u6d3b\u5e94\u8be5\u662f\u6709\u8ffd\u6c42\u7684","text":"<p>\u8981\u7ed9\u81ea\u5df1\u7684\u751f\u6d3b\u6307\u5b9a\u6807\u51c6\u548c\u8ffd\u6c42\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u4e8b\u60c5\u4e0d\u505a\u7f62\u4e86\uff0c\u505a\u4e86\u5c31\u8981\u505a\u5230\u6781\u81f4\uff0c\u5236\u5b9a\u91cf\u5316\u7684\u76ee\u6807\uff0c\u8fd9\u70b9\u5728\u963f\u91cc\u7684OKR\u673a\u5236\u91cc\u9762\u5c24\u4e3a\u7a81\u51fa\uff0c\u8ffd\u6c42\u7ed3\u679c\uff0c\u8fc7\u7a0b\u53ef\u4ee5\u91cf\u5316\u3002</p> <p>\u5bf9\u4e8e\u6211\u81ea\u5df1\uff0c\u6211\u627f\u8ba4\u6211\u6bd4\u8f83\u61d2\uff0c\u5f88\u591a\u4e8b\u60c5\u505a\u4e86\u4f46\u662f\u6ca1\u6709\u505a\u597d\uff0c\u6ca1\u6709\u575a\u6301\u4e0b\u53bb\uff0c\u6bd4\u5982\u6bcf\u5929\u90fd\u4f1a\u5b89\u6392\u5b66\u4e60\uff0c\u4f46\u662f\u5b66\u4e60\u5185\u5bb9\u6bcf\u5929\u4e00\u6362\uff0c\u60f3\u8d77\u6765\u4e00\u51fa\u662f\u4e00\u51fa\u3002</p> <p>\u6240\u4ee5\u4e0d\u8981\u518d\u5bf9\u81ea\u5df1\u592a\u597d\u4e86\uff0c\u4e0d\u8981\u592a\u5b89\u9038\u4e86\uff0c\u4e45\u4e86\u81ea\u7136\u800c\u7136\u5c31\u51fa\u95ee\u9898\u4e86\u3002</p>"},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/#43","title":"4.3 \u751f\u6d3b\u5e94\u8be5\u662f\u5145\u6ee1\u4eea\u5f0f\u611f\u548c\u6d6a\u6f2b\u611f\u7684","text":"<p>\u60f3\u8bf4\u8fd9\u70b9\uff0c\u662f\u56e0\u4e3a\u5bf9\u5e94\u4e86\u5927\u6807\u9898\u201c\u751f\u6d3b\u8fc7\u7684\u592a\u7cd9\u4e86\u201d\uff0c\u4e0d\u77e5\u9053\u901a\u8fc7\u4e00\u4e9b\u4eea\u5f0f\u548c\u6d6a\u8d39\u4e30\u5bcc\u81ea\u5df1\u7684\u751f\u6d3b\uff0c\u548c\u5185\u5fc3\u4e16\u754c\uff0c\u5f53\u7136\u8fd9\u70b9\u4e5f\u8ddf\u4ece\u5c0f\u5230\u5927\u7684\u73af\u5883\u6709\u5173\uff0c\u4e4b\u524d\u4e00\u76f4\u6ca1\u60f3\u901a\u4eba\u4e3a\u4ec0\u4e48\u8981\u8fc7\u751f\u65e5\uff0c\u4e5f\u662f\u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\u90fd\u4e0d\u8fc7\u751f\u65e5\uff0c\u6240\u4ee5\u8fd9\u70b9\u4eea\u5f0f\u611f\u6ca1\u6709\u5fc5\u8981\uff0c\u53bb\u5e74\u7834\u5929\u8352\u7684\u8fc7\u4e86\u751f\u65e5\uff0c\u4e5f\u4f53\u4f1a\u5230\u4e86\u751f\u65e5\u4e0d\u53ea\u662f\u81ea\u5df1\uff0c\u4e5f\u662f\u548c\u7231\u4f60\u7684\u4eba\u5728\u4e00\u8d77\u7684\u65e5\u5b50\uff0c\u611f\u53d7\u522b\u4eba\u5bf9\u4f60\u7684\u7231\u3002</p> <p>\u751f\u6d3b\u8fc7\u7684\u7cbe\u81f4\u70b9\uff0c\u6bd4\u5982\u53d1\u4e86\u5e74\u7ec8\u5956\uff0c\u81ea\u5df1\u51fa\u53bb\u597d\u597d\u5403\u4e00\u987f\uff0c\u5956\u52b1\u8fd9\u4e00\u5e74\u7684\u52aa\u529b\uff0c\u6b3a\u9a97\u5185\u5fc3\uff0c\u867d\u7136\u542c\u7740\u5f88\u5b64\u72ec\u548c\u53ef\u601c\uff0c\u4f46\u4e5f\u662f\u8ba9\u81ea\u5df1\u80fd\u5f00\u5fc3\u7684\u4e8b\u3002</p> <p>\u8c08\u4e86\u604b\u7231\u6d6a\u6f2b\u611f\u66f4\u91cd\u8981\u4e86\uff0c\u6bcf\u4e2a\u5973\u5b69\u8ddf\u4f60\u4e0d\u662f\u4e3a\u4e86\u53d7\u82e6\u548c\u96be\u8fc7\uff0c\u8d77\u7801\u5979\u503c\u5f97\u5feb\u4e50\uff0c\u540e\u6765\u6211\u624d\u77e5\u9053\uff0c\u94b1\u4e0d\u662f\u503c\u5f97\u5f00\u5fc3\u7684\u4e8b\uff0c\u5728\u4e00\u8d77\u7684\u5feb\u4e50\u65f6\u95f4\u624d\u662f\uff0c\u4ece\u5c0f\u5230\u5927\u90fd\u662f\u90fd\u662f\u88ab\u5f53\u516c\u4e3b\uff0c\u4f60\u4e5f\u5e94\u8be5\u4e00\u6837\u3002</p>"},{"location":"live/TheGainsAndLossesOfWorkingForNearlyAYear/#5","title":"5.\u540e\u7eed\u7684\u8ba1\u5212","text":"<p>\u4e4b\u524d\u6574\u7406\u4e86\u4e00\u7248\u540e\u7eed\u7684\u5b66\u4e60\u548c\u8bb0\u5f55</p> <p></p>"},{"location":"skills/IDEA/","title":"IDEA\u5feb\u6377\u952e","text":""},{"location":"skills/IDEA/#_1","title":"\u76ee\u5f55","text":"<p>[toc]</p>"},{"location":"skills/IDEA/#mac-win","title":"MAC &amp; WIN\u952e\u76d8\u547d\u4ee4","text":""},{"location":"skills/IDEA/#macwin","title":"MAC\u548cWIN\u952e\u76d8\u6620\u5c04","text":"<p>Mac \u952e\u76d8\u7684\u529f\u80fd\u952e\u662f <code>fn</code> \u3001<code>control</code> \u3001<code>option</code> \u3001<code>command</code>\u3002</p> <p>Win \u952e\u76d8\u7684\u529f\u80fd\u952e\u662f <code>Control</code>\u3001 <code>Win</code>\u3001<code>Alt</code>\u3002</p> <ul> <li>(\u2303)Control-------------&gt; Ctrl</li> <li>(\u2325)Option-------------&gt; Alt</li> <li>(\u2318)Command--------&gt; Win</li> </ul>"},{"location":"skills/IDEA/#_2","title":"\u5199\u4ee3\u7801\u6548\u7387\u5feb\u6377\u952e","text":"<p>\u4ee3\u7801\u63d0\u793a\u548c\u8865\u5168\uff1a<code>ctrl + space</code>\uff0c<code>enter</code></p> <p>\u5269\u4f59\u4ee3\u7801\u8865\u5168\u5f53\u524d\u8bed\u53e5\uff1a<code>ctrl + shift + enter</code></p> <p>\u4ee3\u7801\u5efa\u8bae\uff1a<code>alt + enter</code></p> <p>\u4ee3\u7801\u751f\u6210\uff1a<code>alt + insert</code></p> <p>\u7c7b\u3001\u53d8\u91cf\u3001\u65b9\u6cd5\u91cd\u547d\u540d\uff1a<code>shift + f6</code></p> <p>\u91cd\u65b0\u683c\u5f0f\u5316\u4ee3\u7801\uff1a<code>ctrl + alt + l</code></p> <p>\u63d0\u53d6\u503c\u4e3a\u53d8\u91cf\uff1a<code>ctrl + alt + v(var)</code></p> <p>\u63d0\u53d6\u503c\u4e3a\uff1a<code>ctrl + alt + f(field)</code></p> <p>\u63d0\u53d6\u503c\u4e3a\u5e38\u6570\uff1a<code>ctrl + alt + c(const)</code></p> <p>\u63d0\u53d6\u4e3a\u53c2\u6570\uff1a<code>ctrl + alt + p(parm)</code></p> <p>\u63d0\u53d6\u4e3a\u65b9\u6cd5\uff1a<code>ctrl + alt + m(method)</code></p> <p>\u5c06\u65b9\u6cd5\u8f6c\u4e3ainline\uff1a<code>ctrl + alt + n</code></p> <p>\u5feb\u901f\u5b9a\u4f4d\u9519\u8bef\uff1a<code>f2</code></p>"},{"location":"skills/IDEA/#_3","title":"\u5bfc\u822a\u5feb\u6377\u952e","text":"<p>\u8df3\u8f6c\u5230\u65b9\u6cd5\u5b9a\u4e49\u4ee5\u53ca\u53cd\u5411\u64cd\u4f5c:</p> <ul> <li><code>ctrl + b</code></li> </ul> <p>\u8df3\u8f6c\u5230\u65b9\u6cd5\u5b9e\u73b0\u53ca\u53cd\u5411\u64cd\u4f5c\uff1a</p> <ul> <li><code>ctrl + alt + b</code></li> </ul> <p>super method\u72af\u6cd5\u5b9a\u4e49\uff1a</p> <ul> <li><code>ctrl + U</code></li> </ul> <p>\u5bfb\u627e\u6587\u4ef6\uff1a</p> <ul> <li><code>shift + shift</code></li> </ul> <p>\u5728files\u4e2d\u5bfb\u627e(\u5b57\u7b26\u4e32\u5339\u914d)\uff1a</p> <ul> <li><code>ctrl + alt + f</code></li> </ul> <p>\u8df3\u8f6c\u5230\u5de6\u4fa7\u9879\u76ee\u76ee\u5f55\uff1a</p> <ul> <li><code>alt + 1</code></li> <li><code>`command + 1</code></li> </ul> <p>\u4ece\u5de6\u4fa7\u9879\u76ee\u76ee\u5f55\u6811\u8df3\u8f6c\u5230\u7f16\u8f91\u5668\uff1a</p> <ul> <li><code>ESC</code></li> </ul> <p>\u5b9a\u4f4d\u6587\u4ef6\u5728\u9879\u76ee\u6587\u4ef6\u6811\u4e2d\u7684\u4f4d\u7f6e\uff1a</p> <ul> <li><code>alt + f1</code></li> </ul> <p>\u5207\u6362\u7f16\u8f91\u5668Tab\uff1a</p> <ul> <li><code>alt + \u2190(left)/\u2192(right)</code></li> </ul>"}]}