{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"About Me","text":"<p> about me </p> <p>Shinn Howe Deng (\u9093\u4e16\u8c6a in simplified Chinese)</p> <p>         Hi there! I am a software engineer with a concentration in software development and work for Alibaba almost two years. I graduated from SouthWest JiaoTong University(SWJTU) and the in June 2022.       </p> <p>         I am also an enthusiastic self-learner and interested in various fields of computer science. Here are my [course notes] for all the courses that I have taken where I share my self-learning experiences and resources.        </p> <p>         For future career interests, I am particularly interested in software engineering, backend tech and etc.       </p> <p>         Contact: CV / Github / email </p>"},{"location":"Algorithm/","title":"\u7b97\u6cd5\u5b66\u4e60","text":""},{"location":"Algorithm/#_2","title":"\u672c\u7ae0\u5b66\u4e60\u5185\u5bb9","text":"<ul> <li>acwing \u6bcf\u65e5\u4e00\u9898</li> <li>leet-code\u6bcf\u65e5\u4e00\u9898</li> <li>en</li> <li>cn</li> <li>leet-code\u5468\u8d5b</li> <li>\u5b66\u4e60\u7b14\u8bb0</li> <li>acwing</li> <li>\u7075\u8336</li> <li>labuladong</li> <li>\u7b97\u6cd5\u8bad\u7ec3\u8425</li> </ul> <p>\u5b66\u4e60\u8d44\u6599\uff1a</p> <p>Main Page - Algorithms for Competitive Programming (cp-algorithms.com)</p> <p>EndlessCheng/codeforces-go: \u7b97\u6cd5\u7ade\u8d5b\u6a21\u677f\u5e93 by \u7075\u8336\u5c71\u827e\u5e9c \ud83d\udcad\ud83d\udca1\ud83c\udf88 (github.com)</p>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/","title":"\u7b97\u6cd5\u5b66\u4e60\uff1a","text":"<p>\u9761\u4e0d\u6709\u521d\u7cfb\u5217</p>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#lc-daily-problem","title":"LC Daily Problem","text":""},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1078-bigram","title":"1078. Bigram \u5206\u8bcd","text":"<p>C++\u7b80\u5355\u5206\u8bcd</p> <ul> <li>find\u51fd\u6570\u8fd4\u56de\u4e0b\u6807</li> <li>erase\u51fd\u6570\u79fb\u9664\u4ecepos\u5f00\u59cb\u7684n\u4e2a\u5b57\u7b26</li> </ul> <pre><code>class Solution {\npublic:\n    vector&lt;string&gt; findOcurrences(string text, string first, string second) {\n        vector&lt;string&gt; ans;\n\n        string delimiter = \" \";\n        text += \" \";\n\n        int pos = 0;\n        string word;\n        vector&lt;string&gt; words;\n        while ((pos = text.find(delimiter)) != string::npos) { // \u8fd9\u91cc\u4e0b\u6807\u521a\u597d\u662f\u5355\u8bcd\u7684\u957f\u5ea6\n            word = text.substr(0, pos); \n            words.push_back(word);\n            text.erase(0, pos + delimiter.length()); // \u79fb\u9664\u8be5\u5355\u8bcd\u4ee5\u53ca\u80cc\u540e\u7684\u7a7a\u683c\n        }\n\n        for (int i = 0; i &lt; words.size() - 2; i++) {\n            if (words[i]==first &amp;&amp; words[i+1]==second) {\n                ans.push_back(words[i+2]);\n            }\n        }\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1705","title":"1705. \u5403\u82f9\u679c\u7684\u6700\u5927\u6570\u76ee","text":"<p>\u5f53\u524dn\u5929\u6709\u82f9\u679c\u65f6\uff0c\u5c06\u5176\u52a0\u5165\u4f18\u5148\u961f\u5217(\u8150\u70c2\u65e5\u671f -- \u6570\u91cf)\uff0c\u5982\u679c\u5f53\u524d\u65e5\u671fday\u662f\u82f9\u679c\u7684\u8150\u70c2\u65e5\u671f\uff0c\u5c31\u5c06\u5176\u51fa\u961f\uff0c\u5426\u5219\u5f00\u59cb\u5403\u82f9\u679c\uff0c\u5982\u679c\u5f53\u524d\u5929\u7684\u82f9\u679c\u6570\u5927\u4e8e0\uff0c\u5f00\u5403\uff0c\u5982\u679c\u5403\u5b8c\u53d1\u73b0\u5f53\u524d\u5929\u82f9\u679c\u6570\u4e3a0\uff0c\u5c06\u5176\u51fa\u961f\uff0c\u540c\u65f6\u7d2f\u52a0\u5403\u5230\u7684\u82f9\u679c\u6570\uff0c\u6700\u7ec8\u4f5c\u4e3a\u7ed3\u679c\u8fd4\u56de\u3002</p> <pre><code>class Solution {\n    public int eatenApples(int[] apples, int[] days) {\n        PriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;&gt;((a, b) -&gt; a + days[a] - b - days[b]);\n        int day = 0, ret = 0, n = apples.length;\n        while (day &lt; n || !queue.isEmpty()) {\n            if (day &lt; n &amp;&amp; apples[day] != 0) {\n                queue.offer(day);\n            }\n\n            while (!queue.isEmpty() &amp;&amp; queue.peek() + days[queue.peek()] &lt;= day) {\n                queue.poll();\n            }\n\n            if (!queue.isEmpty()) {\n                apples[queue.peek()]--;\n                ret++;\n                if (apples[queue.peek()] == 0) {\n                    queue.poll();\n                }\n            }\n            day++;\n        }\n        return ret;\n    }\n}\n</code></pre> <pre><code>class Solution {\npublic:\n    int eatenApples(vector&lt;int&gt;&amp; apples, vector&lt;int&gt;&amp; days) {\n        int ans = 0;\n        int d = 0;\n\n        map&lt;int, int&gt; m; // (expire, cnt)\n\n        while (d &lt; days.size() || !m.empty()) {\n            if (d &lt; days.size()) m[days[d]+d-1] += apples[d];\n\n            // \u5c1d\u8bd5\u4ecemap\u4e2d\u53d6\u51fa\u4e00\u4e2a\u6700\u63a5\u8fd1\u8fc7\u671f\u4f46\u662f\u6ca1\u6709\u8fc7\u671f\u7684\u82f9\u679c\n            while(!m.empty()) {\n                if (m.begin()-&gt;first &lt; d || m.begin()-&gt;second == 0) m.erase(m.begin()-&gt;first);\n                else {\n                    // \u5982\u679c\u627e\u5230\u4e86 \u6211\u4eec\u5c31\u5403\u6389\u5b83\n                    ans++;\n                    // \u82f9\u679c\u6570\u8981\u51cf1\n                    m.begin()-&gt;second--;\n                    break;\n                }\n            }\n            d++;\n        }\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1154","title":"1154. \u4e00\u5e74\u4e2d\u7684\u7b2c\u51e0\u5929","text":"<pre><code>class Solution {\npublic:\n    int month_day[13] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int dayOfYear(string date) {\n        int year = stoi(date.substr(0, 4));\n        int month = stoi(date.substr(5, 2));\n        int day = stoi(date.substr(8, 2));\n\n        if (year % 400 == 0 || (year % 4 == 0 &amp;&amp; year % 100 != 0))\n            ++month_day[2];\n\n        int ans = 0;\n        for (int i = 1; i &lt; month; i++)\n            ans += month_day[i];\n        return ans + day;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#475","title":"475. \u4f9b\u6696\u5668","text":"<pre><code>class Solution {\npublic:\n    int findRadius(vector&lt;int&gt; &amp;houses, vector&lt;int&gt; &amp;heaters) {\n        int ans = 0;\n        sort(heaters.begin(), heaters.end());\n        for (int house: houses) {\n            // \u627e\u7b2c\u4e00\u4e2a\u5927\u4e8ehouse\u7684 heaters[j]\n            int j = upper_bound(heaters.begin(), heaters.end(), house) - heaters.begin();\n            // j - 1\u5373\u4e3a\u4e0b\u6807\u6700\u5927\u7684\u5c0f\u4e8ehouse\n            // j - 1 &lt;= house &lt; j\n            // ans = max(house - j + 1, j - house)\n            int i = j - 1;\n            int rightDistance = j &gt;= heaters.size() ? INT_MAX : heaters[j] - house;\n            int leftDistance = i &lt; 0 ? INT_MAX : house - heaters[i];\n            int curDistance = min(leftDistance, rightDistance);\n            ans = max(ans, curDistance);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#397","title":"397. \u6574\u6570\u66ff\u6362","text":"<ol> <li>\u9012\u5f52</li> </ol> <pre><code>class Solution {\npublic:\n    int integerReplacement(int n) {\n        if (n == 1) {\n            return 0;\n        }\n        if (n % 2 == 0) {\n            return 1 + integerReplacement(n / 2);\n        }\n        return 2 + min(integerReplacement(n / 2), integerReplacement(n / 2 + 1));\n    }\n};\n</code></pre> <ol> <li>\u8bb0\u5fc6\u5316\u641c\u7d22(\u57281\u7684\u57fa\u7840\u4e0a\u505a\u4f18\u5316) \u4f18\u5316\u5728\u6bcf\u5c42\u6700\u591a\u8ba1\u7b97\u4e24\u6b21</li> </ol> <pre><code>class Solution {\nprivate:\n    unordered_map&lt;int, int&gt; memo;\n\npublic:\n    int integerReplacement(int n) {\n        if (n == 1) {\n            return 0;\n        }\n        if (memo.count(n)) {\n            return memo[n];\n        }\n        if (n % 2 == 0) {\n            return memo[n] = 1 + integerReplacement(n / 2);\n        }\n        return memo[n] = 2 + min(integerReplacement(n / 2), integerReplacement(n / 2 + 1));\n    }\n};\n</code></pre> <p>3.\u8d2a\u5fc3</p> <ul> <li>n\u4e3a\u5076\u6570 \u9996\u5148<code>n/2</code></li> <li>n\u4e3a\u5947\u6570 \u770b <code>n%4</code><ul> <li>= 1\uff0c<code>(n - 1) / 2</code></li> <li>= 3, <code>(n + 1) / 2</code>,\u9700\u8981\u7279\u6b8a\u5904\u7406<code>n==3</code>\u7684\u60c5\u51b5\u3002</li> </ul> </li> </ul> <p></p>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#563","title":"563. \u4e8c\u53c9\u6811\u7684\u5761\u5ea6","text":"<pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int ans = 0;\n    int dfs(TreeNode* root) {\n        if (root == nullptr) return 0;\n        int left = dfs(root -&gt; left);\n        int right = dfs(root -&gt; right);\n        ans += abs(left - right);\n        return left + right + root -&gt; val; // cal\u51fd\u6570\u8fd4\u56de\u503c\u5b9a\u4e49\u4e3a\u8fd4\u56de\u5305\u542broot\u503c\u8282\u70b9\u5f97\u5761\u5ea6 \u4f46\u662f\u4e0d\u5f71\u54cdleft - right\n    }\n    int findTilt(TreeNode* root) {\n        cal(root);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#_2","title":"\u7b97\u6cd5\u5b66\u4e60\uff1a","text":""},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#318","title":"318. \u6700\u5927\u5355\u8bcd\u957f\u5ea6\u4e58\u79ef","text":"<p>\u5148\u6309\u7167\u957f\u5ea6\u964d\u5e8f\u6392\u5e8f \u904d\u5386\u7edf\u8ba1 \u5982\u4f55\u5408\u9002\u76f4\u63a5break\u5373\u53ef</p> <pre><code>class Solution {\npublic:\n    static bool cmp(string a, string b) {\n        return a.length() &gt; b.length();\n    }\n    int maxProduct(vector&lt;string&gt;&amp; words) {\n        int len = words.size();\n        int ans = 0;\n        sort(words.begin(), words.end(), cmp);\n        for (int i = 0; i &lt; len; i++) {\n            //cout &lt;&lt; words[i] &lt;&lt; endl;\n            vector&lt;int&gt; c(26, 0);\n            for (int j = 0; j &lt; words[i].length();j++) {\n                c[words[i][j] - 'a']++;\n            }\n            for (int j = i + 1; j &lt; len; j++) {\n                int flag = 0;\n                for(int k = 0; k &lt; words[j].length(); k++) {\n                    if (c[words[j][k] - 'a'] != 0) {\n                        flag = 1;\n                        break;\n                    }\n                }\n                if (!flag) {\n                    ans = max(ans, (int)words[i].length() * (int)words[j].length());\n                    break;\n                }\n\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u5b98\u65b9\u9898\u89e3\uff1a\u752832\u4f4d\u6574\u6570\u6765\u7edf\u8ba1 \u901a\u8fc7\u4f4d\u8fd0\u7b97\u6765\u5224\u65ad\u4e24\u4e2a\u96c6\u5408\u5b58\u5728\u76f8\u4ea4\u7684\u5730\u65b9\u3002</p> <pre><code>class Solution {\npublic:\n    int maxProduct(vector&lt;string&gt;&amp; words) {\n        int length = words.size();\n        vector&lt;int&gt; masks(length);\n        for (int i = 0; i &lt; length; i++) {\n            string word = words[i];\n            int wordLength = word.size();\n            for (int j = 0; j &lt; wordLength; j++) {\n                masks[i] |= 1 &lt;&lt; (word[j] - 'a'); // 32\u4f4d\u8868\u793a\n            }\n        }\n        int maxProd = 0;\n        for (int i = 0; i &lt; length; i++) {\n            for (int j = i + 1; j &lt; length; j++) {\n                if ((masks[i] &amp; masks[j]) == 0) { // \u4f4d\u8fd0\u7b97\u7edf\u8ba1\n                    maxProd = max(maxProd, int(words[i].size() * words[j].size()));\n                }\n            }\n        }\n        return maxProd;\n    }\n};\n</code></pre> <ol> <li>\u5b98\u65b9\u9898\u89e3</li> <li>\u6211\u7684\u4f18\u5316\u8fc7\u540e\u7684\u7b97\u6cd5</li> <li>\u6ca1\u6709\u4f18\u5316\u7684\u76f4\u63a5\u904d\u5386</li> </ol> <p></p>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#495","title":"495. \u63d0\u83ab\u653b\u51fb","text":"<pre><code>class Solution {\npublic:\n    int findPoisonedDuration(vector&lt;int&gt;&amp; timeSeries, int duration) {\n        int ans = duration;\n        for (int i = 0; i &lt; timeSeries.size() - 1; i++) {\n            if (timeSeries[i] + duration &gt;= timeSeries[i + 1]) ans += timeSeries[i + 1] - timeSeries[i];\n            else ans += duration;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#299","title":"299. \u731c\u6570\u5b57\u6e38\u620f","text":"<p>\u5b57\u7b26\u4e32\u6a21\u62df</p> <pre><code>// \u6211\u7684\u9898\u89e3 \u5dee\u4e0d\u90fd\u7684\u601d\u8def\nclass Solution {\npublic:\n    string getHint(string secret, string guess) {\n        string ans = \"\";\n        int bit[10], bit2[10];\n        memset(bit, 0, sizeof bit);\n        memset(bit2, 0, sizeof bit2);\n        int cnt1 = 0, cnt2 = 0;\n        for (int i = 0; i &lt; secret.size(); i++) {\n            if (secret[i] == guess[i]) cnt1++;\n            bit[secret[i] - '0'] ++;\n        }\n        ans += to_string(cnt1) + \"A\";\n        for (int i = 0; i &lt; guess.size(); i++) {\n            if (secret[i] == guess[i]) {\n                bit[secret[i] - '0'] --;\n                continue;\n            }\n            bit2[guess[i] - '0']++;\n        }\n        for (int i = 0; i &lt; 10; i++) {\n            cnt2 += min(bit2[i], bit[i]);\n        }\n        ans += to_string(cnt2) + \"B\";\n        return ans;\n    }\n};\n</code></pre> <pre><code>// \u5b98\u65b9\u9898\u89e3 \u66f4\u52a0\u7b80\u5355\u660e\u4e86\nclass Solution {\npublic:\n    string getHint(string secret, string guess) {\n        int bulls = 0;\n        vector&lt;int&gt; cntS(10), cntG(10);\n        for (int i = 0; i &lt; secret.length(); ++i) {\n            if (secret[i] == guess[i]) {\n                ++bulls;\n            } else {\n                ++cntS[secret[i] - '0'];\n                ++cntG[guess[i] - '0'];\n            }\n        }\n        int cows = 0;\n        for (int i = 0; i &lt; 10; ++i) {\n            cows += min(cntS[i], cntG[i]);\n        }\n        return to_string(bulls) + \"A\" + to_string(cows) + \"B\";\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1218","title":"1218. \u6700\u957f\u5b9a\u5dee\u5b50\u5e8f\u5217","text":"<p>\u7ebf\u6027DP\uff1a</p> <p>dp[arr[i]]\u8868\u793a\u4ee5arr[i]\u7ed3\u5c3e\u7684\u5b50\u5e8f\u5217\u7684\u6700\u5927\u957f\u5ea6</p> <p>\u90a3\u4e48\u8f6c\u79fb\u65b9\u7a0b\u4e3a\uff1a<code>dp[arr[i]] = dp[arr[i] - d] + 1</code></p> <pre><code>class Solution {\npublic:\n    unordered_map&lt;int, int&gt; dp;\n    int longestSubsequence(vector&lt;int&gt;&amp; arr, int difference) {\n        int ans = 0;\n        for (auto &amp;it : arr) {\n            dp[it] = dp[it - difference] + 1;\n            ans = max(ans, dp[it]);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#869-2-20211028","title":"869. \u91cd\u65b0\u6392\u5e8f\u5f97\u5230 2 \u7684\u5e42\uff082021/10/28\uff09","text":"<p><code>string cnt(10, 0);</code></p> <p><code>c++ \u7684lamda\u8868\u8fbe\u5f0f</code></p> <pre><code>string countDigits(int n) {\n    string cnt(10, 0);\n    while (n) {\n        ++cnt[n % 10];\n        n /= 10;\n    }\n    return cnt;\n}\n\nunordered_set&lt;string&gt; powerOf2Digits;\n\nint init = []() {\n    for (int n = 1; n &lt;= 1e9; n &lt;&lt;= 1) {\n        powerOf2Digits.insert(countDigits(n));\n    }\n    return 0;\n}();\n\nclass Solution {\npublic:\n    bool reorderedPowerOf2(int n) {\n        return powerOf2Digits.count(countDigits(n));\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#496-i20211026","title":"496. \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 I\uff082021/10/26\uff09","text":"<p>\u5355\u8c03\u6808\uff1a\u4ece\u540e\u5f80\u524d\u6309\u7167\u5e95\u5230\u9876\u9012\u51cf\u7684\u987a\u5e8f\u5b58\u653e</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; nextGreaterElement(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        unordered_map&lt;int,int&gt; hashmap;\n        stack&lt;int&gt; st;\n        for (int i = nums2.size() - 1; i &gt;= 0; --i) {\n            int num = nums2[i];\n            while (!st.empty() &amp;&amp; num &gt;= st.top()) {\n                st.pop();\n            }\n            hashmap[num] = st.empty() ? -1 : st.top();\n            st.push(num);\n        }\n        vector&lt;int&gt; res(nums1.size());\n        for (int i = 0; i &lt; nums1.size(); ++i) {\n            res[i] = hashmap[nums1[i]];\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#240-ii20211025","title":"240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II(2021/10/25)","text":"<pre><code>class Solution {\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n        int m = matrix.size(), n = matrix[0].size();\n        int x = 0, y = n - 1;\n        while (x &lt; m &amp;&amp; y &gt;= 0) {\n            if (matrix[x][y] == target) {\n                return true;\n            }\n            if (matrix[x][y] &gt; target) {\n                --y; // \u5217\u6570\u5de6\u79fb\u52a8 \u56e0\u4e3a\u5f53\u524d\u5217\u7684\u503c\u90fd\u6bd4target\u5927\n            }\n            else {\n                ++x; // \u884c\u6570\u4e0b\u4e00 \u56e0\u4e3a\u5f53\u524d\u884c\u90fd\u6bd4target\u5c0f\n            }\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#5908","title":"5908. \u7edf\u8ba1\u6700\u9ad8\u5206\u7684\u8282\u70b9\u6570\u76ee","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; child;\n    vector&lt;int&gt; childTreeNums;\n    long long ans = INT_MIN;\n    int len, sum, ret = 0;\n    int countHighestScoreNodes(vector&lt;int&gt;&amp; parents) {\n        len = parents.size();\n        child = vector&lt;vector&lt;int&gt;&gt;(len);\n        childTreeNums = vector&lt;int&gt;(len,0);\n        //\u4fdd\u5b58\u5b69\u5b50\u8282\u70b9\n        for(int i = 0; i &lt; len; ++i) \n            if(parents[i] != -1) \n                child[parents[i]].push_back(i);\n        dfs(0);\n        //\u8282\u70b9\u603b\u6570\n        sum = childTreeNums[0];\n        //\u83b7\u5f97\u7b49\u4e8e\u6700\u5927\u503c\u7684\u6700\u5927\u6570\u76ee\n        for(int i = 0; i &lt; len; i++) {\n            long long temp = getScore(i);\n            if(temp &gt; ans){\n                ret = 1;\n                ans = temp;\n            }else if(temp == ans) ret++;\n        } \n        return ret;\n    }\n\n    //\u83b7\u5f97\u6240\u6709\u5b50\u6811\u7684\u503c\n    int dfs(int root){\n        if(not child[root].size()) return (childTreeNums[root] = 1);\n        for(int i = 0; i &lt; child[root].size(); i++) childTreeNums[root] += dfs(child[root][i]);\n        return ++childTreeNums[root];\n    }\n\n    //\u5f97\u51fa\u5220\u53bbitem\u8282\u70b9\u7684\u5206\u6570\uff0c\u6ce8\u610f\u8981\u5f00Long long\n    long long getScore(int item){\n        long long score = 1;\n        score = childTreeNums[0] - childTreeNums[item] == 0 ? 1 : childTreeNums[0] - childTreeNums[item];\n        for(int i = 0; i &lt; child[item].size(); i++) score *= childTreeNums[child[item][i]];\n        return score;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#638","title":"638. \u5927\u793c\u5305","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; needs_;\n    vector&lt;int&gt; price_;\n    vector&lt;vector&lt;int&gt; &gt; special_;\n    int n;\n    map&lt;vector&lt;int&gt;, int&gt; dp;\n    int shoppingOffers(vector&lt;int&gt;&amp; price, vector&lt;vector&lt;int&gt;&gt;&amp; special, vector&lt;int&gt;&amp; needs) {\n        price_ = price;\n        special_ = special;\n        n = needs.size();\n        return dfs(needs);\n    }\n\n    // \u8bb0\u5fc6\u5316\u641c\u7d22 \u51fd\u6570\n    int dfs(vector&lt;int&gt; needs) {\n        if (dp.count(needs) != 0)\n            return dp[needs];\n\n        int Min = 0;\n        for (int i = 0; i &lt; needs.size(); i++)\n            Min += needs[i] * price_[i]; // \u8ba1\u7b97\u4e0d\u7528\u5927\u793c\u5305\u7684\u4ef7\u94b1\n\n        for (int i = 0; i &lt; special_.size(); i++) {\n            vector&lt;int&gt; nextNeeds = needs; // \u6b64\u5904\u4e0d\u7528\u5f15\u7528 \u56e0\u4e3a\u6709\u5faa\u73af \u8981\u6df1\u641c\n            bool flag = true; // \u662f\u5426\u8d85\u51fa\u6570\u91cf\n            // \u8ba1\u7b97\u7b2ci\u4e2a\u5927\u793c\u5305\n            for (int j = 0; j &lt; n; j++) {\n                if (special_[i][j] &gt; nextNeeds[j])\n                    flag = false;\n                nextNeeds[j] -= special_[i][j];\n            }\n            if (!flag)\n                continue; // continue\u8868\u793a\u4e0d\u8ba1\u7b97\u672c\u6b21\u5927\u793c\u5305 \n\n            Min = min(Min, dfs(nextNeeds) + special_[i][n]);\n        }\n        return dp[needs] = Min; // \u7b49\u4ef7\u4e8ereturn dp[needs]\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#492","title":"492. \u6784\u9020\u77e9\u5f62","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; constructRectangle(int area) {\n        int w = sqrt(1.0 * area);\n        while (area % w) {\n            --w;\n        }\n        return {area / w, w};\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#229-ii","title":"229. \u6c42\u4f17\u6570 II","text":"<p>\u6469\u5c14\u6295\u7968\uff1a\u89e3\u51b3\u7684\u95ee\u9898\u662f\u5982\u4f55\u5728\u4efb\u610f\u591a\u7684\u5019\u9009\u4eba\u4e2d\uff0c\u9009\u51fa\u7968\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u90a3\u4e2a\u4eba\u3002\u6ce8\u610f\uff0c\u662f\u8d85\u51fa\u4e00\u534a\u7968\u6570\u7684\u90a3\u4e2a\u4eba\u3002</p> <p>\u4e24\u5e45\u52a8\u753b\u6f14\u793a\u6469\u5c14\u6295\u7968\u6cd5\uff0c\u6700\u76f4\u89c2\u7684\u7406\u89e3\u65b9\u5f0f - \u6c42\u4f17\u6570 II - \u529b\u6263\uff08LeetCode\uff09 (leetcode-cn.com)</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; majorityElement(int[] nums) {\n        // \u521b\u5efa\u8fd4\u56de\u503c\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        if (nums == null || nums.length == 0) return res;\n        // \u521d\u59cb\u5316\u4e24\u4e2a\u5019\u9009\u4ebacandidate\uff0c\u548c\u4ed6\u4eec\u7684\u8ba1\u7968\n        int cand1 = nums[0], count1 = 0;\n        int cand2 = nums[0], count2 = 0;\n\n        // \u6469\u5c14\u6295\u7968\u6cd5\uff0c\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff1a\u914d\u5bf9\u9636\u6bb5\u548c\u8ba1\u6570\u9636\u6bb5\n        // \u914d\u5bf9\u9636\u6bb5\n        for (int num : nums) {\n            // \u6295\u7968\n            if (cand1 == num) {\n                count1++;\n                continue;\n            }\n            if (cand2 == num) {\n                count2++;\n                continue;\n            }\n\n            // \u7b2c1\u4e2a\u5019\u9009\u4eba\u914d\u5bf9\n            if (count1 == 0) {\n                cand1 = num;\n                count1++;\n                continue;\n            }\n            // \u7b2c2\u4e2a\u5019\u9009\u4eba\u914d\u5bf9\n            if (count2 == 0) {\n                cand2 = num;\n                count2++;\n                continue;\n            }\n\n            count1--;\n            count2--;\n        }\n\n        // \u8ba1\u6570\u9636\u6bb5\n        // \u627e\u5230\u4e86\u4e24\u4e2a\u5019\u9009\u4eba\u4e4b\u540e\uff0c\u9700\u8981\u786e\u5b9a\u7968\u6570\u662f\u5426\u6ee1\u8db3\u5927\u4e8e N/3\n        count1 = 0;\n        count2 = 0;\n        for (int num : nums) {\n            if (cand1 == num) count1++;\n            else if (cand2 == num) count2++;\n        }\n\n        if (count1 &gt; nums.length / 3) res.add(cand1);\n        if (count2 &gt; nums.length / 3) res.add(cand2);\n\n        return res;\n    }\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#66","title":"66. \u52a0\u4e00","text":"<p>\u627e\u5230\u7b2c\u4e00\u4e2a\u975e9\u7684\u6570\u5b57</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; plusOne(vector&lt;int&gt;&amp; digits) {\n        //vector&lt;int&gt; ans;\n        int len = digits.size();\n        if (len == 1 &amp;&amp; digits[0] == 9) return{1, 0};\n        if (digits[len - 1] + 1 == 10) {\n            int i = len - 1;\n            digits[len - 1] += 1;\n            while (i &gt;= 1 &amp;&amp; digits[i] == 10) {\n                digits[i] = 0;\n                digits[i - 1] += 1;\n                i--;\n            }\n            if (i == 0 &amp;&amp; digits[0] == 10) {\n                digits[0] = 0;\n                digits.insert(digits.begin(), 1);\n            }\n        } else {\n            digits[len - 1] += 1;\n\n        }\n        return digits;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; plusOne(vector&lt;int&gt;&amp; digits) {\n        for (int i = digits.size() - 1; i &gt;= 0; i--) {\n            digits[i]++;\n            if (digits[i] &lt;= 9) return digits;\n            digits[i] = 0;\n        }\n\n        digits.insert(digits.begin(), 1);\n        return digits;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#453","title":"453. \u6700\u5c0f\u64cd\u4f5c\u6b21\u6570\u4f7f\u6570\u7ec4\u5143\u7d20\u76f8\u7b49","text":"<p>\u5bf9 n - 1\u505a\u52a0\u4e00\u64cd\u4f5c \u76f8\u5f53\u4e8e\u5bf9\u67d0\u4e2a\u6570\u505a-1\u64cd\u4f5c\uff0c\u6240\u4ee5\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u5c06\u5176\u5b83\u6570\u8f6c\u4e3a\u6700\u5c0f\u503c\u7684\u6b21\u6570</p> <pre><code>class Solution {\npublic:\n    int minMoves(vector&lt;int&gt;&amp; nums) {\n        int minNum = *min_element(nums.begin(),nums.end());\n        int res = 0;\n        for (int num : nums) {\n            res += num - minNum;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#211-","title":"211. \u6dfb\u52a0\u4e0e\u641c\u7d22\u5355\u8bcd - \u6570\u636e\u7ed3\u6784\u8bbe\u8ba1","text":"<p>\u6876\u7684\u601d\u60f3\uff1a\u5c06\u957f\u5ea6\u76f8\u540c\u7684word\u5b58\u653e\u8d77\u6765\u3002</p> <pre><code>class WordDictionary {\npublic:\n    unordered_map&lt;int, vector&lt;string&gt; &gt; bucket;\n    unordered_set&lt;string&gt; data;\n    WordDictionary() {\n\n    }\n\n    void addWord(string word) {\n        data.insert(word);\n        bucket[word.size()].push_back(word);\n    }\n\n    bool cmp(string word, string target) {\n        if (word.size() != target.size()) return false;\n\n        for (int i = 0; i &lt; word.size(); i++) {\n            if (word[i] == target[i] || word[i] == '.') {\n\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    bool search(string word) {\n        if (data.find(word) != data.end()) {\n            return true;\n        } else {\n            int len = word.size();\n            vector&lt;string&gt; &amp;tmp = bucket[len];\n\n            for (int i = 0; i &lt; tmp.size(); i++) {\n                if (cmp(word, tmp[i])) return true;\n            }\n        }\n        return false;\n    }\n};\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary* obj = new WordDictionary();\n * obj-&gt;addWord(word);\n * bool param_2 = obj-&gt;search(word);\n */\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#476","title":"476. \u6570\u5b57\u7684\u8865\u6570","text":"<p>101 + 010 = 111</p> <pre><code>class Solution {\npublic:\n    int findComplement(int num) {\n        long sum = 2;\n        for (int i = 31; i &gt;= 0; i--) {\n            if ((num &gt;&gt; i) &amp; 1) {\n                sum = (sum &lt;&lt; i) - 1;\n                break;\n            }\n        }\n        return sum - num;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#230-k","title":"230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2cK\u5c0f\u7684\u5143\u7d20","text":"<p>\u65b9\u6cd5\u4e00\uff1a\u524d\u5e8f\u904d\u5386+\u5c0f\u9876\u5806</p> <p>\u65b9\u6cd5\u4e8c\uff1a\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u6709\u5e8f\u5e8f\u5217 \u8fd4\u56denums[k-1]\u5373\u53ef</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; min_heap;\n    void pre(TreeNode *root , int k) {\n        if (!root) return;\n        int val = - root -&gt; val; // \u56e0\u4e3a\u662f\u6c42\u7b2ck\u5c0f \u6240\u4ee5\u53d6\u53cd \u6c42\u7b2cK\u5927\u5373\u53ef\n        if (min_heap.size() &lt; k) {\n            min_heap.push(val);\n        } else {\n            if (min_heap.top() &lt; val) { // \u6808\u9876\u5143\u7d20 \u6bd4\u5f53\u524d\u5806\u4e2d\u6700\u5c0f\u503c\u5927 \u6240\u4ee5\u63d2\u5165\n                min_heap.pop();\n                min_heap.push(val);\n            }\n        }\n        pre(root -&gt; left, k);\n        pre(root -&gt; right, k);\n    }\n    int kthSmallest(TreeNode* root, int k) {\n\n        pre(root, k);\n        return -min_heap.top();\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; num;\n    int kthSmallest(TreeNode* root, int k) {\n        dfs(root);\n        return num[k - 1];\n    }\n    void dfs(TreeNode *node) {\n        if (node-&gt;left != NULL) \n            dfs(node-&gt;left);\n\n        num.push_back(node-&gt;val);\n\n        if (node-&gt;right != NULL) \n            dfs(node-&gt;right);\n\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#38","title":"38. \u5916\u89c2\u6570\u5217","text":"<p>\u65b9\u6cd5\u4e00\uff1a\u904d\u5386\u751f\u6210 \u6bcf\u6b21\u7edf\u8ba1\u4e0a\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u8fde\u7eed\u6570\u5b57\u4e2a\u6570<code>(3)1(2)2(1)3(3)4(1)5(3)6</code>=<code>312213341536</code></p> <p>\u65b9\u6cd5\u4e8c\uff1a\u6253\u8868\uff0c\u56e0\u4e3a\u6570\u5b57\u8303\u56f4\u53ea\u670930\u4e2a</p> <pre><code>class Solution {\npublic:\n    string countAndSay(int n) {\n        string prev = \"1\";\n        for (int i = 2; i &lt;= n; ++i) {\n            string curr = \"\";\n            int start = 0;\n            int pos = 0;\n\n            while (pos &lt; prev.size()) {\n                while (pos &lt; prev.size() &amp;&amp; prev[pos] == prev[start]) {\n                    pos++;\n                }\n                curr += to_string(pos - start) + prev[start];\n                start = pos;\n            }\n            prev = curr;\n        }\n\n        return prev;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    string countAndSay(int n) {\n        vector&lt;string&gt; arr = \n        {\nn        };\n        return arr[n];        \n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    string countAndSay(int n) {\n        if (n == 1) {\n            return \"1\";\n        }\n        string before = countAndSay(n - 1);\n        string res;\n        char cur = before[0];\n        int count = 1;\n        for (int i = 1; i &lt; before.size(); ++i) {\n            if (before[i] != cur) {\n                res += to_string(count) + cur;\n                cur = before[i];\n                count = 0;\n            }\n            count ++;\n        }\n        res += to_string(count) + cur;\n        return res;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#offer-ii-069","title":"\u5251\u6307 Offer II 069. \u5c71\u5cf0\u6570\u7ec4\u7684\u9876\u90e8","text":"<p>\u4e8c\u5206\u5904\u7406</p> <pre><code>class Solution {\npublic:\n    int peakIndexInMountainArray(vector&lt;int&gt;&amp; arr) {\n        if (arr.size() == 3)\n            return 1;\n\n        int l = 1, r = arr.size() - 2;\n        while(l &lt; r) {\n            int mid = (l + r) / 2;\n            if (arr[mid] &gt; arr[mid - 1] &amp;&amp; arr[mid] &gt; arr[mid + 1]) // \u5df2\u7ecf\u662f\u9876\u5cf0\n                return mid;\n            if (arr[mid] &lt; arr[mid + 1] &amp;&amp; arr[mid] &gt; arr[mid - 1]) // \u5728\u4e0a\u5347\u9636\u6bb5 \u9700\u8981\u5c06\u5de6\u7aef\u70b9\u7f29\u5c0f\n                l = mid + 1;\n            if (arr[mid] &gt; arr[mid + 1] &amp;&amp; arr[mid] &lt; arr[mid - 1]) // \u5728\u4e0b\u964d\u9636\u6bb5 \u7f29\u5c0f\u53f3\u7aef\u70b9\n                r = mid - 1;\n        }\n        return l;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#29","title":"29. \u4e24\u6570\u76f8\u9664","text":"<p>60 / 8 = (60 - 32) / 8 + 4 = (60 - 32 -16) / 8 + 4 + 2 = (60 - 32 -16 -8) + 4 + 2 + 1 = 7</p> <pre><code>class Solution {\npublic:\n    int divide(int dividend, int divisor) {\n        if(dividend == 0) return 0;\n        if(divisor == 1) return dividend;\n        if(divisor == -1){\n            if(dividend&gt;INT_MIN) return -dividend;// \u53ea\u8981\u4e0d\u662f\u6700\u5c0f\u7684\u90a3\u4e2a\u6574\u6570\uff0c\u90fd\u662f\u76f4\u63a5\u8fd4\u56de\u76f8\u53cd\u6570\u5c31\u597d\u5566\n            return INT_MAX;// \u662f\u6700\u5c0f\u7684\u90a3\u4e2a\uff0c\u90a3\u5c31\u8fd4\u56de\u6700\u5927\u7684\u6574\u6570\u5566\n        }\n        long a = dividend;\n        long b = divisor;\n        int sign = 1; \n        if((a&gt;0&amp;&amp;b&lt;0) || (a&lt;0&amp;&amp;b&gt;0)){\n            sign = -1;\n        }\n        a = a&gt;0?a:-a;\n        b = b&gt;0?b:-b;\n        long res = div(a,b);\n        if(sign&gt;0)return res&gt;INT_MAX?INT_MAX:res;\n        return -res;\n    }\n    int div(long a, long b){  // \u4f3c\u4e4e\u7cbe\u9ad3\u548c\u96be\u70b9\u5c31\u5728\u4e8e\u4e0b\u9762\u8fd9\u51e0\u53e5\n        if(a&lt;b) return 0;\n        long count = 1;\n        long tb = b; // \u5728\u540e\u9762\u7684\u4ee3\u7801\u4e2d\u4e0d\u66f4\u65b0b\n        while((tb+tb)&lt;=a){\n            count = count + count; // \u6700\u5c0f\u89e3\u7ffb\u500d\n            tb = tb+tb; // \u5f53\u524d\u6d4b\u8bd5\u7684\u503c\u4e5f\u7ffb\u500d\n        }\n        return count + div(a-tb,b);\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#412-fizz-buzz","title":"412. Fizz Buzz","text":"<p>\u6a21\u62df\uff1a<code>emplace_back()</code>\u5728\u672b\u5c3e\u6dfb\u52a0\u5143\u7d20\uff0cC++11\u6dfb\u52a0 \u76f8\u6bd4push_back()\u6ca1\u6709\u79fb\u52a8\u590d\u5236\u8fc7\u7a0b\uff0c\u76f4\u63a5\u5728\u672b\u5c3e\u521b\u5efa\u8be5\u5143\u7d20\uff0c\u6548\u7387\u66f4\u9ad8\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;string&gt; fizzBuzz(int n) {\n        vector&lt;string&gt; answer;\n        for (int i = 1; i &lt;= n; i++) {\n            string curr;\n            if (i % 3 == 0) {\n                curr\u3000+= \"Fizz\";\n            }\n            if (i % 5 == 0) {\n                curr += \"Buzz\";\n            }\n            if (curr.size() == 0) {\n                curr += to_string(i);\n            }            \n            answer.emplace_back(curr);\n        }\n        return answer;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#273","title":"273. \u6574\u6570\u8f6c\u6362\u82f1\u6587\u8868\u793a","text":"<p>\u975e\u8d1f\u6574\u6570num\u7684\u6700\u5927\u503c\u4e3a2^31 - 1\uff0c\u56e0\u6b64\u6700\u591a\u670910\u4f4d\u6570\uff0c\u5c06\u6574\u6570\u6309\u71673\u4f4d\u4e00\u7ec4\u5212\u5206\uff0c\u5c06\u6bcf\u4e00\u7ec4\u7684\u82f1\u6587\u8868\u793a\u62fc\u63a5\u4e4b\u540e\u5373\u53ef\u5f97\u5230\u6574\u6570num\u7684\u82f1\u6587\u8868\u793a\u3002</p> <p>\u6bcf\u4e00\u7ec4\u6700\u591a3\u4f4d\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u7684\u65b9\u5f0f\u5f97\u5230\u6bcf\u4e00\u7ec4\u7684\u82f1\u6587\u8868\u793a\uff0c\u6839\u636e\u6570\u5b57\u6240\u5728\u8303\u56f4\uff0c\u5177\u4f53\u505a\u6cd5\u5982\u4e0b\uff1a</p> <ul> <li>\u5c0f\u4e8e20\u53ef\u4ee5\u76f4\u63a5\u77e5\u9053\u5176\u82f1\u6587\u8868\u793a</li> <li>\u5927\u4e8e20\u4e14\u5c0f\u4e8e100\u7684\u6570\u9996\u5148\u5c06\u5341\u4f4d\u8f6c\u6362\u4f4d\u82f1\u6587\u8868\u793a\uff0c\u5bf9\u4e2a\u4f4d\u8fdb\u884c\u9012\u5f52</li> <li>\u5927\u4e8e\u7b49\u4e8e100\u7684\u6570\u9996\u5148\u5c06\u767e\u4f4d\u8f6c\u6362\u4f4d\u82f1\u6587\u8868\u793a\uff0c\u7136\u540e\u5bf9\u5176\u4f59\u90e8\u5206\u9012\u5f52\u8f6c\u6362\u6210\u82f1\u6587\u8868\u793a\u3002</li> </ul> <pre><code>class Solution {\npublic:\n    vector&lt;string&gt; singles = {\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"};\n    vector&lt;string&gt; teens = {\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"};\n    vector&lt;string&gt; tens = {\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"};\n    vector&lt;string&gt; thousands = {\"\", \"Thousand\", \"Million\", \"Billion\"};\n\n    string numberToWords(int num) {\n        if (num == 0) {\n            return \"Zero\";\n        }\n        string sb;\n        for (int i = 3, unit = 1000000000; i &gt;= 0; i--, unit /= 1000) {\n            int curNum = num / unit;\n            if (curNum != 0) {\n                num -= curNum * unit;\n                string curr;\n                recursion(curr, curNum);\n                curr = curr + thousands[i] + \" \";\n                sb = sb + curr;\n            }\n        }\n        while (sb.back() == ' ') {\n            sb.pop_back();\n        }\n        return sb;\n    }\n\n    void recursion(string &amp; curr, int num) {\n        if (num == 0) {\n            return;\n        } else if (num &lt; 10) {\n            curr = curr + singles[num] + \" \";\n        } else if (num &lt; 20) {\n            curr = curr + teens[num - 10] + \" \";\n        } else if (num &lt; 100) {\n            curr = curr + tens[num / 10] + \" \";\n            recursion(curr, num % 10);\n        } else {\n            curr = curr + singles[num / 100] + \" Hundred \";\n            recursion(curr, num % 100);\n        }\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#441","title":"441. \u6392\u5217\u786c\u5e01","text":"<p>\u6570\u5b66\u63a8\u5bfck\u7684\u8303\u56f4</p> <pre><code>class Solution {\npublic:\n    int arrangeCoins(int n) {\n        // k (k + 1)  &gt;= 2n\n        // k^2 + k &gt;= 2n\n        // k2 + k + 1/4 &gt;= 2n + 1/4\n        // (2k + 1)^2 &gt;= (8n + 1)\n        //k &gt;= (\u221a(8n + 1) - 1) / 2\n\n        return (sqrt(8 * (long)n + 1) - 1) / 2;\n\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#187-dna","title":"187. \u91cd\u590d\u7684DNA\u5e8f\u5217","text":"<ol> <li>Hash\u8868O(NL)</li> <li>\u4f4d\u8fd0\u7b97O(N),\u56db\u4e2a\u6838\u82f7\u9178\uff0c\u5bf9\u5e940,1,2,3<ol> <li>\u6ed1\u52a8\u7a97\u53e3\u5de6\u79fb <code>x = x &lt;&lt; 2</code></li> <li>\u65b0\u7684ch\u8fdb\u5165\u7a97\u53e3<code>x = x | bin[ch]</code></li> <li>\u7a97\u53e3\u5de6\u8fb9\u7684\u5b57\u7b26\u79bb\u5f00\u7a97\u53e3<code>x = x &amp; ((1 &lt;&lt; 20) - 1)</code>,\u53ea\u4fdd\u7559\u4f4e20\u4f4d\uff0c\u5176\u4f59\u4f4d\u7f6e\u96f6\u3002</li> <li>\u4ee5\u4e0a\u4e09\u6b65\u5408\u5e76\u53ef\u4ee5\u7528O(1)\u7684\u65f6\u95f4\u8ba1\u7b97\u51fa\u4e0b\u4e00\u4e2a\u5b50\u4e32\u7684\u6574\u6570\u8868\u793a<code>x= ((x &lt;&lt; 2) | bin[ch] &amp; ((1 &lt;&lt; 20) - 1)</code></li> </ol> </li> </ol> <pre><code>class Solution {\n    const int L = 10;\npublic:\n    vector&lt;string&gt; findRepeatedDnaSequences(string s) {\n        vector&lt;string&gt; ans;\n        unordered_map&lt;string, int&gt; cnt;\n        int n = s.length();\n        for (int i = 0; i &lt;= n - L; ++i) {\n            string sub = s.substr(i, L);\n            if (++cnt[sub] == 2) {\n                ans.push_back(sub);\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <pre><code>class Solution {\n    const int L = 10;\n    unordered_map&lt;char, int&gt; bin = {{'A', 0}, {'C', 1}, {'G', 2}, {'T', 3}};\npublic:\n    vector&lt;string&gt; findRepeatedDnaSequences(string s) {\n        vector&lt;string&gt; ans;\n        int n = s.length();\n        if (n &lt;= L) {\n            return ans;\n        }\n        int x = 0;\n        for (int i = 0; i &lt; L - 1; ++i) {\n            x = (x &lt;&lt; 2) | bin[s[i]];\n        }\n        unordered_map&lt;int, int&gt; cnt;\n        for (int i = 0; i &lt;= n - L; ++i) {\n            x = ((x &lt;&lt; 2) | bin[s[i + L - 1]]) &amp; ((1 &lt;&lt; (L * 2)) - 1);\n            if (++cnt[x] == 2) {\n                ans.push_back(s.substr(i, L));\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#434","title":"434. \u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd\u6570","text":"<p>\u7b80\u5355\u6a21\u62df</p> <pre><code>class Solution {\npublic:\n    int countSegments(string s) {\n        int cur = 0;\n        int len = s.length();\n        while (cur  &lt; len &amp;&amp; s[cur] == ' ') cur++;\n        int ans = 0;\n        while (cur &lt; len) {\n            while (cur &lt; len &amp;&amp; s[cur] != ' ') cur++;\n            while (cur &lt; len &amp;&amp; s[cur] == ' ') cur++;\n            ans++;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#414","title":"414. \u7b2c\u4e09\u5927\u7684\u6570","text":"<ol> <li>\u6392\u5e8f\u53d6\u7b2c\u4e09\u5927\u6570</li> <li>\u501f\u52a9\u6709\u5e8f\u96c6\u5408</li> <li>\u7ef4\u62a4\u4e09\u4e2a\u6570</li> </ol> <pre><code>class Solution {\npublic:\n    int thirdMax(vector&lt;int&gt; &amp;nums) {\n        sort(nums.begin(), nums.end(), greater&lt;&gt;());\n        for (int i = 1, diff = 1; i &lt; nums.size(); ++i) {\n            if (nums[i] != nums[i - 1] &amp;&amp; ++diff == 3) { // \u6b64\u65f6 nums[i] \u5c31\u662f\u7b2c\u4e09\u5927\u7684\u6570\n                return nums[i];\n            }\n        }\n        return nums[0];\n    }\n};\n</code></pre> <p>set\u81ea\u6392\u5e8f</p> <pre><code>class Solution {\npublic:\n    int thirdMax(vector&lt;int&gt; &amp;nums) {\n        set&lt;int&gt; s;\n        for (int num : nums) {\n            s.insert(num);\n            if (s.size() &gt; 3) {\n                s.erase(s.begin());\n            }\n        }\n        return s.size() == 3 ? *s.begin() : *s.rbegin();\n    }\n};\n</code></pre> <p>\u7ef4\u62a4\u4e09\u4e2a\u6570, \u501f\u52a9\u6307\u9488\u53ef\u4ee5\u4e0d\u7528\u8003\u8651\u6570\u5b57\u8303\u56f4\uff0c\u7528\u7a7a\u8868\u793a\u65e0\u7a77\u5c0f</p> <pre><code>class Solution {\npublic:\n    int thirdMax(vector&lt;int&gt; &amp;nums) {\n        long a = LONG_MIN, b = LONG_MIN, c = LONG_MIN;\n        for (long num : nums) {\n            if (num &gt; a) {\n                c = b;\n                b = a;\n                a = num;\n            } else if (a &gt; num &amp;&amp; num &gt; b) {\n                c = b;\n                b = num;\n            } else if (b &gt; num &amp;&amp; num &gt; c) {\n                c = num;\n            }\n        }\n        return c == LONG_MIN ? a : c;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int thirdMax(vector&lt;int&gt; &amp;nums) {\n        int *a = nullptr, *b = nullptr, *c = nullptr;\n        for (int &amp;num : nums) {\n            if (a == nullptr || num &gt; *a) {\n                c = b;\n                b = a;\n                a = &amp;num;\n            } else if (*a &gt; num &amp;&amp; (b == nullptr || num &gt; *b)) {\n                c = b;\n                b = &amp;num;\n            } else if (b != nullptr &amp;&amp; *b &gt; num &amp;&amp; (c == nullptr || num &gt; *c)) {\n                c = &amp;num;\n            }\n        }\n        return c == nullptr ? *a : *c;\n    }\n};\n</code></pre> <p>\u501f\u52a9\u5e93\u51fd\u6570: unique\u8fd4\u56de\u53bb\u91cd\u540e\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e, \u4f46\u53ea\u662f\u903b\u8f91\u5220\u9664\uff0cvector\u5927\u5c0f\u5e76\u6ca1\u6709\u53d8\u5316\u3002</p> <pre><code>class Solution {\npublic:\n    int thirdMax(vector&lt;int&gt;&amp; nums) {\n        sort(nums.begin(), nums.end(), greater&lt;int&gt;());\n        nums.erase(unique(nums.begin(), nums.end()), nums.end());\n\n        return nums.size() &lt; 3 ? nums[0] : nums[2];\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#482","title":"482. \u5bc6\u94a5\u683c\u5f0f\u5316","text":"<p>\u5b57\u7b26\u4e32\u6a21\u62df</p> <pre><code>class Solution {\npublic:\n    string licenseKeyFormatting(string s, int k) {\n        int cnt = 0;\n        string str = \"\";\n        for (int i = 0; i &lt; s.length(); i++) {\n            if (s[i] != '-') cnt++, str += s[i];\n\n        }\n        int g = cnt / k;\n        int r = cnt % k;\n        string ans = \"\";\n        for (int i = 0; i &lt; r; i++) {\n            ans += toupper(str[i]);\n        }\n        if (r &amp;&amp; cnt &gt; 1)\n            ans += \"-\";\n        for (int i = 0; i &lt; g; i++) {\n            for (int j = 0; j  &lt; k; j++) {\n                ans += toupper(str[i *k + j + r]);\n            }\n            if (i != g - 1)\n                ans += \"-\";\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#166","title":"166. \u5206\u6570\u5230\u5c0f\u6570","text":"<p>\u7528map\u5b58\u4e00\u4e0b\u5f53\u524d\u88ab\u9664\u6570\u5bf9\u5e94\u5728\u7ed3\u679c\u5c0f\u6570index\uff0c\u5982\u679c\u4e0d\u4e3a\u7a7a\u8bf4\u660e\u6709\u5faa\u73af\u8282\uff0c\u90a3\u4e48\u5c31\u505a\u5b57\u7b26\u4e32\u505a\u88c1\u526a\u3002</p> <p>1\u3001\u6570\u5b57\u6b63\u8d1f\u5904\u7406\uff1a\u90fd\u8f6c\u4e3a\u6b63\u6570</p> <p>2\u3001\u5f97\u5230\u5c0f\u6570\u524d\u7684\u6574\u6570</p> <p>3\u3001\u53d6\u4f59\u5f97\u5230\u540e\u9762\u5c0f\u6570</p> <pre><code>class Solution {\n    using ll = long long;\npublic:\n    string fractionToDecimal(int numerator, int denominator) {\n        ll n = numerator, d = denominator;\n        string ret;\n        // \u8ba1\u7b97\u6574\u6570\u90e8\u5206\n        // \u5224\u65ad\u8d1f\u6570\n        if(n * d &lt; 0) ret += \"-\";\n\n\n        ll a = n / d;\n        if(a &lt; 0) a *= -1;\n        ret += to_string(a);\n\n        if(n &lt; 0) n*= -1;\n        if(d &lt; 0) d*= -1;\n\n        // \u8ba1\u7b97\u5c0f\u6570\u90e8\u5206\n        n %= d;\n        if(n == 0) {\n            // \u65e0\u5c0f\u6570\n            return ret;\n        }\n        ret += \".\";\n        // \u8fde\u9664\n        // \u54c8\u5e0c\u8868\u8bb0\u5f55\u662f\u5426\u6709\u6570\u7ec4\u7b2c\u4e8c\u6b21\u51fa\u73b0\n        unordered_map&lt;int, int&gt; st;\n        string t;\n        int index = 0;\n        while(n &amp;&amp; !st.count(n)) {\n            st[n] = index++;\n            n *= 10;\n            t.push_back((char)(n / d + '0'));\n            n %= d;\n        }\n        if(n != 0) {\n            // \u8bf4\u660e\u51fa\u73b0\u4e86\u5faa\u73af\uff0c\u6b64\u65f6\u5bf9\u5faa\u73af\u90e8\u5206 [st[n], index] \u52a0\u62ec\u53f7\n            ret += t.substr(0, st[n]) + \"(\" + t.substr(st[n]) + \")\";\n        } else {\n            ret += t;\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#405","title":"405. \u6570\u5b57\u8f6c\u6362\u4e3a\u5341\u516d\u8fdb\u5236\u6570","text":"<p>\u56db\u4f4d\u4e00\u4f4d\u505a\u8fd0\u7b97</p> <pre><code>class Solution {\npublic:\n    string toHex(int num) {\n        if (num == 0) {\n            return \"0\";\n        }\n        string sb;\n        for (int i = 7; i &gt;= 0; i --) {\n            int val = (num &gt;&gt; (4 * i)) &amp; 0xf;// 1111\n            if (sb.length() &gt; 0 || val &gt; 0) {\n                char digit = val &lt; 10 ? (char) ('0' + val) : (char) ('a' + val - 10);\n                sb.push_back(digit);\n            }\n        }\n        return sb;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#223","title":"223. \u77e9\u5f62\u9762\u79ef","text":"<p>\u5bb9\u65a5\u539f\u7406 + x\uff0cy\u65b9\u5411\u6295\u5f71\u7b97\u9762\u79ef</p> <pre><code>class Solution {\npublic:\n    int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) {\n        int area1 = (ax2 - ax1) * (ay2 - ay1), area2 = (bx2 - bx1) * (by2 - by1);\n        int overlapWidth = min(ax2, bx2) - max(ax1, bx1), overlapHeight = min(ay2, by2) - max(ay1, by1);\n        int overlapArea = max(overlapWidth, 0) * max(overlapHeight, 0);\n        return area1 + area2 - overlapArea;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#326-3","title":"326. 3\u7684\u5e42","text":"<p>\u8bd5\u9664\u6cd5</p> <pre><code>class Solution {\npublic:\n    bool isPowerOfThree(int n) {\n        while (n &amp;&amp; n % 3 == 0) {\n            n /= 3;\n        }\n        return n == 1;\n    }\n};\n</code></pre> <p>\u572832\u4f4d\u6574\u6570\u4e2d 3\u7684\u5e42\u7684\u6700\u5927\u4e3a3^19 = 1162261467\uff0c \u53ea\u8981\u8bc1\u660en\u662f\u8be5\u503c\u7684\u7ea6\u6570\u5373\u53ef</p> <pre><code>class Solution {\npublic:\n    bool isPowerOfThree(int n) {\n        return n &gt; 0 &amp;&amp; 1162261467 % n == 0;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#58","title":"58. \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6","text":"<pre><code>class Solution {\npublic:\n    int lengthOfLastWord(string s) {\n        int len = s.size() - 1;\n        int ans = 0;\n        while (len &gt;= 0 &amp;&amp; s[len] == ' ') len--;\n        while (len &gt;= 0 &amp;&amp; s[len] != ' ') ans++, len--;\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#725","title":"725. \u5206\u9694\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;ListNode*&gt; splitListToParts(ListNode* head, int k) {\n        int len = 0;\n        ListNode* tmp = head;\n        vector&lt;ListNode*&gt;  ans;\n        while (tmp) {\n            len ++;\n            tmp = tmp -&gt; next;\n        }\n        int remain = len % k;\n        int size = len / k;\n        ListNode * start = head, *end = head;\n        for (int i = 0; i &lt; k; i++) {\n            for (int j = 0; j &lt; size - 1; j++) {\n                end = end -&gt; next;\n            }\n            if (remain) {\n                remain--;\n                if (end != nullptr &amp;&amp; end != start)\n                    end = end -&gt; next;\n                else if (end != nullptr &amp;&amp; size == 1)\n                    end = end -&gt; next;\n            }\n            ans.push_back(start);\n            if (end != nullptr) {\n                start = end -&gt; next;\n                end -&gt; next = nullptr;\n                end = start;\n            }\n\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#524","title":"524. \u901a\u8fc7\u5220\u9664\u5b57\u6bcd\u5339\u914d\u5230\u5b57\u5178\u91cc\u6700\u957f\u5355\u8bcd","text":"<pre><code>class Solution {\npublic:\n\n    bool check(string &amp;tar, string &amp;tmp) {\n        int j = 0;\n        if (tar.length() &lt; tmp.length()) return false;\n        for (int i = 0; i &lt; tmp.length(); i++) {\n            while (j &lt; tar.length() &amp;&amp; tar[j] != tmp[i]) j++;\n\n            if (j == tar.length()) return false;\n            else j++;\n        }\n        return true;\n    }\n    static bool cmp(string a, string b) {\n        if (a.length() == b.length()){\n            return a &lt; b;\n        }\n        return a.length() &gt; b.length();\n    }\n    string findLongestWord(string s, vector&lt;string&gt;&amp; dictionary) {\n        int len = dictionary.size();\n        string ans = \"\";\n        for (int i = 0; i &lt; len; i++) {\n            string str = dictionary[i];\n            if (check(s, str)) {\n                //candidater.push_back(str);\n                if (ans.length() &lt; str.length()) {\n                    ans = str;\n                } else if (ans.length() == str.length() &amp;&amp; str &lt; ans)\n                    ans = str;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    bool isSubsequence(string s, string t) {\n        // \u5224\u65ad t \u662f\u5426\u662f s \u7684\u5b50\u5e8f\u5217\n\n        int n = s.size(), m = t.size();\n\n        // \u5982\u679c t \u957f\u5ea6\u5927\u4e8e s\uff0c\u4e00\u5b9a\u4e0d\u662f\u5b50\u5e8f\u5217\n        if(m &gt; n) return false;\n\n        // \u8bb0\u5f55\u5f53\u524d s \u4e2d\u5339\u914d\u5230\u4e86\u54ea\u4e2a\u4f4d\u7f6e\n        int i = 0;\n        for(char ch : t) {\n            while(i &lt; n &amp;&amp; s[i] != ch) i++;\n            if(i &gt;= n) return false;\n\n            // \u6b64\u65f6 s[i] = ch\uff0c\u4e0b\u6b21\u8981\u4ece s[i + 1] \u5f00\u59cb\u5339\u914d\n            i++;\n        }\n\n        return true;\n    }\n\n    string findLongestWord(string s, vector&lt;string&gt;&amp; dictionary) {\n        // \u66f4\u957f\u7684\u3001\u5b57\u5178\u5e8f\u66f4\u5c0f\u7684\u6392\u5728\u524d\u9762\uff0c\u8fd9\u6837\u4e00\u65e6\u627e\u5230\uff0c\u5c31\u662f\u7ed3\u679c\n        sort(dictionary.begin(), dictionary.end(), [&amp;](string &amp;a, string &amp;b) {\n            if(a.size() == b.size()) return a &lt; b;\n            return a.size() &gt; b.size();\n        });\n\n        for(string &amp;t : dictionary) {\n            if(isSubsequence(s, t)) return t;\n        }\n\n        // \u5982\u679c\u6ca1\u627e\u5230\n        return \"\";\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#678","title":"678. \u6709\u6548\u7684\u62ec\u53f7\u5b57\u7b26\u4e32","text":"<p>\u53cc\u5411\u626b\u63cf\uff1a</p> <ul> <li>\u4ece\u5de6\u5411\u53f3\u5982\u679c\u5b58\u5728<code>)</code>\u5c31\u9700\u8981\u5c06\u5de6\u62ec\u53f7\u7684\u6570\u91cf\u51cf\u4e00\uff0c\u5426\u5219\u5176\u5b83\u60c5\u51b5+1</li> <li>\u4ece\u53f3\u5411\u5de6\u5982\u679c\u5b58\u5728<code>(</code>\u5c31\u9700\u8981\u5c06\u53f3\u62ec\u53f7\u7684\u6570\u91cf\u51cf\u4e00\uff0c\u5426\u5219\u5176\u5b83\u60c5\u51b5+1</li> <li>\u5982\u679c\u5de6\u53f3\u626b\u63cf\u90fd\u6ca1\u6709\u95ee\u9898\u7684\u8bdd\u5c31\u8bf4\u660e\u662f\u4e00\u4e2a\u6709\u6548\u7684\u5b57\u7b26\u4e32</li> </ul> <pre><code>class Solution {\npublic:\n    bool checkValidString(string s) {\n        int left = 0, right = 0, size = s.size();\n        for(int i = 0; i &lt; size; ++i)\n        {\n            left  += s[i] == ')' ? -1 : 1;              //\u4ece\u5de6\u5411\u53f3\n            right += s[size-1-i] == '(' ? -1 : 1;       //\u4ece\u53f3\u5411\u5de6\n            if(left &lt; 0 || right &lt; 0)    return false;  //\u65e0\u6548\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#600-1","title":"600. \u4e0d\u542b\u8fde\u7eed1\u7684\u975e\u8d1f\u6574\u6570","text":"<p>\u66b4\u529b\u4f1a\u8d85\u65f6</p> <p>\u53ef\u4ee5\u53bb\u6784\u9020\u8fd9\u6837\u7684\u4e00\u4e2a\u975e\u8d1f\u6574\u6570</p> <ul> <li> <p>\u5982\u679c\u524d\u4e00\u4f4d\u662f0\u5219\u4e0b\u4e00\u4f4d\u53ef\u4ee5\u662f0\u4e5f\u53ef\u4ee5\u662f1 </p> </li> <li> <p>\u5982\u679c\u524d\u4e00\u4f4d\u662f1\u5219\u4e0b\u4e00\u4f4d\u53ea\u80fd\u662f0</p> </li> </ul> <pre><code>class Solution {\npublic:\n    int ans = 0;\n    int g_n;\n    set&lt;int&gt; st;\n    int findIntegers(int n) {\n        g_n = n;\n        ans = 1;\n        dfs(1);\n        return ans;\n    }\n\n    void dfs(int cur){\n        if(cur &gt; g_n) return;\n        ans++;\n        if((cur &amp; 1)){\n            dfs(cur &lt;&lt; 1);\n        } \n        else{\n            dfs(cur &lt;&lt; 1);\n            dfs((cur &lt;&lt; 1)+1);\n        }\n        return;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int nums[32];\n    int cnt = 0;\n    const int MAX = 1e9;\n    void init() {\n        int cur = 3;\n        while (cur &lt;= MAX) {\n            nums[cnt] = cur;\n            cnt ++;\n            cur &lt;&lt;= 1;\n        }\n    }\n    bool check(int x) {\n        for (int i = 0; i &lt;cnt ;i++) {\n            if ((x &amp; nums[i]) == nums[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    int findIntegers(int n) {\n        init();\n        int ans = 0;\n        for (int i = 0; i &lt;= n; i++) {\n            if (check(i)) ans++;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1221","title":"1221. \u5206\u5272\u5e73\u8861\u5b57\u7b26\u4e32","text":"<p>\u5bf9\u4efb\u4e00\u5e73\u8861\u5b57\u7b26\u4e32\u4e2d\u7684\u6700\u77ed\u5e73\u8861\u524d\u7f00\u505a\u5207\u5206 \u5207\u5206\u540e\u7684\u5f97\u5230\u4e24\u4e2a\u5e73\u8861\u524d\u7f00\u3002</p> <pre><code>class Solution {\npublic:\n    int balancedStringSplit(string s) {\n        int ans = 0, d = 0;\n        for (char ch : s) {\n            ch == 'L' ? ++d : --d;\n            if (d == 0) {\n                ++ans;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#704","title":"704. \u4e8c\u5206\u67e5\u627e","text":"<pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int l = 0, r = nums.size();\n        int mid = (l + r) / 2;\n        while (l &lt;= r) {\n            mid = (l + r) / 2;\n            if (nums[mid] == target) {\n                return mid;\n            } else if (nums[mid] &gt; target) {\n                r = mid - 1;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return -1;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#470-rand7-rand10","title":"470. \u7528 Rand7() \u5b9e\u73b0 Rand10()","text":"<p>rand10 = rand5  * 2 + (rand2) * ( -1)</p> <pre><code>// The rand7() API is already defined for you.\n// int rand7();\n// @return a random integer in the range 1 to 7\n\nclass Solution {\npublic:\n    int rand10() {\n        int a = rand5(); \n        int b = rand2(); \n        return 2 * a + (b - 1);\n    }\n    // [1- 5]\n    int rand5() {\n        int ans = rand7();\n        while (ans &gt; 5) ans = rand7();\n        return ans;\n    }\n    // [0 , 1]\n    int rand2() {\n        int ans = rand7();\n        while (ans == 7) ans = rand7();\n        return ans % 2;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#offer-22-k","title":"\u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u8282\u70b9","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* getKthFromEnd(ListNode* head, int k) {\n        ListNode *new_head = head, *ans = head;\n        for (int i = 0; i &lt; k; i++) {\n            if (new_head)\n                new_head = new_head -&gt; next;\n        }\n\n        while (new_head) {\n            ans = ans -&gt; next;\n            new_head = new_head -&gt;next;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1109","title":"1109. \u822a\u73ed\u9884\u8ba2\u7edf\u8ba1","text":"<p>\u5dee\u5206\uff1a\u5dee\u5206\u6570\u7ec4\u5bf9\u5e94\u7684\u6982\u5ff5\u662f\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u5bf9\u4e8e\u6570\u7ec4 [1,2,2,4][1,2,2,4]\uff0c\u5176\u5dee\u5206\u6570\u7ec4\u4e3a [1,1,0,2][1,1,0,2]\uff0c\u5dee\u5206\u6570\u7ec4\u7684\u7b2c ii \u4e2a\u6570\u5373\u4e3a\u539f\u6570\u7ec4\u7684\u7b2c i-1i\u22121 \u4e2a\u5143\u7d20\u548c\u7b2c ii \u4e2a\u5143\u7d20\u7684\u5dee\u503c\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5bf9\u5dee\u5206\u6570\u7ec4\u6c42\u524d\u7f00\u548c\u5373\u53ef\u5f97\u5230\u539f\u6570\u7ec4\u3002</p> <p>\u5dee\u5206\u6570\u7ec4\u7684\u6027\u8d28\u662f\uff0c\u5f53\u6211\u4eec\u5e0c\u671b\u5bf9\u539f\u6570\u7ec4\u7684\u67d0\u4e00\u4e2a\u533a\u95f4<code>[l,r][l,r]</code>\u65bd\u52a0\u4e00\u4e2a\u589e\u91cf<code>inc</code> \u65f6\uff0c\u5dee\u5206\u6570\u7ec4 d \u5bf9\u5e94\u7684\u6539\u53d8\u662f\uff1a<code>d[l][l]</code>\u589e\u52a0 <code>inc</code>\uff0c<code>d[r+1][r+1]</code> \u51cf\u5c11 <code>inc</code></p> <p>\u6362\u4e00\u79cd\u601d\u8def\u7406\u89e3\u9898\u610f\uff0c\u5c06\u95ee\u9898\u8f6c\u6362\u4e3a\uff1a\u67d0\u516c\u4ea4\u8f66\u5171\u6709 n \u7ad9\uff0c\u7b2c i \u6761\u8bb0\u5f55 bookings[i] = [i, j, k] \u8868\u793a\u5728 i \u7ad9\u4e0a\u8f66 k \u4eba\uff0c\u4e58\u5750\u5230 j \u7ad9\uff0c\u5728 j+1 \u7ad9\u4e0b\u8f66\uff0c\u9700\u8981\u6309\u7167\u8f66\u7ad9\u987a\u5e8f\u8fd4\u56de\u6bcf\u4e00\u7ad9\u8f66\u4e0a\u7684\u4eba\u6570</p> <p>\u6839\u636e 1 \u7684\u601d\u8def\uff0c\u5b9a\u4e49 counter[] \u6570\u7ec4\u8bb0\u5f55\u6bcf\u7ad9\u7684\u4eba\u6570\u53d8\u5316\uff0ccounter[i] \u8868\u793a\u7b2c i+1 \u7ad9\u3002\u904d\u5386 bookings[]\uff1abookings[i] = [i, j, k] \u8868\u793a\u5728 i \u7ad9\u589e\u52a0 k \u4eba\u5373 counters[i-1] += k\uff0c\u5728 j+1 \u7ad9\u51cf\u5c11 k \u4eba\u5373 counters[j] -= k</p> <p>\u904d\u5386\uff08\u6574\u7406\uff09counter[] \u6570\u7ec4\uff0c\u5f97\u5230\u6bcf\u7ad9\u603b\u4eba\u6570\uff1a \u6bcf\u7ad9\u7684\u4eba\u6570\u4e3a\u524d\u4e00\u7ad9\u4eba\u6570\u52a0\u4e0a\u5f53\u524d\u4eba\u6570\u53d8\u5316 counters[i] += counters[i - 1]</p>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#165","title":"165. \u6bd4\u8f83\u7248\u672c\u53f7","text":"<p>\u5207\u5206\u5b57\u7b26\u4e32 --- java\u7248\u672c</p> <p>\u6309\u7167.\u5207\u5206\u7136\u540e\u6bd4\u8f83\u6bcf\u4e00\u8282\u7684\u5b57\u7b26\u4e32\u7684int\u503c</p> <pre><code>class Solution {\n    public int compareVersion(String version1, String version2) {\n        String[] v1 = version1.split(\"\\\\.\");\n        String[] v2 = version2.split(\"\\\\.\");\n        for (int i = 0; i &lt; v1.length || i &lt; v2.length; ++i) {\n            int x = 0, y = 0;\n            if (i &lt; v1.length) {\n                x = Integer.parseInt(v1[i]);\n            }\n            if (i &lt; v2.length) {\n                y = Integer.parseInt(v2[i]);\n            }\n            if (x &gt; y) {\n                return 1;\n            }\n            if (x &lt; y) {\n                return -1;\n            }\n        }\n        return 0;\n    }\n}\n</code></pre> <p>\u53cc\u6307\u9488C++:\u9898\u76ee\u4e2d\u63d0\u5230\u6bcf\u4e00\u8282\u7684\u7248\u672c\u53f7\u90fd\u53ef\u4ee5\u5b58\u4e0b\u6765</p> <pre><code>class Solution {\npublic:\n    int compareVersion(string version1, string version2) {\n        int n = version1.length(), m = version2.length();\n        int i = 0, j = 0;\n        while (i &lt; n || j &lt; m) {\n            int x = 0;\n            for (; i &lt; n &amp;&amp; version1[i] != '.'; ++i) {\n                x = x * 10 + version1[i] - '0';\n            }\n            ++i; // \u8df3\u8fc7\u70b9\u53f7\n            int y = 0;\n            for (; j &lt; m &amp;&amp; version2[j] != '.'; ++j) {\n                y = y * 10 + version2[j] - '0';\n            }\n            ++j; // \u8df3\u8fc7\u70b9\u53f7\n            if (x != y) {\n                return x &gt; y ? 1 : -1;\n            }\n        }\n        return 0;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1646","title":"1646. \u83b7\u53d6\u751f\u6210\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u503c","text":"<p>\u7b80\u5355\u6a21\u62df</p> <p><code>max_element(v.begin(), v.end())</code></p> <pre><code>class Solution {\npublic:\n    int getMaximumGenerated(int n) {\n        if (n == 0) {\n            return 0;\n        }\n        vector&lt;int&gt; nums(n + 1);\n        nums[1] = 1;\n        for (int i = 2; i &lt;= n; ++i) {\n            nums[i] = nums[i / 2] + i % 2 * nums[i / 2 + 1];\n        }\n        return *max_element(nums.begin(), nums.end());\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#576","title":"576. \u51fa\u754c\u7684\u8def\u5f84\u6570","text":"<p>\u6df1\u641c\u4e00\u5b9a\u4f1a\u8d85\u65f6\uff0c\u8d85\u65f6\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u91cd\u590d\u8ba1\u7b97\u4e86 \u6240\u4ee5\u9700\u8981\u4fdd\u7559\u72b6\u6001\uff1a\u5750\u6807+\u5269\u4e0b\u7684\u6b65\u6570\u5373\u53ef\u552f\u4e00\u786e\u5b9a\u662f\u76f8\u540c\u72b6\u6001\u3002</p> <pre><code>class Solution {\npublic:\n    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {\n        this-&gt;m = m;\n        this-&gt;n = n;\n        memset(dp, -1, sizeof(dp));\n        return DFS(startRow, startColumn, maxMove); //\u641c\u7d22\u4ece\u8fd9\u4e2a\u70b9\u5f00\u59cb\u6709\u591a\u5c11\u8def\u5f84\u51fa\u754c\n    }\nprivate:\n    const int M  = 1e9 + 7;\n    int m, n;\n    int dp[51][51][51];     //\u8bb0\u5fc6\u6570\u7ec4\n    long DFS(int i, int j, int d){\n        if(i &lt; 0 || i &gt;= m || j &lt; 0 || j &gt;= n) return 1;  //\u51fa\u754c\u4e86\n        if(d == 0) return 0;  //\u5df2\u7ecf\u6ca1\u6709\u6b65\u6570\u4e86\n        if(dp[i][j][d] != -1) return dp[i][j][d];  //\u5982\u679c\u4e4b\u524d\u6765\u8fc7\n        return dp[i][j][d] = (DFS(i + 1, j, d - 1) + DFS(i - 1, j, d - 1) + DFS(i, j + 1, d - 1) + DFS(i, j - 1, d - 1)) % M;   //\u5982\u679c\u4e4b\u524d\u6ca1\u6765\u8fc7\n    }\n};\n\\\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1583","title":"1583. \u7edf\u8ba1\u4e0d\u5f00\u5fc3\u7684\u670b\u53cb","text":"<p>map\u9884\u5904\u7406 + set\u53bb\u91cd</p> <pre><code>class Solution {\npublic:\n    set&lt;int&gt; s;\n    bool func(int x, int y, int u, int v,  map&lt;pair&lt;int, int&gt;, int&gt; &amp;m) {\n        if (s.find(x) == s.end() &amp;&amp; m[{x, u}] &gt; m[{x, y}] &amp;&amp; m[{u, x}] &gt; m[{u, v}]) {\n            s.insert(x);\n            return  1;\n        }\n        return 0;\n    }\n    map&lt;pair&lt;int, int&gt;, int&gt; init(vector&lt;vector&lt;int&gt;&gt;&amp; p) {\n        map&lt;pair&lt;int, int&gt;, int&gt; ret;\n        int n = p.size();\n        for (int i = 0; i &lt; n ;i++) {\n            for (int j = 0; j &lt; n - 1; j++) {\n                ret[{i, p[i][j]}] = n - 1 - j;\n            }\n        }\n        return ret;\n    }\n    int unhappyFriends(int n, vector&lt;vector&lt;int&gt;&gt;&amp; p, vector&lt;vector&lt;int&gt;&gt;&amp; pairs) {\n        int ans = 0;\n        map&lt;pair&lt;int, int&gt;, int&gt; m = init(p);\n        int np = pairs.size();\n        for (int i = 0; i &lt; np; i++) {\n            int x = pairs[i][0], y = pairs[i][1];\n            for (int j = 0; j &lt; np; j++) {\n                int u = pairs[j][0], v = pairs[j][1];\n                ans += func(x, y, u, v , m);\n                ans += func(y, x, u, v, m);\n                ans += func(x, y, v, u, m);\n                ans += func(y, x, v, u, m);\n            }\n        }\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1337-k","title":"1337. \u77e9\u9635\u4e2d\u6218\u6597\u529b\u6700\u5f31\u7684 K \u884c","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; kWeakestRows(vector&lt;vector&lt;int&gt;&gt;&amp; mat, int k) {\n        vector&lt;pair&lt;int, int&gt; &gt; vp;\n        vector&lt;int&gt; ans(k, 0);\n        for (int i = 0; i &lt; mat.size(); i++) {\n            int cnt = 0;\n            for (int j = 0; j &lt; mat[i].size(); j++) {\n                if (mat[i][j] == 0) {\n                    break;\n                } else {\n                    cnt++;\n                }\n            }\n            pair&lt;int, int&gt; a = {cnt, i};\n            vp.push_back(a);\n        }\n        sort(vp.begin(), vp.end());\n        for (int i = 0; i &lt; k; i++) {\n            ans[i] = vp[i].second;\n        }\n        return ans;\n    }\n};\n</code></pre> <p>pair\u7528\u6cd5\uff1a<code>pair&lt;int, int&gt; p(V1, V2)</code></p>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#374","title":"374. \u731c\u6570\u5b57\u5927\u5c0f","text":"<p>\u4e8c\u5206\u67e5\u627e</p> <pre><code>/** \n * Forward declaration of guess API.\n * @param  num   your guess\n * @return       -1 if num is lower than the guess number\n *                1 if num is higher than the guess number\n *               otherwise return 0\n * int guess(int num);\n */\n\nclass Solution {\npublic:\n    int guessNumber(int n) {\n        long left = 0;\n        long right = n;\n        long mid = right / 2;\n        while (guess(mid) != 0) {\n            if (guess(mid) == -1) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n            mid = (left + right) / 2;\n        }\n        return mid;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#203","title":"203. \u79fb\u9664\u94fe\u8868\u5143\u7d20","text":"<p>\u53cc\u6307\u9488 \u9884\u5904\u7406\u5934\u90e8</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeElements(ListNode* head, int val) {\n\n        ListNode * last = head;\n        // \u7279\u6b8a\u5904\u7406\u5934\u90e8 \u627e\u5230\u7b2c\u4e00\u4e2a\u4e0d\u662fval \u53ef\u4ee5\u4f5c\u4e3a\u524d\u9a71\u7ed3\u70b9\u7684\u503c\n        while (last &amp;&amp; last -&gt; val == val) {\n            last = last -&gt; next;\n        }\n        // \u8bb0\u5f55\u524d\u9a71\u7ed3\u70b9\n        ListNode * pre = last;\n        head = pre;  // \u8bb0\u5f55\u5934\u8282\u70b9\n        // \u5c06last\u6307\u9488\u540e\u79fb\n        if (last) last = last -&gt; next;\n        while (last != nullptr) {\n\n            if (last -&gt; val == val)  \n                pre -&gt; next = last -&gt; next; // pre\u8df3\u8fc7last\u7ed3\u70b9 \u5c06last\u7ed3\u70b9\u5220\u9664\n            else \n                pre = last; // \u5f53last\u4e0d\u4e3aval \u65f6\u624d\u79fb\u52a8pre\n\n\n            // last \u6bcf\u6b21\u90fd\u8981\u79fb\u52a8\n            last = last -&gt; next;\n        }\n        return head;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#160","title":"160. \u76f8\u4ea4\u94fe\u8868","text":"<p>\u54c8\u5e0c\u96c6\u5408\u5b58\u653e\u4e00\u6761\u94fe\u8def\u5b8c\u6574\u8def\u5f84\uff0c\u68c0\u67e5\u7b2c\u4e8c\u6761\u94fe\u8def\u662f\u5426\u6709\u91cd\u590d\u7ed3\u70b9</p> <p>\u53cc\u6307\u9488\uff1a\u601d\u60f3\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6\u4e0d\u540c\uff0c\u800c\u6307\u9488\u7684\u6b65\u8c03\u662f\u4e00\u81f4\u7684\uff0c\u90a3\u4e48\u5728\u4e00\u6b21\u4ea4\u6362\u904d\u5386\u540e\uff0c\u5c31\u4f1a\u76f8\u9047\u3002</p> <p></p> <p>\u8bc1\u660e\uff1aA\u7684\u957f\u5ea6\u4e3a<code>lena</code>\uff0c B\u7684\u957f\u5ea6\u4e3a<code>lenb</code>\u3002\u5047\u8bbe\u5728\u7b2c\u4e00\u6b21\u904d\u5386\u4e4b\u540eA\u9996\u5148\u8fbe\u5230<code>nullptr</code>,\u540e\u4eceB\u5f00\u59cb\u7ee7\u7eed\u904d\u5386\uff0c\u5f53B\u7ed3\u675f\u4e4b\u540e\uff0cA\u5728B\u94fe\u8def\u4e0a\u591a\u8d70\u7684\u6b65\u6570\u4e3alenb - lena\u4e3a1(\u4e0a\u56fe\u4e3a1)\uff0c\u6b64\u65f6\u4e8c\u8005\u540c\u6b65\u4f4d\u7f6e\uff0c\u5373\u4ece\u6b64\u65f6\u5f00\u59cb\u4e8c\u8005\u540e\u7eed\u904d\u5386\u7684\u5143\u7d20\u4e2a\u6570\u5c31\u76f8\u540c\u4e86\uff0c\u6545\u518d\u6309\u7167\u76f8\u540c\u7684\u6b65\u8c03\u8d70\u7684\u8bdd\uff0c\u5982\u679c\u5b58\u5728A = B\uff0c\u5c31\u8bf4\u660e\u6709\u76f8\u4ea4\u7684\u4ea4\u70b9\u3002</p> <pre><code>class Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        if (headA == nullptr || headB == nullptr) {\n            return nullptr;\n        }\n        ListNode *pA = headA, *pB = headB;\n        while (pA != pB) {\n            pA = pA == nullptr ? headB : pA-&gt;next;\n            pB = pB == nullptr ? headA : pB-&gt;next;\n        }\n        return pA;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        unordered_set&lt;ListNode *&gt; record;\n        while (headA != nullptr) {\n            record.insert(headA);\n            headA = headA -&gt; next;\n        }\n        while (headB != nullptr) {\n            if (record.count(headB)) {\n                return headB;\n            }\n            headB = headB -&gt; next;\n        }\n        return nullptr;\n\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#525","title":"525. \u8fde\u7eed\u6570\u7ec4\u3001","text":"<p>\u524d\u7f00\u548c+\u54c8\u5e0c+\u6570\u5b66\u63a8\u5bfc</p> <p></p> <pre><code>class Solution {\npublic:\n    int findMaxLength(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if(n &lt;= 1) return 0;\n        //[j, i]\n        //2(pre[i+1] - pre[j]) = i+1 -j\n        //2pre[i+1] - (i+1) = 2pre[j] - j;\n        unordered_map&lt;int, int&gt; mp;\n        int pre = 0, res = 0;\n        mp[0] = 0;\n        for(int i=0; i&lt;n; ++i) {\n            pre += nums[i];\n            int now = 2*pre - (i+1);\n            if(mp.count(now)) {\n                res = max(res, i+1-mp[now]);\n            } else {\n                mp[now] = i+1;\n            }\n        }\n        return res;\n    }\n};\n</code></pre> <p>\u5b98\u65b9\u9898\u89e3</p> <pre><code>class Solution {\npublic:\n    int findMaxLength(vector&lt;int&gt;&amp; nums) {\n        int maxLength = 0;\n        unordered_map&lt;int, int&gt; mp;\n        int counter = 0;\n        mp[counter] = -1;\n        int n = nums.size();\n        for (int i = 0; i &lt; n; i++) {\n            int num = nums[i];\n            if (num == 1) {\n                counter++;\n            } else {\n                counter--;\n            }\n            if (mp.count(counter)) {\n                int prevIndex = mp[counter];\n                maxLength = max(maxLength, i - prevIndex);\n            } else {\n                mp[counter] = i;\n            }\n        }\n        return maxLength;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#523","title":"523. \u8fde\u7eed\u7684\u5b50\u6570\u7ec4\u548c","text":"<p>\u6570\u5b66\u9898\uff1a</p> <p>\u540c\u4f59\u5b9a\u7406\uff1a\u5982\u679cA%k == 0, B % k == 0,\u90a3\u4e48(A - B)% k == 0</p> <p>\u4f18\u5316\u9898\uff1a</p> <p>\u526a\u679d</p> <pre><code>class Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n        // \u5f53\u51fa\u73b0\u4e24\u4e2a\u8fde\u7eed\u76840\u65f6\uff0c\u76f4\u63a5\u8fd4\u56detrue\uff0c\u56e0\u4e3a 0 % k = 0 \n        for (int i = 0; i &lt; nums.length - 1; i++) {\n            if (nums[i] == 0 &amp;&amp; nums[i + 1] == 0) {\n                return true;\n            }\n        }\n\n        // \u5176\u4e2di\u4e3a\u5de6\u7aef\u70b9\uff0cj\u4e3a\u53f3\u7aef\u70b9\uff0c\u904d\u5386\u6bcf\u79cd\u60c5\u51b5\n        for (int i = 0; i &lt; nums.length; i++) {\n            int sum = nums[i];\n            for (int j = i + 1; j &lt; nums.length; j++) {\n                sum += nums[j];\n                if (sum % k == 0) {\n                    return true;\n                }\n            }\n            // \u52a0\u5230\u4e00\u8d77\u4e4b\u540e\u53d1\u73b0\u90fd\u6ca1k\u5927\uff0c\u540e\u9762\u7684\u4e5f\u4e0d\u4f1a\u518d\u6bd4k\u5927\u4e86\uff0c\u8df3\u8fc7\n            if (sum &lt; k) {\n                break;\n            }\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#342-4","title":"342. 4\u7684\u5e42","text":"<p>\u4f4d\u8fd0\u7b97</p> <p>\u6570\u5b66\u9898</p> <p>\u4e0b\u6807\u4ece0\u4f4d\u5f00\u59cb\uff0c\u5076\u6570\u4f4d\u4e3a4\u7684\u5e42\uff0c1010 = a</p> <p></p> <pre><code>func isPowerOfFour(n int) bool {\n    return n &gt; 0 &amp;&amp; n&amp;(n-1) == 0 &amp;&amp; n&amp;0xaaaaaaaa == 0\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#461","title":"461. \u6c49\u660e\u8ddd\u79bb","text":"<p>\u5185\u7f6e\u51fd\u6570</p> <p>\u4f4d\u8fd0\u7b97</p> <p></p> <p>go</p> <pre><code>func hammingDistance(x, y int) int {\n    return bits.OnesCount(uint(x ^ y))\n}\n</code></pre> <p>c++</p> <pre><code>class Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        return __builtin_popcount(x ^ y);\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int hammingDistance(int x, int y) {\n        int s = x ^ y, ret = 0;\n        while (s) {\n            s &amp;= s - 1; // \u6d88\u9664\u6700\u4f4e\u4f4d\u76841\n            ret++;\n        }\n        return ret;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1190","title":"1190. \u53cd\u8f6c\u6bcf\u5bf9\u62ec\u53f7\u95f4\u7684\u5b50\u4e32","text":"<p>\u6808\u8fdb\u884c\u6a21\u62df</p> <p></p> <pre><code>class Solution {\npublic:\n    string reverseParentheses(string s) {\n        stack&lt;string&gt; stk;\n        string str;\n        for (auto &amp;ch : s) {\n            if (ch == '(') { // \u5de6\u62ec\u53f7\u8868\u793a\u8fdb\u5165\u65b0\u4e00\u5c42 \u9700\u8981\u5c06\u4e4b\u524d\u7684str\u4fdd\u7559 \u518d\u4e0e\u4e0b\u4e00\u5c42\u4f5c\u53e0\u52a0\n                stk.push(str);\n                str = \"\";\n            } else if (ch == ')') { // \u5df2\u7ecf\u5230\u6700\u91cc\u5c42 \u5c06\u6700\u91cc\u5c42\u7684\u5b57\u7b26\u4e32\u7ffb\u8f6c \u8fd4\u56de\u7ed9\u4e0a\u4e00\u5c42\n                reverse(str.begin(), str.end());\n                str = stk.top() + str;\n                stk.pop();\n            } else {\n                str.push_back(ch);\n            }\n        }\n        return str;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#664","title":"664. \u5947\u602a\u7684\u6253\u5370\u673a","text":"<p>C++\u533a\u95f4dp</p> <p></p> <pre><code>class Solution {\npublic:\n    int strangePrinter(string s) {\n        int n = s.size();\n        // vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n, 0x3f3f3f3f));\n        int dp[n][n];\n        memset(dp, 0x3f3f3f3f, sizeof(dp));\n\n        for(int i = 0; i &lt; n; i++)\n            dp[i][i] = 1;\n\n        for(int len = 2; len &lt;= n; len++) {\n            for(int i = 0, j = len-1; j &lt; n; i++, j++) {\n                if(s[i] == s[j])\n                    dp[i][j] = min(dp[i+1][j], dp[i][j-1]);\n                else {\n                    for(int k = i; k &lt; j; k++)\n                        dp[i][j] = min(dp[i][j], dp[i][k]+dp[k+1][j]);\n                }\n            }  \n        }\n        return dp[0][n-1];\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1707","title":"1707. \u4e0e\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6700\u5927\u5f02\u6216\u503c","text":"<p>\u8d85\u65f6\u505a\u6cd5\uff1a\u66b4\u529b+\u526a\u679d</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; maximizeXor(vector&lt;int&gt;&amp; nums, vector&lt;vector&lt;int&gt;&gt;&amp; queries) {\n        int n = nums.size();\n        int m = queries.size();\n        vector&lt;int&gt; ans(m);\n        sort(nums.begin(), nums.end(), greater&lt;int&gt;());\n        for (int i = 0; i &lt; m; i++) {\n            int MAX = 0;\n            int x = queries[i][0], y = queries[i][1];\n            int pos = lower_bound(nums.begin(),nums.end(), y, greater&lt;int&gt;()) - nums.begin();\n            //cout &lt;&lt; pos &lt;&lt; endl;\n            if (pos == n) {\n                ans[i] = -1;\n                continue;\n            }\n            for (int j = pos; j &lt; n ; j++) {\n                //if (y &lt; nums[i]) break;\n\n                if (nums[j] + x &gt;= MAX) {\n                    MAX = max(MAX, nums[j] ^ x);\n                } else {\n                    //cout &lt;&lt; j &lt;&lt; endl;\n                    break;\n                }\n            }\n            ans[i] = MAX;\n        }\n\n        return ans;\n    }\n};\n</code></pre> <p>\u5b57\u5178\u6811</p>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#810","title":"810. \u9ed1\u677f\u5f02\u6216\u6e38\u620f","text":"<p>\u6570\u5b66\u9898</p> <p>\u5982\u679c\u6570\u7ec4\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u90a3\u4e48\u600e\u4e48\u62ff\uff0cAlice\u90fd\u8d62 \u4f46\u5982\u679c\u957f\u5ea6\u662f\u5947\u6570\u5462\uff1f\u5947\u6570\u5c31\u8f93\u4e86\u5417\uff1f\u4e0d\u4e00\u5b9a\uff0c\u5982\u679c\u6570\u7ec4\u672c\u6765\u5f02\u6216\u7ed3\u679c\u5c31\u4e3a0\uff0c\u90a3\u4e48Alice\u8fd8\u662f\u8d62</p> <pre><code>class Solution {\npublic:\n    bool xorGame(vector&lt;int&gt;&amp; nums) {\n        if (nums.size() % 2 == 0) {\n            return true;\n        }\n        int xorsum = 0;\n        for (int num : nums) {\n            xorsum ^= num;\n        }\n        return xorsum == 0;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1035","title":"1035. \u4e0d\u76f8\u4ea4\u7684\u7ebf","text":"<p>lcs\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217</p> <pre><code>class Solution {\npublic:\n    int maxUncrossedLines(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        int n = nums1.size(), m = nums2.size();\n        vector&lt;vector&lt;int&gt;&gt; dp(n + 1, vector&lt;int&gt;(m + 1));\n        for (int i = 1; i &lt;= n; ++i) {\n            for (int j = 1; j &lt;= m; ++j) {\n                if (nums1[i - 1] == nums2[j - 1]) {\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1);\n                } else {\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[n][m];\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#692-k","title":"692. \u524dK\u4e2a\u9ad8\u9891\u5355\u8bcd","text":"<p>map\u8003\u5bdf\u81ea\u5b9a\u4e49\u6bd4\u8f83\u51fd\u6570</p> <pre><code>class Solution {\npublic:\n    typedef struct node {\n        string s;\n        int cnt;\n    }node;\n    static bool cmp(node a, node b) {\n        if (a.cnt == b.cnt) {\n            return a.s &lt; b.s;\n        }\n        return a.cnt &gt; b.cnt;\n    }\n    vector&lt;string&gt; topKFrequent(vector&lt;string&gt;&amp; words, int k) {\n        vector&lt;string&gt; ans(k);\n        map&lt;string, int&gt; m_si;\n        vector&lt;node&gt; vn;\n        for (auto word : words) {\n            m_si[word]++;\n        }\n        for (auto x : m_si) {\n            vn.push_back({x.first, x.second});\n        }\n\n        sort(vn.begin(), vn.end(), cmp);\n        for (int i = 0; i &lt; k; i++) {\n            ans[i] = vn[i].s;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1738-k","title":"1738. \u627e\u51fa\u7b2c K \u5927\u7684\u5f02\u6216\u5750\u6807\u503c","text":"<p>\u4e8c\u7ef4\u524d\u7f00\u548c</p> <pre><code>class Solution {\npublic:\n    int kthLargestValue(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int k) {\n        int m = matrix.size(), n = matrix[0].size();\n        vector&lt;vector&lt;int&gt;&gt; pre(m + 1, vector&lt;int&gt;(n + 1));\n        vector&lt;int&gt; results;\n        for (int i = 1; i &lt;= m; ++i) {\n            for (int j = 1; j &lt;= n; ++j) {\n                pre[i][j] = pre[i - 1][j] ^ pre[i][j - 1] ^ pre[i - 1][j - 1] ^ matrix[i - 1][j - 1];\n                results.push_back(pre[i][j]);\n            }\n        }\n\n        sort(results.begin(), results.end(), greater&lt;int&gt;());\n        return results[k - 1];\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1442","title":"1442. \u5f62\u6210\u4e24\u4e2a\u5f02\u6216\u76f8\u7b49\u6570\u7ec4\u7684\u4e09\u5143\u7ec4\u6570\u76ee","text":"<p>n ^ 3\u505a\u6cd5\uff1a\u66b4\u529b\u679a\u4e3e\u4e09\u4e2a\u70b9\uff0c\u524d\u7f00\u548c</p> <pre><code>class Solution {\npublic:\n    int countTriplets(vector&lt;int&gt;&amp; arr) {\n        int n = arr.size();\n        vector&lt;int&gt; sum(n, 0);\n        sum[0] = arr[0];\n        for (int i = 1; i &lt; arr.size(); i++) {\n            sum[i] = sum[i - 1] ^ arr[i];\n        }\n        int ans = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                for (int k = j; k &lt; n; k++) {\n                    int a = sum[i] ^ sum[j - 1] ^ arr[i];\n                    int b = sum[k] ^ sum[j] ^ arr[j];\n                    if (a == b) {\n                        //cout &lt;&lt; i &lt;&lt; j &lt;&lt; k &lt;&lt; endl;\n                        ans++;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>n^2\u505a\u6cd5\uff1a\u524d\u7f00\u548c+\u95ee\u9898\u8f6c\u6362</p> <p></p> <pre><code>class Solution {\npublic:\n    int countTriplets(vector&lt;int&gt;&amp; arr) {\n        // \u7c7b\u4f3c\u524d\u7f00\u548c\n        int n = arr.size();\n        int* pre_ = new int[n + 1]();\n        int sum = 0;\n        pre_[0] = 0;\n        for (int i = 1; i &lt;= n; i++)\n        {\n            sum ^= arr[i - 1];\n            pre_[i] = sum;         \n        }\n        int count = 0;\n        for (int i = 0; i &lt; n; i++)\n        {\n            for (int j = i + 1; j &lt;= n; j++)\n            {\n                if (pre_[j] == pre_[i])\n                {\n                    count += j - i - 1;\n                }\n            }\n        }\n        return count;\n    }\n};\n</code></pre> <p></p>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#993","title":"993.\u4e8c\u53c9\u6811\u7684\u5802\u5144\u5f1f\u7ed3\u70b9","text":"<p>BFS\u3002</p> <p>\u5982\u679c\u4e24\u4e2a\u7ed3\u70b9\u5728\u6bcf\u4e00\u5c42\uff0c\u90a3\u4e48\u5728\u6bcf\u4e00\u5c42for\u5faa\u73af\u5411\u961f\u5217\u6dfb\u52a0\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5c31\u5fc5\u7136\u4f1a\u5728\u540c\u4e00\u4e2afor\u5faa\u73af\u4e2d\u88ab\u6dfb\u52a0\u5230\u961f\u5217\u4e2d\u3002</p> <p></p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    using PTT = pair&lt;TreeNode*, TreeNode*&gt;;\n    bool isCousins(TreeNode* root, int x, int y) {\n        // \u4f7f\u7528\u961f\u5217q\u6765\u8fdb\u884cbfs\n        // \u5176\u4e2dpair\u4e2d\uff0cp.first \u8bb0\u5f55\u5f53\u524d\u7ed3\u70b9\u7684\u6307\u9488\uff0cp.second \u8bb0\u5f55\u5f53\u524d\u7ed3\u70b9\u7684\u7236\u7ed3\u70b9\u7684\u6307\u9488\n        queue&lt;PTT&gt; q;\n        q.push({root, nullptr});\n        while(!q.empty()) {\n            int n = q.size();\n            vector&lt;TreeNode*&gt; rec_parent; // \u5b58\u653e\u7ed3\u70b9\n            for(int i = 0; i &lt; n; i++) {\n                auto [cur, parent] = q.front(); q.pop();\n                if(cur-&gt;val == x || cur-&gt;val == y)\n                    rec_parent.push_back(parent);\n                if(cur-&gt;left) q.push({cur-&gt;left, cur}); // \u5b58\u653e\u8be5\u5f53\u524d\u7ed3\u70b9\u5b50\u8282\u70b9\u4ee5\u53ca\u5f53\u524d\u7ed3\u70b9\uff08\u7236\u8282\u70b9\uff09\n                if(cur-&gt;right) q.push({cur-&gt;right, cur});\n            }\n            // `x` \u548c `y` \u90fd\u6ca1\u51fa\u73b0\n            if(rec_parent.size() == 0)\n                continue;\n            // `x` \u548c `y` \u53ea\u51fa\u73b0\u4e00\u4e2a\n            else if(rec_parent.size() == 1)\n                return false;\n            // `x` \u548c `y` \u90fd\u51fa\u73b0\u4e86\n            else if(rec_parent.size() == 2)\n                // `x` \u548c `y` \u7236\u8282\u70b9 \u76f8\u540c/\u4e0d\u76f8\u540c \uff1f\n                return rec_parent[0] != rec_parent[1];\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#421","title":"421.\u6570\u7ec4\u4e2d\u4e24\u4e2a\u6570\u6700\u5927\u5f02\u6216\u503c","text":"<ul> <li>Trie\u6811</li> <li>\u66b4\u529b+\u526a\u679d<ul> <li>\u5982\u679ci + j\u5c0f\u4e8e\u5f53\u524d\u5df2\u77e5\u7684ii ^ jj\u90a3\u4e48 i ^ j\u7684\u503c\u4e00\u5b9a\u5c0f\u4e8e ii ^ jj\u7684\u503c</li> <li>\u56e0\u4e3a\u8fdb\u4f4d\u5982\u679c\u8fd8\u5c0f\u7684\u8bdd\uff0c\u660e\u663e\u4e0d\u9700\u8981\u4e86</li> </ul> </li> </ul> <pre><code>class Solution {\npublic:\n    int findMaximumXOR(vector&lt;int&gt;&amp; nums) {\n        sort(nums.begin(), nums.end());\n        int n = nums.size();\n        long long maxValue = 0;\n        for (int i = n -1; i &gt;= 1; i--) {\n            for (int j = i -1; j &gt;= 0; j--) {\n                if ((long long)(nums[i]) + nums[j] &lt; maxValue) {\n                    break;\n                }\n                maxValue = max(maxValue, (long long)(nums[i] ^ nums[j]));\n            }\n        }\n        return maxValue;\n\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#13","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570","text":"<p>\u5bf9\u4e8e\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\u5b57\u7b26\u4e32\u53ef\u4ee5</p> <ul> <li>\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26 str[i]</li> <li>\u68c0\u67e5str[i - 1]str[i]\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u662f\u5426\u5728map\u6620\u5c04\u4e2d\u51fa\u73b0\uff0c\u5982\u679c\u51fa\u73b0\u5219\u4f18\u5148\u91c7\u7528\u8be5\u53cc\u5b57\u7b26\u7684\uff0c\u5982\u679c\u6ca1\u6709\u51fa\u73b0\u5219\u91c7\u7528\u5355\u5b57\u7b26\u7684</li> <li>\u56e0\u4e3a\u662f\u4ece\u540e\u5f80\u524d\u63a8\uff0c\u6240\u6709\u5bf9\u4e8eIX\u4e2d\u7684I\u4f1a\u8ba1\u7b97\u4e24\u6b21\uff0c\u5373\u9700\u8981\u5c06IX9\u6620\u5c04\u4e3a8</li> </ul> <p></p> <pre><code>class Solution {\npublic:\n    int romanToInt(string s) {\n        unordered_map&lt;string, int&gt; m = {{\"I\", 1}, {\"IV\", 3}, {\"IX\", 8}, {\"V\", 5}, {\"X\", 10}, {\"XL\", 30}, {\"XC\", 80}, {\"L\", 50}, {\"C\", 100}, {\"CD\", 300}, {\"CM\", 800}, {\"D\", 500}, {\"M\", 1000}};\n        int r = m[s.substr(0, 1)];\n        for(int i=1; i&lt;s.size(); ++i){\n            string two = s.substr(i-1, 2);\n            string one = s.substr(i, 1);\n            r += m[two] ? m[two] : m[one];\n        }\n        return r;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#12","title":"12. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570","text":"<p>\u5efa\u7acb\u6620\u5c04\u5173\u7cfb\uff0c\u7136\u540e\u6309\u5bf9\u5e94\u6570\u5b57\u4ece\u5927\u5230\u5c0f\u4f9d\u6b21\u5904\u7406\u5b57\u7b26\u4e32\u548c\u51cf\u53bb\u5bf9\u5e94\u7684\u503c\u3002</p> <p></p> <pre><code>class Solution {\npublic:\n    string intToRoman(int num) {\n        string strs[]= {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        int nums[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        string ans;\n        for (int i = 0; num &gt; 0 &amp;&amp; i &lt; 13; i++) {\n            while (nums[i] &lt;= num) {\n                ans += strs[i];\n                num -= nums[i];\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1310","title":"1310.\u5b50\u6570\u7ec4\u5f02\u6216\u67e5\u8be2","text":"<p>\u524d\u7f00\u548c</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; xorQueries(vector&lt;int&gt;&amp; arr, vector&lt;vector&lt;int&gt;&gt;&amp; queries) {\n        int n = arr.size();\n        vector&lt;int&gt; sum(n);\n        int len = queries.size();\n        sum[0] = arr[0];\n        for (int i = 1; i &lt; n; i++) {\n            sum[i] = sum[i - 1] ^ arr[i];\n        }\n        vector&lt;int&gt; ans(len);\n        int cnt = 0;\n        for (auto q : queries) {\n            ans[cnt++] = sum[q[0]] ^ sum[q[1]] ^ arr[q[0]];\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1734","title":"1734.\u89e3\u7801\u5f02\u6216\u540e\u7684\u6392\u5217","text":"<p>\u6570\u5b66\u601d\u7ef4</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; decode(vector&lt;int&gt;&amp; encoded) {\n        int n = encoded.size() + 1;\n        int total = 0;\n        for (int i = 1; i &lt;= n; i++) {\n            total ^= i;\n        }\n        int odd = 0;\n        // encoded[i] = perm[i] ^ perm[i + 1]\n        // \u6b65\u957f\u4e3a2, perm[0] ^ encoded[i] ^ encode[i + 2] ... = perm[0] ^ encoded[1] ... encoded[n - 1]\n        for (int i = 1; i &lt; n - 1; i += 2) {\n            odd ^= encoded[i];\n        }\n        vector&lt;int&gt; perm(n);\n        perm[0] = total ^ odd; // \u6240\u4ee5perm[0]\u5c31\u53ef\u4ee5\u6c42\u51fa\u6765\u4e86\n        for (int i = 0; i &lt; n - 1; i++) {\n            // \u6709\u4e86perm[0], encoded[i] ^ perm[i] = perm[i + 1]\n            perm[i + 1] = perm[i] ^ encoded[i];\n        }\n        return perm;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#_3","title":"\u53f6\u5b50\u76f8\u4f3c\u7684\u6811","text":"<p>\u6df1\u5ea6\u524d\u5e8f\u904d\u5386\u8bb0\u5f55\u53f6\u5b50\u7ed3\u70b9</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void preSearch(TreeNode* root1, vector&lt;int&gt; &amp;seq) {\n        if (root1 == nullptr) return;\n        if (!root1 -&gt; left &amp; !root1 -&gt; right) {\n            seq.push_back(root1 -&gt; val);\n            return ;\n        }\n\n        preSearch(root1 -&gt; left, seq);\n        preSearch(root1 -&gt; right, seq);\n    }\n    bool leafSimilar(TreeNode* root1, TreeNode* root2) {\n        vector&lt;int&gt; seq1, seq2;\n        preSearch(root1, seq1);\n        preSearch(root2, seq2);\n        return seq1 == seq2;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1482-m","title":"1482. \u5236\u4f5cm\u675f\u82b1\u6240\u9700\u7684\u6700\u5c11\u5929\u6570","text":"<p>\u4e8c\u5206+\u8d2a\u5fc3</p> <p></p> <pre><code>class Solution {\npublic:\n    bool check(vector&lt;int&gt;&amp; bloomDay, int m, int k, int limit) {\n        int total = 0;\n        int cur_cnt = 0;\n        // \u679a\u4e3e\u5728limit\u5929 \u82b1\u76db\u5f00\u7684\u60c5\u51b5\n        for(auto day : bloomDay) {\n            // \u82b1\u5f00\u7684\u5929\u6570 \u5982\u679c\u5927\u4e8e \u5f53\u524d\u5929\u6570limit\u8bf4\u660e\u8fd8\u6ca1\u6709\u5f00\u653e \u5c06cur_cnt \u91cd\u7f6e \u65ad\u5f00\n            if(day &gt; limit)\n                cur_cnt = 0;\n            else // \u5c0f\u4e8e\u4e14\u8fde\u7eed \u5c31++\n                cur_cnt++;\n            // \u5224\u65ad\u662f\u5426\u6ee1\u8db3\u4e00\u675f\u82b1\n            if(cur_cnt &gt;= k) {\n                total++;\n                cur_cnt = 0;\n            }\n        }\n        return total &gt;= m;\n    }\n    int minDays(vector&lt;int&gt;&amp; bloomDay, int m, int k) {\n        int n = bloomDay.size();\n        if(m * k &gt; n) return -1; // \u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u662f \u82b1\u6570 &lt; \u9700\u8981\u7684\u82b1\u675f\n        // \u4f18\u5316 \u679a\u4e3e\u8303\u56f4\u5728 min - max ele\n        int left = *min_element(bloomDay.begin(), bloomDay.end());\n        int right = *max_element(bloomDay.begin(), bloomDay.end());\n        // \u4e8c\u5206\u679a\u4e3e\u5929\u6570 \u80fd\u7f29\u5c0f\u5c31\u7f29\u5c0f \u4e0d\u80fd\u7f29\u5c0f\u5c31\u6269\u5927\n        while(left &lt;= right) {\n            int mid = (left + right) / 2;\n            if(check(bloomDay, m, k, mid))\n                right = mid-1; // \u7f29\u5c0f\u533a\u95f4\n            else\n                left = mid+1; // \u6269\u5927\u533a\u95f4\n        }\n        return right + 1;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1723","title":"1723. \u5b8c\u6210\u6240\u6709\u5de5\u4f5c\u7684\u6700\u77ed\u65f6\u95f4","text":"<p>\u4e8c\u5206\u3001\u56de\u6eaf\u3001\u526a\u679d</p> <pre><code>class Solution {\npublic:\n    bool backtrack(vector&lt;int&gt;&amp; jobs, vector&lt;int&gt;&amp; workloads, int idx, int limit) {\n        if (idx &gt;= jobs.size()) {\n            return true;\n        }\n        int cur = jobs[idx];\n        for (auto&amp; workload : workloads) {\n            if (workload + cur &lt;= limit) {\n                workload += cur; // \u9009\u62e9\u5f53\u524d\u7684\u8fdb\u884c\u5206\u914d\n                if (backtrack(jobs, workloads, idx + 1, limit)) {\n                    return true;\n                }\n                workload -= cur; // \u4e0d\u9009\u62e9\u5f53\u524d\u7684\u8fdb\u884c\u5206\u914d\n            }\n            // \u5982\u679c\u5f53\u524d\u5de5\u4eba\u672a\u88ab\u5206\u914d\u5de5\u4f5c\uff0c\u90a3\u4e48\u4e0b\u4e00\u4e2a\u5de5\u4eba\u4e5f\u5fc5\u7136\u672a\u88ab\u5206\u914d\u5de5\u4f5c\n            // \u6216\u8005\u5f53\u524d\u5de5\u4f5c\u6070\u80fd\u4f7f\u8be5\u5de5\u4eba\u7684\u5de5\u4f5c\u91cf\u8fbe\u5230\u4e86\u4e0a\u9650\n            // \u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\u6211\u4eec\u65e0\u9700\u5c1d\u8bd5\u7ee7\u7eed\u5206\u914d\u5de5\u4f5c\n            if (workload == 0 || workload + cur == limit) { // \u56e0\u4e3a\u662f\u6574\u4e2afor\u5faa\u73af \u6bcf\u4e2a\u90fd\u8981\u5c1d\u8bd5 \u8fd9\u91cc\u526a\u679d\n                break;\n            }\n        }\n        return false;\n    }\n\n    bool check(vector&lt;int&gt;&amp; jobs, int k, int limit) {\n        vector&lt;int&gt; workloads(k, 0);\n        return backtrack(jobs, workloads, 0, limit);\n    }\n\n    int minimumTimeRequired(vector&lt;int&gt;&amp; jobs, int k) {\n        sort(jobs.begin(), jobs.end(), greater&lt;int&gt;()); // \u4ece\u5927\u5230\u5c0f\u6392\u5217\n        int l = jobs[0], r = accumulate(jobs.begin(), jobs.end(), 0); // limit -&gt; [min, max]\u5de5\u4f5c\u91cf\n        while (l &lt; r) { // \u4e8c\u5206\u679a\u4e3elimit\n            int mid = (l + r) &gt;&gt; 1;\n            if (check(jobs, k, mid)) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1486","title":"1486.  \u6570\u7ec4\u5f02\u6216\u64cd\u4f5c","text":"<p>\u7b80\u7b54\u6a21\u62df</p> <p></p> <pre><code>class Solution {\npublic:\n    int xorOperation(int n, int start) {\n        int num = start;\n        for (int i = 1; i &lt; n; i++) {\n            num ^= (start + 2 * i);\n        }\n        return num;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1720","title":"1720. \u89e3\u7801\u5f02\u6216\u540e\u7684\u6570\u7ec4","text":"<p>\u7b80\u5355\u6570\u8bba</p> <p></p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; decode(vector&lt;int&gt;&amp; encoded, int first) {\n        int n = encoded.size();\n        vector&lt;int&gt; ans(n + 1, first);\n        for (int i = 0; i &lt; n; i++) {\n            ans[i + 1] = ans[i] ^ encoded[i];\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#740","title":"740. \u5220\u9664\u5e76\u83b7\u5f97\u70b9\u6570","text":"<p>\u52a8\u6001\u89c4\u5212</p> <pre><code>class Solution {\npublic:\n    int deleteAndEarn(vector&lt;int&gt;&amp; nums) {\n        if(nums.size() &lt; 1) return 0;\n        int maxn = 0;\n        for(int it : nums)\n            maxn = max(maxn, it);\n        vector&lt;int&gt; cnt(maxn+1), dp(maxn+1);\n        for(int it : nums)\n            cnt[it]++;\n        dp[1] = cnt[1];\n        for(int i = 2; i &lt;= maxn; i++)\n            dp[i] = max(dp[i-1], dp[i-2] + cnt[i] * i);\n        return dp[maxn];\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#554","title":"554. \u7816\u5899","text":"<p>\u8d2a\u5fc3 \u601d\u7ef4\u9898</p> <p>\u5bf9\u4e8e\u6bcf\u4e00\u6761\u5782\u7ebf\uff0c\u7a7f\u8fc7\u7684\u7816\u5757\u548c\u7a7f\u8fc7\u7684\u95f4\u9699\u76f8\u52a0\u7ed3\u679c\u90fd\u662f\u603b\u9ad8\u5ea6 \u662f\u4e2a\u5b9a\u503c</p> <p>\u6240\u4ee5\u53ea\u9700\u8981\u627e\u51fa\u6700\u591a\u7684\u95f4\u9699\u90a3\u4e2a \u5c31\u627e\u5230\u4e86\u9ad8\u5ea6\u51cf\u6700\u591a\u7684\u95f4\u9699\u5c31\u627e\u5230\u4e86\u7a7f\u8fc7\u7684\u6700\u5c11\u7816\u6570\u3002</p> <p></p> <pre><code>class Solution {\npublic:\n    int leastBricks(vector&lt;vector&lt;int&gt;&gt;&amp; wall) {\n        unordered_map&lt;int, int&gt; cnt;\n        for (auto&amp; widths : wall) {\n            int n = widths.size();\n            int sum = 0;\n            for (int i = 0; i &lt; n - 1; i++) {\n                sum += widths[i];\n                cnt[sum]++;\n            }\n        }\n        int maxCnt = 0;\n        for (auto&amp; [_, c] : cnt) {\n            maxCnt = max(maxCnt, c);\n        }\n        return wall.size() - maxCnt;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#690","title":"690. \u5458\u5de5\u7684\u91cd\u8981\u6027","text":"<p>bfs</p> <pre><code>/*\n// Definition for Employee.\nclass Employee {\npublic:\n    int id;\n    int importance;\n    vector&lt;int&gt; subordinates;\n};\n*/\n\nclass Solution {\npublic:\n    int getImportance(vector&lt;Employee*&gt; employees, int id) {\n        int ans = 0;\n        //if (employees.size() == 0) return 0;\n        unordered_set&lt;int&gt; emp_record;\n        unordered_map&lt;int, int&gt; m;\n\n        for (int i = 0; i &lt; employees.size(); i++) {\n            m[employees[i] -&gt; id] = i;\n        }\n\n        queue&lt;Employee&gt; que_emp;\n        que_emp.push(*employees[m[id]]);\n\n        while (que_emp.size()) {\n            Employee temp = que_emp.front();\n            que_emp.pop();\n            ans += temp.importance;\n            for (auto num : temp.subordinates) {\n                if (emp_record.count(num) == 0) {\n                    emp_record.insert(num);\n                    que_emp.push(*employees[m[num]]);\n                }\n            }\n\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#403","title":"403. \u9752\u86d9\u8fc7\u6cb3","text":"<p>\u89e3\u6cd51\uff1a</p> <p>DFS + \u8bb0\u5fc6\u5316\uff08\u8bb0\u5fc6\u5316\u641c\u7d22\uff09</p> <p></p> <pre><code>class Solution {\npublic:\n    using PII = pair&lt;int, int&gt;;\n    unordered_map&lt;int, unordered_set&lt;int&gt;&gt; visited;\n    unordered_set&lt;int&gt; stone_pos;\n    int done;\n    bool dfs(int prv_pos, int speed) {\n        int cur_pos = prv_pos + speed;\n\n        if(speed &lt; 0 || !stone_pos.count(cur_pos)) // \u4e0d\u80fd\u5411\u540e\u8df3 \u5e76\u4e14\u5f53\u524d\u4f4d\u7f6e\u6709\u77f3\u5934\u5b58\u5728 \n            return false;\n        if(visited[prv_pos].count(speed)) // \u9632\u6b62\u91cd\u590d\u8ba1\u7b97 \u4ee5\u540c\u4e00\u4e2a\u901f\u5ea6\u5230\u8fbe\u540c\u4e00\u4e2a\u4f4d\u7f6e \u4ee3\u8868\u662f\u540c\u4e00\u4e2a\u72b6\u6001\n            return false;\n        visited[prv_pos].insert(speed);//\u5c06\u5f53\u524d\u65b0\u72b6\u6001\u63d2\u5165\u5230\u6570\u7ec4\u4e2d\n\n        if(cur_pos == done) // \u8fbe\u5230\u6700\u540e\u4e00\u4e2a\n            return true;\n\n        // \u8fdb\u884c\u9012\u5f52\u641c\u7d22\n        return dfs(cur_pos, speed-1) || \n            dfs(cur_pos, speed) || dfs(cur_pos, speed+1);   \n    }\n    bool canCross(vector&lt;int&gt;&amp; stones) {\n        int n = stones.size();\n        // \u4fdd\u5b58\u77f3\u5934\u4f4d\u7f6e\n        stone_pos = unordered_set&lt;int&gt;(stones.begin(), stones.end());\n        // \u76ee\u6807\u4e3a\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\n        done = stones.back();\n        // \u4ece0\u5f00\u59cb\u5411\u8df3\u4e00\u4e2a\n        return dfs(0, 1);\n    }\n};\n</code></pre> <p>\u52a8\u6001\u89c4\u5212</p> <ul> <li><code>d[i][speed]</code>\u8868\u793a\u4ee5speed\u80fd\u5426\u8df3\u5230\u7b2ci\u4e2a\u77f3\u5934</li> <li>\u521d\u59cb\u5316\uff1a<code>d[0][0] = 1</code></li> <li><code>dp[i][speed] = dp[j][speed - 1] or dp[j][spped] or dp[j][speed + 1]</code></li> </ul> <pre><code>class Solution {\npublic:\n    bool canCross(vector&lt;int&gt;&amp; stones) {\n        int n = stones.size();\n        // dp[i][speed]\uff1a\u8868\u793a\u80fd\u5426\u4ee5speed\u7684\u901f\u5ea6\uff0c\u5230\u8fbe\u7b2ci\u4e2a\u77f3\u5934\n        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n, 0));\n        dp[0][0] = 1;\n        for(int i = 1; i &lt; n; i++) {\n            for(int j = 0; j &lt; i; j++) {\n                int speed = stones[i] - stones[j]; // \u9700\u8981speed\u7684\u8ddd\u79bb\u624d\u80fd\u4ecej\u5230i\n                if(speed &lt;= 0 || speed &gt; j+1) // \u4ecej\u5f00\u59cb\u8df3\u7684\u8ddd\u79bb\u6700\u5927\u4e3a j + 1, \u8ddd\u79bb\u8d85\u8fc7 j + 1\uff0c\u8bf4\u660e\u4e0d\u80fd\u4e00\u6b21\u8df3\u8dc3\u5230\u8fbe\n                    continue;\n\n                dp[i][speed] = dp[j][speed-1] || \n                    dp[j][speed] || dp[j][speed+1];\n            }\n        }\n        for (int i = 0; i &lt; n; i++) {\n            if (dp[n - 1][i]) return true;\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#633","title":"633. \u5e73\u65b9\u6570\u4e4b\u548c","text":"<p>\u66b4\u529b</p> <pre><code>class Solution {\npublic:\n    bool judgeSquareSum(int c) {\n        for (long a = 0; a * a &lt;= c; a++) {\n            double b = sqrt(c - a * a);\n            if (b == (int)b) {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n</code></pre> <p>Go\u7248\u672c</p> <pre><code>func judgeSquareSum(c int) bool {\n    for a := 0; a*a &lt;= c; a++ {\n        rt := math.Sqrt(float64(c - a*a))\n        if rt == math.Floor(rt) {\n            return true\n        }\n    }\n    return false\n}\n</code></pre> <p>\u53cc\u6307\u9488</p> <ul> <li>left = 0, right = sqrt\u00a9</li> <li>if (\u4e58\u79ef\u5927\u4e8e\u76ee\u6807 ) right --</li> <li> <p>if (\u6210\u7ee9\u5c0f\u4e8e) left++</p> </li> <li> <p>\u7ec8\u7ed3\u6761\u4ef6(left &gt; right), right == left \u53ef\u80fd\u662f8 = 2^2 + 2^2</p> </li> </ul> <pre><code>func judgeSquareSum(c int) bool {\n    left, right := 0, int(math.Sqrt(float64(c)))\n    for left &lt;= right {\n        sum := left*left + right*right\n        if sum == c {\n            return true\n        } else if sum &gt; c {\n            right--\n        } else {\n            left++\n        }\n    }\n    return false\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#938","title":"938.\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u8303\u56f4\u548c","text":"<p>\u4e2d\u5e8f\u904d\u5386</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void midSearch(TreeNode *root, vector&lt;TreeNode *&gt; &amp;v) {\n        if (!root)  return ;\n        midSearch(root -&gt; left, v);\n        v.push_back(root);\n        midSearch(root -&gt; right, v);\n    }\n    int rangeSumBST(TreeNode* root, int low, int high) {\n        vector&lt;TreeNode *&gt; v;\n        int ans = 0;\n        midSearch(root, v);\n        int i = 0;\n        for (i = 0; i &lt; v.size(); i++) {\n            if (v[i] -&gt; val &gt;= low) break;\n        }\n        for (int j = i; j &lt; v.size(); j++) {\n            if (v[j]-&gt;val &lt;= high) ans += v[j]-&gt;val;\n            else break;\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u5b98\u65b9\u9898\u89e3</p> <pre><code>class Solution {\npublic:\n    int rangeSumBST(TreeNode *root, int low, int high) {\n        if (root == nullptr) {\n            return 0;\n        }\n        // \u5f53\u524d\u503c\u4e0d\u5728 [low, high]\u8303\u56f4\u5185\n        if (root-&gt;val &gt; high) { \n            return rangeSumBST(root-&gt;left, low, high);\n        }\n        if (root-&gt;val &lt; low) {\n            return rangeSumBST(root-&gt;right, low, high);\n        }\n        // \u5f53\u524d\u503c + \u5de6\u5b69\u5b50\u7684\u503c + \u53f3\u5b69\u5b50\u7684\u503c\n        return root-&gt;val + rangeSumBST(root-&gt;left, low, high) + rangeSumBST(root-&gt;right, low, high);\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1011-d","title":"1011. \u5728D\u5929\u5185\u9001\u8fbe\u5305\u88f9\u7684\u80fd\u529b","text":"<p>\u4e8c\u5206\u67e5\u627e</p> <p>\u4e8c\u5206\u679a\u4e3e\u8239\u7684limit \u7136\u540e\u68c0\u67e5\u8be5limit\u662f\u5426\u6ee1\u8db3</p> <pre><code>class Solution {\npublic:\n    bool check(vector&lt;int&gt; &amp;weights, int D, int limit) {\n        int cnt = 1, cur = 0;\n        for(auto &amp;weight : weights) {\n            if(limit &lt; weight) return false;\n            if(cur + weight &gt; limit) {\n                cnt++;\n                cur = 0;\n            }\n            cur += weight;\n        }\n        return cnt &lt;= D; // &lt;= D\u8bf4\u660e\u53ef\u4ee5\u5728D\u5929\u4e4b\u5185\u8fd0\u8f93\u5b8c\u6bd5\n    }\n    int shipWithinDays(vector&lt;int&gt;&amp; weights, int D) {\n        int left = 1, right = 500*50000; // limit [1, 500 * 50000]\n        int ans = right; // ans\u4fdd\u5b58limit\n        while(left &lt;= right) {\n            int mid = (left + right) / 2;\n            if(check(weights, D, mid)) { // \u53ef\u4ee5\u6ee1\u8db3 \u8bd5\u56fe\u51cf\u5c11limit \u56e0\u4e3a\u8981\u6c42\u6700\u5c0f\u503c\n                right = mid - 1;\n                ans = mid;\n            }\n            else // \u4e0d\u80fd\u6ee1\u8db3 \u589e\u52a0limit\n                left = mid + 1;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#897","title":"897. \u9012\u589e\u641c\u7d22\u6811","text":"<p>\u4e2d\u5e8f\u904d\u5386\u5b58\u6811\u7684\u7ed3\u70b9\u6307\u9488 \u7136\u540e\u91cd\u5efa\u6811</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void midSearch(TreeNode *root, vector&lt;TreeNode *&gt; &amp;nodes) {\n        if (root == nullptr) return;\n        midSearch(root -&gt; left, nodes);\n        nodes.push_back(root);\n        midSearch(root -&gt; right, nodes);\n    }\n    TreeNode* increasingBST(TreeNode* root) {\n        vector&lt;TreeNode *&gt; nodes;\n        if (root == nullptr) return nullptr;\n        midSearch(root, nodes);\n        nodes.push_back(nullptr);\n        TreeNode *ans = nodes[0], *temp = nodes[0];\n        for (int i = 0; i &lt; nodes.size() - 1; i++) {\n            nodes[i] -&gt; left = nullptr;\n            nodes[i] -&gt; right = nodes[i + 1];\n\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#377iv","title":"377.\u7ec4\u5408\u603b\u6570IV","text":"<p>DP</p> <p><code>dp[i][j]</code>\u8868\u793a\u957f\u5ea6\u4e3ai\u7684 \u6784\u6210\u603b\u548c\u4e3aj\u7684\u65b9\u6848\u6570</p> <p><code>dp[0][0] = 1</code></p> <p></p> <pre><code>using ULL =  unsigned long long;\nclass Solution {\npublic:\n    int combinationSum4(vector&lt;int&gt;&amp; nums, int target) {\n        int len = target;\n        vector&lt;vector&lt;ULL&gt;&gt; f(len + 1,vector&lt;ULL&gt;(target + 1,0));\n        f[0][0] = 1; // \u6570\u7ec4\u957f\u5ea6\u4e3ai \u6784\u6210\u957f\u5ea6\u4e3aj\n        int ans = 0;\n        for(int i = 1; i &lt;= len; i++){\n            for(int j = 0; j &lt;= target; j++){\n                for(auto x : nums){\n                    if(j &gt;= x) f[i][j] += f[i - 1][j - x];\n                    // \u4ece i - 1\u72b6\u6001\u8f6c\u79fb\u8fc7\u6765 \u53ef\u80fd\u662f\u6570\u7ec4\u4efb\u610f\u4e00\u4e2a\u6570\u8f6c\u79fb\u8fc7\u6765 \n                }\n            }\n            // \u5c06\u6bcf\u4e00\u4e2a\u957f\u5ea6 1 - target(\u51681) \u7684\u957f\u5ea6\u7684\u65b9\u6848\u4e66\u76f8\u52a0\n            ans += f[i][target];\n        }\n        return ans;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    int combinationSum4(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;int&gt; f(target + 1,0); // or vector&lt;unsigned long long&gt; f(target + 1,0); \u5c31\u4e0d\u7528\u505a\u53d6\u6a21\u7684\u64cd\u4f5c\u4e86\n        f[0] = 1;\n        for(int i = 1; i &lt;= target; i++){\n            for(auto x : nums){\n                //c++\u8ba1\u7b97\u7684\u4e2d\u95f4\u7ed3\u679c\u4f1a\u6ea2\u51fa\uff0c\u4f46\u56e0\u4e3a\u6700\u7ec8\u7ed3\u679c\u662fint\n                //\u56e0\u6b64\u6bcf\u6b21\u8ba1\u7b97\u5b8c\u90fd\u5bf9INT_MAX\u53d6\u6a21\uff0c0LL\u662f\u5c06\u8ba1\u7b97\u7ed3\u679c\u63d0\u5347\u5230long long\u7c7b\u578b\n                if(i &gt;= x) f[i] =(0LL + f[i] + f[i - x]) % INT_MAX;\n            }\n        }\n        return f[target];\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#368","title":"368. \u6700\u5927\u6574\u9664\u5b50\u96c6","text":"<p>DP</p> <p>dp[i] \u8868\u793a\u4ee5nums[i]\u4e3a\u672b\u5c3e\u5143\u7d20\u7684\u6574\u9664\u5b50\u96c6\u7684\u4e2a\u6570</p> <p>\u521d\u59cb\u72b6\u6001\uff1adp[i] = 1</p> <p>\u7b2c\u4e00\u904d\u627e\u5230\u6bcf\u4e2a\u4ee5nums[i]\u7ed3\u5c3e\u7684\u6574\u9664\u5b50\u96c6\u5927\u5c0f\u3002\u5e76\u8bb0\u5f55\u6700\u5927\u503c\u548c\u6700\u5927\u5b50\u96c6\u957f\u5ea6dp[i] =max(dp[i], dp[j] + 1);</p> <p>\u7b2c\u4e8c\u6b65\uff1a\u4ece\u540e\u5f80\u524d\u904d\u5386\u5148\u627e\u5230\u6ee1\u8db3\u6700\u5927\u503c\u548c\u6700\u5927\u5b50\u96c6\u957f\u5ea6\u7684\u5143\u7d20\uff0c\u7136\u540e\u6bcf\u9009\u4e00\u4e2a\u5143\u7d20\u5c31\u51cf\u53bb\u4e00\u4e2a\u6700\u5927\u5b50\u96c6\u957f\u5ea6\uff0c\u5982maxSize = 5\uff0c\u4e00\u76f4\u9012\u51cf\u76f4\u52301\u4e3a\u6b62\u3002\u5224\u65ad\u5143\u7d20\u662f\u5426\u7b26\u5408\u7684\u6761\u4ef6\u5c31\u662f\u5f53\u524ddp[i] == maxSize, \u4e14maxVlaue % nums[i] == 0</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; largestDivisibleSubset(vector&lt;int&gt;&amp; nums) {\n        int len = nums.size();\n        sort(nums.begin(), nums.end());\n\n        // \u7b2c 1 \u6b65\uff1a\u52a8\u6001\u89c4\u5212\u627e\u51fa\u6700\u5927\u5b50\u96c6\u7684\u4e2a\u6570\u3001\u6700\u5927\u5b50\u96c6\u4e2d\u7684\u6700\u5927\u6574\u6570\n        vector&lt;int&gt; dp(len, 1);\n        int maxSize = 1;\n        int maxVal = dp[0];\n        for (int i = 1; i &lt; len; i++) {\n            for (int j = 0; j &lt; i; j++) {\n                // \u9898\u76ee\u4e2d\u8bf4\u300c\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u300d\u5f88\u91cd\u8981\n                if (nums[i] % nums[j] == 0) {\n                    dp[i] = max(dp[i], dp[j] + 1);\n                }\n            }\n\n            if (dp[i] &gt; maxSize) {\n                maxSize = dp[i];\n                maxVal = nums[i];\n            }\n        }\n\n        // \u7b2c 2 \u6b65\uff1a\u5012\u63a8\u83b7\u5f97\u6700\u5927\u5b50\u96c6\n        vector&lt;int&gt; res;\n        if (maxSize == 1) {\n            res.push_back(nums[0]);\n            return res;\n        }\n\n\n        for (int i = len - 1; i &gt;= 0 &amp;&amp; maxSize &gt; 0; i--) {\n            if (dp[i] == maxSize &amp;&amp; maxVal % nums[i] == 0) {\n                res.push_back(nums[i]);\n                maxVal = nums[i];\n                maxSize--;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#27","title":"27. \u79fb\u9664\u5143\u7d20","text":"<p>\u539f\u5730\u5220\u9664\u65e0\u5e8f\u6570\u7ec4\u7684\u7279\u5b9a\u9879</p> <p></p> <pre><code>class Solution {\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) {\n        int cur = 0;\n        for (auto num : nums ){\n            if (val != num) {\n                nums[cur++] = num;\n            }\n        }\n        return cur;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#26","title":"26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u7684\u91cd\u590d\u9879","text":"<p>\u539f\u5730\u5220\u9664\u6709\u5e8f\u6570\u7ec4\u7684\u91cd\u590d\u9879</p> <pre><code>class Solution {\n    public int removeDuplicates(int[] nums) {\n    if (nums.length == 0) return 0;\n    int i = 0;\n    for (int j = 1; j &lt; nums.length; j++) {\n        if (nums[j] != nums[i]) {\n            i++;\n            nums[i] = nums[j];\n        }\n    }\n    return i + 1;\n    }\n\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#220","title":"220. \u5b58\u5728\u91cd\u590d\u5143\u7d20","text":"<p>\u6ed1\u52a8\u7a97\u53e3 + set\u7ef4\u62a4\u7a97\u53e3\u5185\u7684\u72b6\u6001</p> <p></p> <pre><code>class Solution {\npublic:\n    bool containsNearbyAlmostDuplicate(vector&lt;int&gt;&amp; nums, int k, int t) {\n        set&lt;long&gt; s;\n        for (int i = 0; i &lt; nums.size(); ++i) {\n            // \u6307\u9488\u5b9a\u4f4d\u6bd4 long(nums[i])-t \u5927\u7684\u6570\u7684\u4f4d\u7f6e\n            auto pos = s.lower_bound(long(nums[i]) - t);\n            // \u5982\u679c\u5b58\u5728\u4e14\u8be5\u6570\u5b57\u4e5f\u6bd4 long(nums[i]) + t \u5c0f\uff0c\u8bf4\u660e\u5b58\u5728\u6211\u4eec\u60f3\u8981\u7684\u7ed3\u679c\n            if (pos!=s.end() &amp;&amp; *pos &lt;= long(nums[i]) + t) return true;\n            s.insert(nums[i]);\n            if (s.size() &gt; k) s.erase(nums[i-k]); // \u7ef4\u62a4\u6ed1\u52a8\u7a97\u53e3\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#213","title":"213. \u6253\u5bb6\u52ab\u820d","text":"<p>\u53c2\u8003198 \u505a\u4e24\u6b21\u6253\u5bb6\u52ab\u820d \u5206\u4e3a\uff1a</p> <ol> <li>\u6253\u52ab\u7b2c\u4e00\u5bb6</li> <li>\u4e0d\u6253\u52ab\u7b2c\u4e00\u5bb6</li> </ol> <p></p> <pre><code>class Solution {\npublic:\n    int rob0(vector&lt;int&gt;&amp; nums, int st, int end) {\n        int n = nums.size();\n        if (n == 0) return 0;\n        //vector&lt;int&gt; dp(n + 1, 0); // dp[i]\u8868\u793a\u5077\u524di\u4e2a\u623f\u5b50\u7684\u6700\u5927\u91d1\u989d\n        //dp[1] = nums[0];\n        int cur = nums[st], pre = 0;\n        for (int i = st + 2; i &lt;= end; i++) {\n            int temp = cur;\n            cur = max(cur, pre + nums[i - 1]);\n            pre = temp;\n            //dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1]);\n        }\n        return cur;\n    }\n    int rob(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if (n == 1) return nums[0];\n        //return rob0(nums, 0, n);\n        return max(rob0(nums, 0, n - 1), rob0(nums, 1, n));\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#208trie","title":"208.Trie\u6811","text":"<pre><code>class Trie {\nprivate:\n    bool isEnd;\n    Trie* next[26]; // \u6bcf\u4e00\u4e2a\u7ed3\u70b9\u90fd\u53ef\u80fd\u670926\u4e2a\u5b57\u6bcd\u7684\u5206\u652f\npublic:\n    Trie() {\n        isEnd = false;\n        memset(next, 0, sizeof(next));\n    }\n\n    void insert(string word) {\n        Trie* node = this;\n        // \u5b58\u5728\u5c31\u4e00\u76f4\u627e\u5230\u5e95 \u4e0d\u5b58\u5728\u5c31\u521b\u5efa\u65b0\u7684\u7ed3\u70b9\n        for (char c : word) {\n            if (node-&gt;next[c-'a'] == NULL) {\n                node-&gt;next[c-'a'] = new Trie();\n            }\n            node = node-&gt;next[c-'a'];\n        }\n        node-&gt;isEnd = true; // \u6807\u8bb0\u4e3a\u5b58\u5728\n    }\n\n    bool search(string word) {\n        Trie* node = this;\n        for (char c : word) {\n            node = node-&gt;next[c - 'a'];\n            if (node == NULL) { // \u5f53\u524d\u5b57\u5b57\u6bcd\u8fd8\u6ca1\u6709\u88ab\u5efa\u7acb\u8fc7 \u80af\u5b9a\u4e0d\u5b58\u5728\n                return false;\n            }\n        }\n        // \u5728Trie\u6811\u4e2d\u627e\u5230\u4e86\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 \u5e76\u4e14\u5df2\u7ecf\u79fb\u52a8\u4e86\u8be5\u5b57\u7b26\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\n        return node-&gt;isEnd;\n    }\n\n    // \u53ea\u8981\u6811\u4e2d\u80fd\u627e\u5230\u5bf9\u5e94\u7684prefix\u7684\u5b57\u7b26\u4e32\u5c31\u53ef \u4e0d\u7ba1\u662f\u5426\u7ed3\u5c3e\n    bool startsWith(string prefix) {\n        Trie* node = this;\n        for (char c : prefix) {\n            node = node-&gt;next[c-'a'];\n            if (node == NULL) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#783","title":"783.\u4e8c\u53c9\u6811\u8282\u70b9\u7684\u6700\u5c0f\u8ddd\u79bb","text":"<p>\u4e8c\u53c9\u6811\u4e2d\u5e8f\u904d\u5386\u5f97\u5230\u6709\u5e8f\u6570\u7ec4 \u6700\u5c0f\u7684\u8ddd\u79bb\u4e3a\u76f8\u90bb\u7684\u4e24\u4e2a\u503c\u7684\u5dee\u503c\u6700\u5c0f</p> <pre><code>/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector&lt;int&gt; nums;\n    void dfs(TreeNode*root) {\n        if (root == nullptr) return ;\n        dfs(root -&gt; left);\n        nums.push_back(root -&gt; val);\n        dfs(root -&gt; right);\n    }\n    int minDiffInBST(TreeNode* root) {\n        dfs(root);\n        int len = nums.size();\n        int ans = INT_MAX;\n        for (int i = 1; i &lt; len; i++) {\n            ans = min(ans, nums[i] - nums[i - 1]);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#264-ii","title":"264. \u4e11\u6570II","text":"<p>\u5c0f\u9876\u5806: \u5806\u9876\u4e3ax , \u4e0b\u4e00\u4e2a\u70b9\u5c31\u662f 2x, 3x, 5x</p> <p></p> <pre><code>class Solution {\npublic:\n    int nthUglyNumber(int n) {\n        vector&lt;int&gt; factors = {2, 3, 5};\n        unordered_set&lt;long&gt; seen;\n        priority_queue&lt;long, vector&lt;long&gt;, greater&lt;long&gt;&gt; heap;\n        seen.insert(1L);\n        heap.push(1L);\n        int ugly = 0;\n        for (int i = 0; i &lt; n; i++) {\n            long curr = heap.top();\n            heap.pop();\n            ugly = (int)curr;\n            for (int factor : factors) {\n                long next = curr * factor;\n                if (!seen.count(next)) {\n                    seen.insert(next);\n                    heap.push(next);\n                }\n            }\n        }\n        return ugly;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#263","title":"263. \u4e11\u6570","text":"<pre><code>class Solution {\npublic:\n    bool isUgly(int n) {\n        if (n &lt;= 0) {\n            return false;\n        }\n        vector&lt;int&gt; factors = {2, 3, 5};\n        for (int factor : factors) {\n            while (n % factor == 0) {\n                n /= factor;\n            }\n        }\n        return n == 1;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#33","title":"33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4","text":"<p>\u4e8c\u5206\u641c\u7d22</p> <pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int lo = 0, hi = nums.size() - 1;\n        while (lo &lt; hi) {\n            int mid = (lo + hi) / 2;\n            if ((nums[0] &gt; target) ^ (nums[0] &gt; nums[mid]) ^ (target &gt; nums[mid]))\n                lo = mid + 1;\n            else\n                hi = mid;\n        }\n        return lo == hi &amp;&amp; nums[lo] == target ? lo : -1;\n    }\n};\n</code></pre> <p>\u4e8c\u5206\u6a21\u677f</p> <pre><code>class Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int lo = 0, hi = nums.size() - 1;\n        while (lo &lt; hi) {\n            int mid = (lo + hi) / 2;\n            if (check[nums[mid]])\n                lo = mid + 1; // target -&gt; [mid + 1, r]\n            else\n                hi = mid;// target -&gt; [lo, mid]\n        }\n        return l;//\u6700\u540e\u662fl == r\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#80-ii","title":"80. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879II","text":"<p>\u53cc\u6307\u9488\uff08\u5feb\u6162\u6307\u9488\uff09\uff0ccur\u8868\u793a\u5f53\u524d\u904d\u5386\u5230\u7684\u6307\u9488\uff0cfill\u8868\u793a\u9700\u8981\u586b\u7684\u6307\u9488\uff0c\u6700\u540e\u6570\u7ec4\u7684\u957f\u5ea6\u5c31\u662f\u586b\u5165\u4e86\u591a\u5c11\u4e2a\u6570\u3002</p> <p></p> <pre><code>class Solution {\npublic:\n    int removeDuplicates(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        int cnt = 1;\n        int fill = 1;\n        // \u8fd9\u91cc\u76f4\u63a5\u4ece1\u5f00\u59cb\u907f\u514d\u540e\u9762\u6761\u4ef6\u5224\u65ad\n        for (int cur = 1; cur &lt; n; ++cur) {\n            if (nums[cur] != nums[cur-1])  \n                cnt = 1;\n            else \n                ++cnt;\n\n            if (cnt &lt;= 2){\n                nums[fill] = nums[cur];\n                ++fill;\n            }\n        }\n        return fill;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#88","title":"88.\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4","text":"<p>2021-04-05</p> <p></p> <pre><code>class Solution {\npublic:\n    void merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) {\n         int idx = m + n - 1;\n         int i = m - 1, j = n - 1;\n        while (i &gt;= 0 || j &gt;= 0) {\n            if (i &gt;= 0 &amp;&amp; j &gt;= 0) {\n                if (nums1[i] &gt; nums2[j]) {\n                    nums1[idx--] = nums1[i];\n                    i--;\n                } else {\n                    nums1[idx--] = nums2[j];\n                    j--;\n                }\n            } else {\n                if (i == -1) {\n                    nums1[idx--] = nums2[j];\n                    j--;\n                }else {\n                    nums1[idx--] = nums1[i];\n                    i--;\n                }\n            }\n\n        }\n    }\n};\n</code></pre> <p></p>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#781","title":"781. \u68ee\u6797\u91cc\u9762\u7684\u5154\u5b50","text":"<p>2021-04-04</p> <p></p> <pre><code>class Solution {\npublic:\n    int numRabbits(vector&lt;int&gt; &amp;answers) {\n        unordered_map&lt;int, int&gt; count;\n        for (int y : answers) {\n            ++count[y];\n        }\n        int ans = 0;\n        for (auto &amp;[y, x] : count) {\n            ans += (x + y) / (y + 1) * (y + 1);\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u4e24\u53ea\u76f8\u540c\u989c\u8272\u7684\u5154\u5b50\u770b\u5230\u7684\u5176\u4ed6\u540c\u8272\u5154\u5b50\u6570\u5fc5\u7136\u662f\u76f8\u540c\u7684\u3002\u53cd\u4e4b\uff0c\u82e5\u4e24\u53ea\u5154\u5b50\u770b\u5230\u7684\u5176\u4ed6\u540c\u8272\u5154\u5b50\u6570\u4e0d\u540c\uff0c\u90a3\u4e48\u8fd9\u4e24\u53ea\u5154\u5b50\u989c\u8272\u4e5f\u4e0d\u540c\u3002</p> <p>\u56e0\u6b64\uff0c\u5c06 \\textit{answers}answers \u4e2d\u503c\u76f8\u540c\u7684\u5143\u7d20\u5206\u4e3a\u4e00\u7ec4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u7ec4\uff0c\u8ba1\u7b97\u51fa\u5154\u5b50\u7684\u6700\u5c11\u6570\u91cf\uff0c\u7136\u540e\u5c06\u6240\u6709\u7ec4\u7684\u8ba1\u7b97\u7ed3\u679c\u7d2f\u52a0\uff0c\u5c31\u662f\u6700\u7ec8\u7684\u7b54\u6848\u3002</p> <p>\u4f8b\u5982\uff0c\u73b0\u5728\u6709 13 \u53ea\u5154\u5b50\u56de\u7b54 5\u3002\u5047\u8bbe\u5176\u4e2d\u6709\u4e00\u53ea\u7ea2\u8272\u7684\u5154\u5b50\uff0c\u90a3\u4e48\u68ee\u6797\u4e2d\u5fc5\u7136\u6709 6 \u53ea\u7ea2\u5154\u5b50\u3002\u518d\u5047\u8bbe\u5176\u4e2d\u8fd8\u6709\u4e00\u53ea\u84dd\u8272\u7684\u5154\u5b50\uff0c\u540c\u6837\u7684\u9053\u7406\u68ee\u6797\u4e2d\u5fc5\u7136\u6709 66 \u53ea\u84dd\u5154\u5b50\u3002\u4e3a\u4e86\u6700\u5c0f\u5316\u53ef\u80fd\u7684\u5154\u5b50\u6570\u91cf\uff0c\u6211\u4eec\u5047\u8bbe\u8fd9 12 \u53ea\u5154\u5b50\u90fd\u5728\u8fd9 13 \u53ea\u5154\u5b50\u4e2d\u3002\u90a3\u4e48\u8fd8\u6709\u4e00\u53ea\u989d\u5916\u7684\u5154\u5b50\u56de\u7b54 5\uff0c\u8fd9\u53ea\u5154\u5b50\u53ea\u80fd\u662f\u5176\u4ed6\u7684\u989c\u8272\uff0c\u8fd9\u4e00\u989c\u8272\u7684\u5154\u5b50\u4e5f\u6709 6 \u53ea\u3002\u56e0\u6b64\u8fd9\u79cd\u60c5\u51b5\u4e0b\u6700\u5c11\u4f1a\u6709 18 \u53ea\u5154\u5b50\u3002</p> <p>\u4e00\u822c\u5730\uff0c\u5982\u679c\u6709 x \u53ea\u5154\u5b50\u90fd\u56de\u7b54y\uff0c\u5219\u81f3\u5c11\u6709 x / (y + 1) \u79cd\u4e0d\u540c\u7684\u989c\u8272\uff0c\u4e14\u6bcf\u79cd\u989c\u8272\u6709 y+1 \u53ea\u5154\u5b50\uff0c\u56e0\u6b64\u5154\u5b50\u6570\u81f3\u5c11\u4e3a</p> <p></p> <p>\u6211\u4eec\u53ef\u4ee5\u7528\u54c8\u5e0c\u8868\u7edf\u8ba1 answers \u4e2d\u5404\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\u5957\u7528\u4e0a\u8ff0\u516c\u5f0f\u8ba1\u7b97\uff0c\u5e76\u5c06\u8ba1\u7b97\u7ed3\u679c\u7d2f\u52a0\uff0c\u5373\u4e3a\u6700\u7ec8\u7b54\u6848\u3002</p> <p>\u5411\u4e0a\u53d6\u6574\uff1a (x + y) / (y + 1)</p>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1143","title":"1143.\u6700\u957f\u4e0a\u5347\u516c\u5171\u5b50\u5e8f\u5217","text":"<p>2021-04-05</p> <p>https://leetcode-cn.com/problems/longest-common-subsequence/</p> <p></p> <pre><code>class Solution {\npublic:\n    int longestCommonSubsequence(string text1, string text2) {\n        const int M = text1.size();\n        const int N = text2.size();\n        vector&lt;vector&lt;int&gt;&gt; dp(M + 1, vector&lt;int&gt;(N + 1, 0));\n        for (int i = 1; i &lt;= M; ++i) {\n            for (int j = 1; j &lt;= N; ++j) {\n                if (text1[i - 1] == text2[j - 1]) {\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                } else {\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);\n                }\n            }\n        }\n        return dp[M][N];\n    }\n};\n</code></pre> <p></p> <pre><code>class Solution {\npublic:\n    int longestCommonSubsequence(string s1, string s2) {\n        int n = s1.size(), m = s2.size();\n        s1 = \" \" + s1, s2 = \" \" + s2;\n        int f[n+1][m+1];\n        memset(f, 0, sizeof(f));\n\n        for(int i = 0; i &lt;= n; i++) f[i][0] = 1;\n        for(int j = 0; j &lt;= m; j++) f[0][j] = 1;\n\n        for(int i = 1; i &lt;= n; i++) {\n            for(int j = 1; j &lt;= m; j++) {\n                if(s1[i] == s2[j])\n                    f[i][j] = f[i-1][j-1] + 1;\n                else\n                    f[i][j] = max(f[i-1][j], f[i][j-1]);\n            }\n        }\n\n        return f[n][m] - 1;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1721","title":"\u9762\u8bd5\u989817.21 \u76f4\u65b9\u56fe\u7684\u6c34\u91cf","text":"<p>\u7b97\u6cd5\u601d\u60f3\uff1a\u603b\u4f53\u79ef\u51cf\u53bb\u67f1\u5b50\u7684\u4f53\u79ef\u5c31\u662f\u96e8\u6c34\u7684\u4f53\u79ef</p> <pre><code>class Solution {\npublic:\n    int trap(vector&lt;int&gt;&amp; height) {\n        int Sum = accumulate(height.begin(), height.end(), 0); // \u5f97\u5230\u67f1\u5b50\u7684\u4f53\u79ef\n        int volume = 0; // \u603b\u4f53\u79ef\u548c\u9ad8\u5ea6\u521d\u59cb\u5316\n        int high = 1;\n        int size = height.size();\n        int left = 0; // \u53cc\u6307\u9488\u521d\u59cb\u5316\n        int right = size - 1;\n        while (left &lt;= right) {\n            // \u5728\u5de6\u8fb9\u627e\u5230\u7b2c\u4e00\u4e2a\u9ad8\u5ea6 &gt;= height\u7684\n            while (left &lt;= right &amp;&amp; height[left] &lt; high) {\n                left++;\n            }\n            // \u5728\u53f3\u8fb9\u627e\u5230\u7b2c\u4e00\u4e2a\u9ad8\u5ea6 &gt;= height\u7684\n            while (left &lt;= right &amp;&amp; height[right] &lt; high) {\n                right--;\n            }\n            // \u4e8c\u8005\u5dee\u503c+ 1\u5c31\u662f\u8fd9\u4e00\u5c42\u7684\u4f53\u79ef\n            volume += right - left + 1; // \u6bcf\u4e00\u5c42\u7684\u5bb9\u91cf\u90fd\u52a0\u8d77\u6765\n            high++; // \u9ad8\u5ea6\u52a0\u4e00\n        }\n        return volume - Sum; // \u603b\u4f53\u79ef\u51cf\u53bb\u67f1\u5b50\u4f53\u79ef\uff0c\u5373\u96e8\u6c34\u603b\u91cf\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#74","title":"74.\u641c\u7d22\u4e8c\u7ef4\u77e9\u9635","text":"<p>\u4e8c\u5206\u641c\u7d22\u3002</p> <p></p> <pre><code>class Solution {\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt; matrix, int target) {\n        auto row = upper_bound(matrix.begin(), matrix.end(), target, [](const int b, const vector&lt;int&gt; &amp;a) {\n            return b &lt; a[0];\n        });\n        if (row == matrix.begin()) {\n            return false;\n        }\n        --row;\n        return binary_search(row-&gt;begin(), row-&gt;end(), target);\n    }\n};\n</code></pre> <p>lower_bound( begin,end,num)\uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002</p> <p>upper_bound( begin,end,num)\uff1a\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5927\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002</p> <p>\u5728\u4ece\u5927\u5230\u5c0f\u7684\u6392\u5e8f\u6570\u7ec4\u4e2d\uff0c\u91cd\u8f7dlower_bound()\u548cupper_bound()</p> <p>lower_bound( begin,end,num,greater() ):\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8e\u6216\u7b49\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 <p>upper_bound( begin,end,num,greater() ):\u4ece\u6570\u7ec4\u7684begin\u4f4d\u7f6e\u5230end-1\u4f4d\u7f6e\u4e8c\u5206\u67e5\u627e\u7b2c\u4e00\u4e2a\u5c0f\u4e8enum\u7684\u6570\u5b57\uff0c\u627e\u5230\u8fd4\u56de\u8be5\u6570\u5b57\u7684\u5730\u5740\uff0c\u4e0d\u5b58\u5728\u5219\u8fd4\u56deend\u3002\u901a\u8fc7\u8fd4\u56de\u7684\u5730\u5740\u51cf\u53bb\u8d77\u59cb\u5730\u5740begin,\u5f97\u5230\u627e\u5230\u6570\u5b57\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002 <pre><code>#include&lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n  int a[] = {1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4};\n\n  cout &lt;&lt; (lower_bound(a, a + 12, 4) - a) &lt;&lt; endl; //\u8f93\u51fa 9\n  cout &lt;&lt; (upper_bound(a, a + 12, 4) - a) &lt;&lt; endl; //\u8f93\u51fa 12\n  cout &lt;&lt; (lower_bound(a, a + 12, 1) - a) &lt;&lt; endl; //\u8f93\u51fa 0\n  cout &lt;&lt; (upper_bound(a, a + 12, 1) - a) &lt;&lt; endl; //\u8f93\u51fa 3\n  cout &lt;&lt; (lower_bound(a, a + 12, 3) - a) &lt;&lt; endl; //\u8f93\u51fa 6\n  cout &lt;&lt; (upper_bound(a, a + 12, 3) - a) &lt;&lt; endl; //\u8f93\u51fa 9\n  cout &lt;&lt; (lower_bound(a, a + 12, 5) - a) &lt;&lt; endl; //\u8f93\u51fa 12\n  cout &lt;&lt; (upper_bound(a, a + 12, 5) - a) &lt;&lt; endl; //\u8f93\u51fa 12\n  cout &lt;&lt; (lower_bound(a, a + 12, 0) - a) &lt;&lt; endl; //\u8f93\u51fa 0\n  cout &lt;&lt; (upper_bound(a, a + 12, 0) - a) &lt;&lt; endl; //\u8f93\u51fa 0\n\n  return 0;\n}\n</code></pre> <p>\u8f6c\u53d8\u4e3a\u4e00\u7ef4\u4e8c\u5206</p> <pre><code>class Solution {\npublic:\n    bool searchMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix, int target) {\n        int m = matrix.size(), n = matrix[0].size();\n        int low = 0, high = m * n - 1;\n        while (low &lt;= high) {\n            int mid = (high - low) / 2 + low;\n            int x = matrix[mid / n][mid % n];\n            if (x &lt; target) {\n                low = mid + 1;\n            } else if (x &gt; target) {\n                high = mid - 1;\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1006","title":"1006. \u7b28\u9636\u4e58","text":"<p>2021-04-01</p> <p></p> <pre><code>class Solution {\npublic:\n    int clumsy(int N) {\n        stack&lt;int&gt; stk;\n        stk.push(N);\n        N--;\n\n        int index = 0; // \u7528\u4e8e\u63a7\u5236\u4e58\u3001\u9664\u3001\u52a0\u3001\u51cf\n        while (N &gt; 0) {\n            if (index % 4 == 0) {\n                stk.top() *= N;\n            } else if (index % 4 == 1) {\n                stk.top() /= N;\n            } else if (index % 4 == 2) {\n                stk.push(N);\n            } else {\n                stk.push(-N);\n            }\n            index++;\n            N--;\n        }\n\n        // \u628a\u6808\u4e2d\u6240\u6709\u7684\u6570\u5b57\u4f9d\u6b21\u5f39\u51fa\u6c42\u548c\n        int sum = 0;\n        while (!stk.empty()) {\n            sum += stk.top();\n            stk.pop();\n        }\n        return sum;\n    }\n};\n</code></pre> <pre><code>// \u8fd8\u6709\u8fd9\u79cd\u7528\u6cd5\nstk.top() *= N; \n// \u5c0f\u6280\u5de7 \u9762\u5bf9\u8981\u51cf\u53bb\u7684\u6570\u53ef\u4ee5\u53d8\u4e3a+(-N)\nstk.push(-N);\n// \u76f8\u540c\u7684\u8fd8\u6709 \u5806\u9ed8\u8ba4\u5927\u9876\u5806 \u5982\u679c\u8981\u6784\u5efa\u5c0f\u9876\u5806 \u5c31\u628a-element\u63d2\u5165push\u8fdb\u5806\u4e4b\u4e2d\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#acwing","title":"Acwing\u6bcf\u65e5\u4e00\u9898","text":""},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3725-20211026","title":"3725. \u5356\u7f50\u5934 : \u6570\u5b66(2021/10/26)","text":"<p>\u533a\u95f4\u6700\u5927\u957f\u5ea6\u4e3a<code>l</code>\u5373<code>[l, l*2 - 1]</code></p> <p></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nint main()\n{\n    int T;\n    cin &gt;&gt; T;\n    while (T--) {\n        int l, r;\n        cin &gt;&gt; l &gt;&gt; r;\n        if (r &gt;= 2 * l) cout &lt;&lt; \"NO\" &lt;&lt; endl;\n        else cout &lt;&lt; \"YES\" &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3705-mex-20211026","title":"3705. \u5b50\u96c6mex\u503c : \u6570\u5b66(2021/10/26)","text":"<p>\u7edf\u8ba1\u4ece0\u5230100\u7684\u6570\u5b57\u4e2a\u6570</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\n\nint main() {\n    int T;\n    cin &gt;&gt; T;\n    while (T --) {\n            int n;\n            cin &gt;&gt; n;\n            unordered_map&lt;int, int&gt; m;\n\n            for (int i = 0; i &lt; n; i++) {\n                    int tmp;\n                    cin &gt;&gt; tmp;\n                    m[tmp]++;\n            }\n            int mexa, mexb;\n            for (int i = 0; i &lt; 101; i++) {\n                    if (m.find(i) != m.end()) {\n                            m[i]--;\n                            continue;\n                    } else {\n                            mexa = i;\n                            break;\n                    }\n            }\n\n            for (int i = 0; i &lt; 101; i++) {\n                    if (m.find(i) != m.end() &amp;&amp; m[i] != 0) {\n                            m[i]--;\n                            continue;\n                    } else {\n                            mexb = i;\n                            break;\n                    }\n            }\n            cout &lt;&lt; mexa + mexb &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3732-20211025","title":"3732. \u77e9\u9635\u590d\u539f \uff1a\u6784\u9020\u601d\u7ef4\u9898(2021/10/25)","text":"<p>\u6839\u636e\u5217\u9996tar\u503c\u786e\u5b9a\u4ed6\u5728\u67d0\u884c\u4e2d\u7684\u5217\u4f4d\u7f6e \u7136\u540e\u586b\u5145\u8be5\u5217\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nconst int N = 505;\n\nint a[N][N], b[N][N], c[N][N];\n\nusing namespace std;\n\nint main()\n{\n    int T;\n    cin &gt;&gt; T;\n    while (T --) {\n        int n , m;\n        cin &gt;&gt; n &gt;&gt; m;\n        unordered_map&lt;int, int &gt; idx;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                cin &gt;&gt; a[i][j];\n                idx[a[i][j]] = j;\n            }\n        }\n        for (int i = 0; i &lt; m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                cin &gt;&gt; b[i][j];\n            }\n        }\n\n        for (int i = 0; i &lt; m; i++) {\n            int tar = b[i][0];\n            int col = idx[tar];\n            for (int j = 0; j &lt; n; j++) {\n                c[j][col] = b[i][j];\n            }\n        }\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j ++ ) {\n                cout &lt;&lt; c[i][j] &lt;&lt; (j == m-1?\"\":\" \");\n            }\n            cout &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3731-20211025","title":"3731. \u5e8f\u5217\u51d1\u96f6 \uff1a \u601d\u7ef4\u9898(2021/10/25)","text":"<p>\u4e24\u4e24\u4e00\u7ec4 \u5728\u540c\u4e00\u7ec4\u4e2d\u548c\u4e3a0</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nint a[105];\nint b[105];\n\nint main()\n{\n    int T;\n    cin &gt;&gt; T;\n    while (T -- ) {\n        int n;\n        cin &gt;&gt; n;\n        for (int i = 0; i &lt; n; i ++ ) {\n            cin &gt;&gt; a[i];\n            if (i % 2 == 1) {\n                b[i - 1] = -a[i];\n                b[i] = a[i - 1];\n            }\n        }\n        for (int i = 0; i &lt; n; i ++ ) {\n            cout &lt;&lt; b[i] &lt;&lt; (i==n-1?\"\":\" \");\n        }\n        cout &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3730-20211025","title":"3730. \u5bfb\u627e\u5e8f\u5217(2021/10/25)","text":"<p>\u6784\u9020\uff1a\u5bf9\u4e8ei\u4fdd\u8bc1\u4e0ei-1\u4e0d\u540c\u5373\u53ef \u6700\u540e\u515c\u5e95\u68c0\u67e5n - 1\u4e0e0\u662f\u5426\u4e5f\u6ee1\u8db3</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int N = 110;\n\nint n;\nint a[4][N];\n\nint main()\n{\n    int T;\n    cin &gt;&gt; T;\n    while (T -- )\n    {\n        cin &gt;&gt; n;\n        for (int i = 0; i &lt; 3; i ++ )\n            for (int j = 0; j &lt; n; j ++ )\n                cin &gt;&gt; a[i][j];\n        a[3][0] = a[0][0];\n        for (int i = 1; i &lt; n - 1; i ++ )\n            for (int j = 0; j &lt; 3; j ++ )\n                if (a[3][i - 1] != a[j][i])\n                {\n                    a[3][i] = a[j][i];\n                    break;\n                }\n\n        for (int i = 0; i &lt; 3; i ++ )\n            if (a[i][n - 1] != a[3][0] &amp;&amp; a[i][n - 1] != a[3][n - 2])\n            {\n                a[3][n - 1] = a[i][n - 1];\n                break;\n            }\n        for (int i = 0; i &lt; n; i ++ ) cout &lt;&lt; a[3][i] &lt;&lt; ' ';\n        cout &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3824","title":"3824.\u5728\u6821\u65f6\u95f4","text":"<p>\u7b80\u5355\u6a21\u62df</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n\n\nusing namespace std;\n\nint a[110];\n\n\n\nint main() {\n    int T;\n    int n;\n    cin &gt;&gt; T;\n    while(T--) {\n       cin &gt;&gt; n;\n       for (int i = 0; i &lt; n; i++) {\n           cin &gt;&gt; a[i];\n       }\n\n       int cur = 0, ans = 0;\n       int flag = 0;\n       while (cur &lt; n) {\n           if (a[cur] == 1) {\n               ans ++, cur ++;\n               flag = 1;\n           } else if (flag &amp;&amp; cur + 1 &lt; n &amp;&amp; a[cur + 1] != 0) { //\u5982\u679c\u4e0d\u662f00\u8bf4\u660e\u5728\u6821 0 1\n               ans ++, cur ++;\n           } else { // 00\u60c5\u51b5\n               while (cur &lt; n &amp;&amp; a[cur] == 0) { // 00\n                   cur++;\n               }\n           }\n       }\n       cout &lt;&lt; ans &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3781","title":"3781.\u4e58\u8f66\u95ee\u9898","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nint a[35];\n\nint main () {\n    int T;\n    cin &gt;&gt;T;\n    while (T--) {\n        int n, m;\n        cin &gt;&gt; n &gt;&gt; m;\n        int ans  = 0;\n        for (int i = 0; i &lt;n; i++) {\n            cin &gt;&gt; a[i];\n        }\n        for(int i = 0; i &lt; n; i++) {\n            ans++;\n            int sum = a[i];\n            while ((i + 1) &lt; n &amp;&amp; a[i + 1] + sum &lt;= m) {\n                sum += a[i + 1];\n                i++;\n\n            }\n            //cout &lt;&lt; sum &lt;&lt; endl;\n        }\n        cout &lt;&lt; ans &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3729","title":"3729. \u6539\u53d8\u6570\u7ec4\u5143\u7d20","text":"<p>\u533a\u95f4\u5dee\u5206\uff1a\u8fd9\u4e2a\u4e0d\u9898\u76ee\u4e0d\u80fd\u76f4\u63a5\u7528\uff0c\u9700\u8981\u7ef4\u62a4\u8be5\u533a\u95f4\u7684\u6b21\u6570\u3002</p> <p>\u7b97\u6cd5\u539f\u7406\uff1a\u7ef4\u62a4\u6570\u636e<code>b[1 - n]</code>, \u6bcf\u6b21\u64cd\u4f5c\u5373\u5c06<code>b[l - r]</code>\u533a\u95f4\u505a+k\u64cd\u4f5c\uff1a</p> <p><code>b[l]++,b[r + 1]--</code>\u3002</p> <p>\u518d\u4f7f\u7528\u524d\u7f00\u548c\u4fbf\u53ef\u4ee5\u5f97\u5230\u76ee\u6807\u6570\u7ec4</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int N = 200010;\n\nint n;\nint b[N];\n\nint main()\n{\n    int T;\n    scanf(\"%d\", &amp;T);\n    while (T -- )\n    {\n        scanf(\"%d\", &amp;n);\n        memset(b, 0, (n + 1) * 4);\n        for (int i = 1; i &lt;= n; i ++ )\n        {\n            int a;\n            scanf(\"%d\", &amp;a);\n            int l = max(1, i - a + 1), r = i;\n            b[l] ++, b[r + 1] -- ;\n        }\n        for (int i = 1; i &lt;= n; i ++ )\n        {\n            b[i] += b[i - 1];\n            printf(\"%d \", !!b[i]);\n        }\n        puts(\"\");\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#acwing-3720","title":"AcWing 3720. \u6570\u7ec4\u91cd\u6392","text":"<pre><code>4\n3 4\n1 2 3\n1 1 2\n\n2 6\n1 4\n2 5\n\n4 4\n1 2 3 4\n1 2 3 4\n\n1 5\n5\n5\n</code></pre> <pre><code>Yes\nYes\nNo\nNo\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nconst int N = 505;\n\nint a[N], b[N];\nint main() {\n    int T;\n    cin &gt;&gt;T;\n    while (T--) {\n        int x, y;\n        cin &gt;&gt; x &gt;&gt; y;\n        for (int i = 0; i &lt; x; i++) {\n            cin &gt;&gt; a[i];\n        }\n        for (int j = 0; j &lt; x; j++) {\n            cin &gt;&gt; b[j];\n        }\n        sort(a, a + x);\n        sort(b, b + x, greater&lt;int&gt;());\n        int flag = 1;\n        for (int i = 0; i &lt; x; i++) {\n            if (a[i] + b[i] &gt; y) {\n                cout &lt;&lt; \"No\" &lt;&lt; endl;\n                flag = 0;\n                break;\n            }\n        }\n        if (flag) cout &lt;&lt; \"Yes\" &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3686","title":"3686. \u79fb\u52a8\u5e8f\u5217","text":"<p>\u7edf\u8ba1\u6700\u5de6\u7aef1\u5f97\u5230<code>index</code>\u4e3a<code>l</code>\u548c\u6700\u53f3\u7aef1\u5f97\u5230<code>index</code>\u4e3a<code>r</code>\uff0c\u6700\u540e\u7edf\u8ba1<code>[l, r]</code>\u4e4b\u95f4\u76840\u5373\u53ef\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n\nint a[55];\n\nint main() {\n    int T;\n    cin &gt;&gt; T;\n    int n = 0;\n    while (T--) {\n        cin &gt;&gt; n;\n        for (int i = 0; i &lt; n; i++) {\n            cin &gt;&gt; a[i];\n        }\n        int l = 0;\n        for (int i = 0; i &lt; n; i++) {\n            if (a[i] == 1) {\n                l = i;break;\n            }\n        }\n        int r = 0;\n        for (int i = n - 1; i &gt;= 0; i--) {\n            if (a[i] == 1) {\n                r = i;break;\n            }\n        }\n        int cnt = 0;\n        for (int i = l; i &lt; r; i++) {\n            if (a[i] == 0) {\n                cnt++;\n            }\n        }\n        cout &lt;&lt; cnt &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3646","title":"3646. \u5206\u6c34\u679c","text":"<p>\u8d2a\u5fc3\u7b97\u6cd5\uff1a\u4e09\u79cd\u53ef\u80fd\u7ec4\u5408 </p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nvoid resort(int &amp;a, int &amp;b, int &amp;c) {\n    int arr[3] = {a, b, c};\n    sort(arr, arr + 3, greater&lt;int&gt;());\n    a = arr[0], b = arr[1], c = arr[2];\n}\n\nint work(int a, int b, int c){\n    int ans = 0;\n    if (a &gt; 0) a--, ans++;\n    if (b &gt; 0) b--, ans++;\n    if (c &gt; 0) c--, ans++;\n    resort(a, b, c);\n    if (a &gt; 0 &amp;&amp; b &gt; 0) a--, b--, ans++;\n    if (a &gt; 0 &amp;&amp; c &gt; 0) a--, c--, ans++;\n    if (b &gt; 0 &amp;&amp; c &gt; 0) c--, b--, ans++;\n\n\n    if (a &gt; 0 &amp;&amp; b &gt; 0 &amp;&amp; c &gt; 0) a--, b--, c--, ans++;\n\n    return ans;    \n}\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    while (n --) {\n        int a, b ,c;\n        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n        cout &lt;&lt; work(a, b, c) &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3629","title":"3629. \u540c\u5fc3\u5706\u6d82\u8272","text":"<p>\u7b80\u5355\u9898\u76ee\uff1a\u4e0d\u8fc7\u8981\u6ce8\u610f\u7cbe\u5ea6\u95ee\u9898</p> <p><code>#definePI acos(-1)</code></p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 105;\n#define PI acos(-1)\n\nlong long  a[N];\n\n\n\nint main() {\n    int n;\n    cin &gt;&gt; n;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    sort(a, a + n, greater&lt;int&gt;());\n    double ans = 0;\n    long long temp = 0;\n    for (int i = 0; i &lt; n; i += 2) {\n        temp += a[i] * a[i];\n    }\n    for (int i = 1; i &lt; n; i += 2) {\n        temp -= a[i] * a[i];\n    }\n    ans = PI * temp;\n\n\n    printf(\"%.6lf\\n\", ans);\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3624","title":"3624. \u4e09\u503c\u5b57\u7b26\u4e32","text":"<p>\u53cc\u6307\u9488</p> <p>\u91c7\u7528\u4e09\u4e2a\u53d8\u91cf\u7ef4\u62a4\u72b6\u6001 \u5de6\u6307\u9488\u79fb\u52a8\u7684\u60c5\u51b5\u662f\u5f53\u524d\u533a\u95f4\u5185\u7684\u4e2a\u6570\u5927\u4e8e1</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int N = 200010;\n\nint n;\nchar s[N];\nint cnt[3];\n\nint main()\n{\n    int T;\n    scanf(\"%d\", &amp;T);\n    while (T -- )\n    {\n        scanf(\"%s\", s);\n        n = strlen(s);\n\n        memset(cnt, 0, sizeof cnt);\n        int res = n + 1;\n        for (int i = 0, j = 0; i &lt; n; i ++ )\n        {\n            cnt[s[i] - '1'] ++ ;\n            while (cnt[s[j] - '1'] &gt; 1) cnt[s[j ++ ] - '1'] -- ;\n            if (cnt[0] &amp;&amp; cnt[1] &amp;&amp; cnt[2])\n                res = min(res, i - j + 1);\n        }\n\n        if (res == n + 1) res = 0;\n        printf(\"%d\\n\", res);\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3617","title":"3617. \u5b50\u77e9\u5f62\u8ba1\u6570","text":"<p>\u601d\u7ef4\u9898</p> <p>\u5c06k\u5206\u6210\u4e24\u4e2a\u6570\u76f8\u4e58\u7684\u5f62\u5f0f\uff08\u5047\u8bbe\u4e3ak = a * b\uff09</p> <p>\u5728row[]\u4e2d\u627e\u51fa\u6709\u591a\u5c11\u4e2aa\u4e2a\u8fde\u7eed\u76841\uff1b \u5728col[]\u4e2d\u627e\u51fa\u6709\u591a\u5c11\u4e2ab\u4e2a\u8fde\u7eed\u76841\uff1b</p> <p>\u5c06\u4e24\u8005\u76f8\u4e58\u518d\u7d2f\u52a0\uff1b</p> <p></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;algorithm&gt;\n#include &lt;cstring&gt;\n\nusing namespace std;\n\ntypedef long long LL;\n\nconst int N = 40010;\n\nint n, m, k;\nbool row[N], col[N];\n\nLL count(int x, bool arr[], int len)\n{\n    int res = 0, cnt = 0;\n    for(int i = 1;i &lt;= len;i ++)\n        if(arr[i]) cnt ++;\n        else\n        {\n            if(cnt &gt;= x) res += cnt - x + 1;\n            cnt = 0;\n        }\n    if(cnt &gt;= x) res += cnt - x + 1;\n\n    return res;\n}\n\nint main()\n{\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    for(int i = 1;i &lt;= n;i ++) cin &gt;&gt; row[i];\n    for(int i = 1;i &lt;= m;i ++) cin &gt;&gt; col[i];\n\n    LL res = 0;\n    for(int i = 1;i &lt;= k &amp;&amp; i &lt;= 40010;i ++)\n        if(k % i == 0)\n        {\n            int a = i, b = k / i;\n            LL cnta = count(a, row, n), cntb = count(b, col, m);\n            res += cnta * cntb;\n        }\n\n    cout &lt;&lt; res &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3583","title":"3583.\u6574\u6570\u5206\u7ec4","text":"<p>dp</p> <p><code>dp[i][j]</code>\u8868\u793a\u524di\u4e2a\u6570\u5206\u6210j\u7ec4\u7684\u6700\u5927\u65b9\u6848\u6570</p> <p>\u8f6c\u79fb\u65b9\u7a0b<code>dp[i][j] = max(dp[i - 1][j], dp[k - 1][j - 1] + (i - k + 1))</code>\u8868\u793a\u5c06\u7b2ci\u4e2a\u5b57\u7b26\u5212\u5206\u5230\u7b2cj\u7ec4\u4e2d \u4e14\u7b2cj\u7ec4\u662f\u4ecek\u5f00\u59cb\u7684 \u662f\u5f53\u524d\u7ec4\u4e2d\u6700\u5c0f\u7684</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int N = 5010;\n\nint n, m;\nint w[N];\nint f[N][N];\n\nint main()\n{\n    scanf(\"%d%d\", &amp;n, &amp;m);\n    for (int i = 1; i &lt;= n; i ++ ) scanf(\"%d\", &amp;w[i]);\n    sort(w + 1, w + n + 1);\n\n    for (int i = 1, k = 1; i &lt;= n; i ++ )\n    {\n        while (w[i] - w[k] &gt; 5) k ++ ;\n        for (int j = 1; j &lt;= m; j ++ )\n            f[i][j] = max(f[i - 1][j], f[k - 1][j - 1] + (i - k + 1));\n    }\n\n    printf(\"%d\\n\", f[n][m]);\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3580","title":"3580.\u6574\u6570\u914d\u5bf9","text":"<p>\u7b80\u5355\u601d\u7ef4</p> <p>1.\u5148\u9884\u5904\u7406 \u628a\u6210\u5bf9\u7684\u5904\u7406\u5b8c\u6bd5</p> <p>2.\u518d\u5bf9\u65b0\u6570\u7ec4\u505a\u6392\u5e8f</p> <p>3.\u6700\u4f18\u89e3\u662f\u4f4e\u4f4d\u4e0e\u6700\u8fd1\u9ad8\u4f4d\u505a\u914d\u5bf9</p> <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nconst int N = 1e5;\nint a[N];\nint main() {\n    int n;\n    cin&gt;&gt; n;\n    unordered_map&lt;int, int&gt; um;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n        um[a[i]]++;\n    }\n    vector&lt;int&gt; temp;\n    for (auto x : um) {\n        if (x.second % 2) {\n            temp.push_back(x.first);\n        }\n    }\n    n = temp.size();\n    sort(temp.begin(), temp.end());\n\n    int ans = 0;\n    for (int i = 1; i &lt; n; i += 2) {\n        ans += abs(temp[i - 1] - temp[i]);\n    }\n    cout &lt;&lt; ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3333k-","title":"3333.K-\u4f18\u5b57\u7b26\u4e32","text":"<p>\u601d\u7ef4\u9898\u76ee</p> <p></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nconst int N = 200010;\n\nint n, k;\nchar str[N];\n\nint main()\n{\n    int T;\n    scanf(\"%d\", &amp;T);\n    for (int C = 1; C &lt;= T; C ++ )\n    {\n        printf(\"Case #%d: \", C);\n        scanf(\"%d%d%s\", &amp;n, &amp;k, str);\n        int cnt = 0;\n        for (int i = 0, j = n - 1; i &lt; j; i ++, j -- )\n            if (str[i] != str[j])\n                cnt ++ ;\n        printf(\"%d\\n\", abs(cnt - k));\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#34832","title":"3483.2\u7684\u6155\u6b21\u65b9","text":"<p>\u9012\u5f52</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n\nusing namespace std;\n\nstring dfs(int n)\n{\n    string res;\n    for (int i = 14; i &gt;= 0; i -- )\n        if (n &gt;&gt; i &amp; 1)\n        {\n            // \u4e0d\u662f\u7b2c\u4e00\u4e2a\u7684\u8bdd\u9700\u8981\u76f8\u52a0\n            if (res.size()) res += '+';\n            // i\u4e3a0\n            if (!i) res += \"2(0)\";\n            // i\u4e3a1\n            else if (i == 1) res += \"2\";\n            // i &gt;= 2\n            else res += \"2(\" + dfs(i) + \")\";\n        }\n    return res;\n}\n\nint main()\n{\n    int n;\n    while (cin &gt;&gt; n)\n        cout &lt;&lt; dfs(n) &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3404","title":"3404.\u8c01\u662f\u4f60\u7684\u6f5c\u5728\u670b\u53cb","text":"<p>\u7b80\u5355\u7edf\u8ba1</p> <p></p> <pre><code>#include &lt;bits/stdc++.h&gt;\n\nusing namespace std;\nint a[202];\nint main() {\n    int n, m;\n    cin &gt;&gt; n &gt;&gt; m;\n    unordered_map&lt;int, int&gt; his;\n    int x;\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; x;\n        a[i] = x;\n        his[x] ++;\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        if (his[a[i]] - 1) {\n            cout &lt;&lt; his[a[i]] - 1 &lt;&lt; endl;\n        } else {\n            cout &lt;&lt; \"BeiJu\" &lt;&lt; endl;\n        }\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3481","title":"3481.\u9636\u4e58\u7684\u548c","text":"<p>\u542f\u53d1\u5f0f\u526a\u679d\uff0c\u4e8c\u8fdb\u5236\u679a\u4e3e\uff0c\u7206\u641c</p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;unordered_set&gt;\n\nusing namespace std;\n\nint f[10];\nunordered_set&lt;int&gt; S;\n\nint main()\n{\n    for (int i = 0; i &lt; 10; i ++ )\n    {\n        f[i] = 1;\n        for (int j = i; j; j -- )\n            f[i] *= j;\n    }\n\n    // \u603b\u5171\u670910\u4e2a\u6570\u5b57 \u6240\u6709\u5c31\u67092^10\u4e2a\u72b6\u6001\n    for (int i = 1; i &lt; 1 &lt;&lt; 10; i ++ )\n    {\n        int s = 0;\n        // \u5bf9\u5f53\u524di\u72b6\u6001\u68c0\u67e5 \u6bcf\u4e00\u4f4d\u7684\u503c\n        for (int j = 0; j &lt; 10; j ++ )\n            if (i &gt;&gt; j &amp; 1)\n                s += f[j];\n       // \u63d2\u5165\u5230\u96c6\u5408\u4e2d\n        S.insert(s);\n    }\n\n    int n;\n    while (cin &gt;&gt; n, n &gt;= 0)\n        if (S.count(n))\n            puts(\"YES\");\n        else\n            puts(\"NO\");\n    return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;unordered_set&gt;\n\nusing namespace std;\n\nint f[10];\nunordered_set&lt;int&gt; S;\n\nvoid init() {\n    f[0] = f[1] = 1;\n    for (int i = 2; i &lt; 10; i++) {\n        f[i] = f[i - 1] * i;\n        //cout &lt;&lt; f[i] &lt;&lt; endl;\n    }\n}\nbool flag;\nvoid dfs(int cur, int sum, int &amp;target) {\n    if (sum == target) {\n        flag = 1; \n        return ;\n    }\n    if (sum &gt; target) {\n        return ;\n    }\n    for (int i = cur + 1; i &lt; 10; i++) {\n        dfs(i, sum + f[i], target);\n    }\n}\n\n\nint main()\n{\n    int target;\n    init();\n    while (cin &gt;&gt; target) {\n        if (target &lt; 0) return 0;\n        if (target == 0) {\n            cout &lt;&lt; \"NO\" &lt;&lt;endl;\n            continue;\n        }\n        for (int i = 0; i &lt; 10; i++) {\n            dfs(i,  f[i], target);\n            if (flag) {\n                break;\n            }\n        }\n        if (flag) {\n            flag = 0;\n            cout &lt;&lt; \"YES\"  &lt;&lt; endl;\n            continue;\n        } \n        cout &lt;&lt; \"NO\" &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3502","title":"3502.\u4e0d\u540c\u8def\u5f84\u6570","text":"<p>\u8ff7\u5bab\u6a21\u677f\u9898\u76ee</p> <p></p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 7;\nint n, m, k;\nint a[N][N];\n\nint dir[][2] = {\n    {-1, 0},\n    {1, 0},\n    {0, 1},\n    {0 , -1}\n};\nint v[N][N];\n\nbool check(int x, int y ) {\n    if (x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; x &lt; n &amp;&amp; y &lt; m) {\n        return true;\n    }\n    return false;\n}\nset&lt;string&gt; strs;\nvoid getNum(int i, int j, string s, int cnt) {\n    if (k + 1 == cnt) {\n        strs.insert(s);\n        return;\n    }\n\n    for (int x = 0; x &lt; 4; x++) {\n        int dx = i + dir[x][0], dy = j + dir[x][1];\n        if (check(dx, dy) &amp;&amp; !v[dx][dy]) {\n            //v[dx][dy] = 1;\n            getNum(dx, dy, s + to_string(a[dx][dy]), cnt + 1);\n            //v[dx][dy] = 0;\n        }\n    }\n}\n\nint main() {\n    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            cin &gt;&gt; a[i][j];\n        }\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; m; j++) {\n            //string temp = \"\";\n            //v[i][j] = 1;\n            getNum(i, j, to_string(a[i][j]), 1);\n            //v[i][j] = 0;\n        }\n    }\n    // for (auto x : strs) {\n    //     cout &lt;&lt; x &lt;&lt; endl;\n    // }\n    cout &lt;&lt; strs.size() &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3493","title":"3493.\u6700\u5927\u7684\u548c","text":"<p>\u601d\u7ef4 + \u6ed1\u52a8\u7a97\u53e3 + \u524d\u7f00\u548c</p> <p>\u53ef\u4ee5\u9009\u62e9\u7684\u6570\u662f\u786e\u5b9a\u7684\u3002\u56e0\u4e3a\u6570&gt;1\uff0c\u6240\u6709\u53ef\u4ee5\u679a\u4e3e\u6bcf\u4e00\u4e2ak\u533a\u95f4\u957f\u5ea6\u5185\u5f97\u4e0d\u53ef\u76f4\u63a5\u9009\u62e9\u7684\u603b\u548c\u3002\u7136\u540e\u76f8\u52a0\u3002</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\nconst int N = 1e5+5;\nint a[N];\nbool v[N];\nlong long sum[N];\nint main() {\n    int n, k;\n    cin &gt;&gt; n &gt;&gt; k;\n\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; a[i];\n    }\n    long long ans = 0;\n\n    for (int i = 0; i &lt; n; i++) {\n        cin &gt;&gt; v[i];\n        if (v[i]) {\n            ans += a[i];\n        }\n    }\n    sum[0] = !v[0]?0:a[0];\n    for (int i = 1; i&lt; n; i++) {\n        sum[i] = sum[i - 1] + (!v[i]) * a[i];\n    }\n\n    long long temp = 0;\n\n    for (int j = 0; j &lt;= n - k; j++) {\n        long long xx = sum[j + k - 1] - sum[j] + (!v[j]) * a[j];\n        temp = max(temp, xx);\n    }\n\n    cout &lt;&lt; temp + ans &lt;&lt; endl;\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3485mt","title":"3485.\u6700\u5927\u5f02\u6216\u548c(MT\u7b14\u8bd5)","text":"<p>\u5206\u6790\uff1a</p> <p>\u5bf9\u4e8e==20%==\u7684\u6570\u636e\u663e\u7136\u53ef\u4ee5\u4f7f\u7528n^3\u7684\u7b97\u6cd5\u3002\u679a\u4e3e\u8d77\u59cb\u4e0b\u6807\u548c\u7ed3\u675f\u4e0b\u6807\u3002\u7136\u540e\u518d\u8ba1\u7b97\u8be5\u533a\u95f4\u7684\u503c\u3002</p> <p>\u5bf9\u4e8e==50%==\u7684\u6570\u636e\u53ef\u4ee5\u91c7\u7528n^2\u7684\u7b97\u6cd5\uff0c\u4f7f\u7528\u524d\u7f00\u548c\u5feb\u901f\u6c42\u53d6\u3002</p> <p>\u5bf9\u4e8e==100%==\u7684\u6570\u636e\uff0c\u53ef\u4ee5\u5148\u6c42\u51fa\u5f02\u6216\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u7136\u540e\u95ee\u9898\u5c31\u7b49\u4ef7\u4e8e\u4ece\u4e00\u5806\u6570\u4e2d\u9009\u51fa\u4e24\u4e2a\u6570\uff0c\u4ed6\u4eec\u4e24\u4e2a\u7684\u5f02\u6216\u548c\u6700\u5927\u3002</p> <p>\u5373\uff1a<code>si = a1^a2^..^ai</code> , <code>sj = a1^a2^..^aj</code>, <code>si ^ aj = a^i+1...aj</code></p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nconst int N = 100010 * 31, M = 100010; // \u5143\u7d20\u6570100010\uff0ctrie\u6811\u9ad831\n\nint n, m; // n\u5143\u7d20\u4e2a\u6570 m\u533a\u95f4\u6700\u5927\u503c\n\nint s[M]; // s\u7528\u4e8e\u8bb0\u5f55\u6bcf\u6b21\u8bfb\u53d6\u7684\u503c\n\nint son[N][2], cnt[N], idx; // son\u662ftrim\u6570\n\nvoid insert(int x, int v) { // \u5c06\u4e00\u4e2a\u6570\u5b57\u52a0\u5165\u5230trie\u6811\u4e2d\n    int p = 0; // \u521d\u59cb\u5728\u5934\u7ed3\u70b9\n    for (int i = 30; i &gt;= 0; i--) { // \u4e00\u6b21\u5224\u65ad31\u4f4d\u6570\u5b57\n        int u = x &gt;&gt; i &amp; 1;\n        if (!son[p][u]) son[p][u] = ++idx; //\u5982\u679c\u8fd8\u6ca1\u6709\u521b\u5efa\u5c31\u521b\u5efa\u8be5\u7ed3\u70b9\n        p = son[p][u]; // \u79fb\u52a8\u5230\u5de6\u5b50\u6811\u6216\u8005\u53f3\u5b50\u6811\n        cnt[p] += v;// v = 1 \u65b0\u589e\u52a0 , v = -1\u5220\u9664\n    }\n}\n\nint query(int x) {\n    int res = 0, p = 0;\n    for (int i = 30; i &gt;= 0; i--) {\n        int u = x &gt;&gt; i &amp; 1;\n        // \u6bcf\u6b21\u9009\u62e9\u4e0d\u4e00\u6837\u7684\u5b50\u6811 \u56e0\u4e3a\u662f\u5f02\u6216\uff0c\u4e24\u8005\u4e0d\u540c\u5fc5\u7136\u5f02\u6216\u4e3a1\n        if (cnt[son[p][!u]]) p =son[p][!u] , res = res * 2 + 1; \n\n        else p = son[p][u] , res = res * 2;\n    }\n    return res;\n}\n\n\nint main() {\n\n    cin &gt;&gt; n &gt;&gt; m;\n\n    for (int i = 1; i&lt;= n; i++) {\n        int x;\n        cin &gt;&gt; x;\n        s[i] = s[i - 1] ^ x;\n    }\n    int res = 0;\n\n    insert(s[0], 1);\n\n    for (int i = 1; i &lt;= n; i++) {\n        if (i &gt; m) insert(s[i - m - 1], -1); // \u533a\u95f4\u5927\u4e8em\u5c31\u5220\u9664\n        res = max(res, query(s[i]));\n        insert(s[i], 1);\n    }\n    cout &lt;&lt; res &lt;&lt; endl;\n\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3489-","title":"3489.\u661f\u671f\u51e0--\u6a21\u62df","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;algorithm&gt;\n#include &lt;unordered_map&gt;\n\nusing namespace std;\n\n// 1-12\u6708 \u6b63\u5e38\u65e5\u671f\nint months[13] = {\n    0, 31, 28, 31, 30, 31, 30, 31, 31,\n    30, 31, 30, 31\n};\n\n//\u5efa\u7acbmap\u6620\u5c04\nunordered_map&lt;string, int&gt; month_name = {\n    {\"January\", 1},\n    {\"February\", 2},\n    {\"March\", 3},\n    {\"April\", 4},\n    {\"May\", 5},\n    {\"June\", 6},\n    {\"July\", 7},\n    {\"August\", 8},\n    {\"September\", 9},\n    {\"October\", 10},\n    {\"November\", 11},\n    {\"December\", 12},\n};\n\n// \u661f\u671f\u51e0\u540d\u5b57\u6620\u5c04\nstring week_name[7] = {\n    \"Monday\", \"Tuesday\", \"Wednesday\",\n    \"Thursday\", \"Friday\", \"Saturday\",\n    \"Sunday\"\n};\n\n// \u5224\u65ad\u662f\u5426\u662fleap\u5e74\nint is_leap(int year)\n{\n    return year % 4 == 0 &amp;&amp; year % 100 || year % 400 == 0;\n}\n\n// \u83b7\u53d6\u8be5\u5e74\u4e2d\u67d0\u5e74\u67d0\u6708\u7684\u5929\u6570\nint get_days(int year, int month)\n{\n    int s = months[month];\n    if (month == 2) return s + is_leap(year);\n    return s;\n}\n\nint main()\n{\n    int d, m, y;\n    string str;\n    while (cin &gt;&gt; d &gt;&gt; str &gt;&gt; y)\n    {\n        m = month_name[str];\n        int i = 1, j = 1, k = 1; // i = year, j = month, k = days (1 - 30)\n        int days = 0;\n        while (i &lt; y || j &lt; m || k &lt; d) // \u76ee\u6807\u65e5\u671f\u8fd8\u6ca1\u6709\u8fbe\u5230\n        {\n            k ++, days ++ ; // \u672c\u6708\u5929\u6570++, \u603b\u5929\u6570++\n            if (k &gt; get_days(i, j)) // \u5982\u679c\u672c\u6708\u5929\u6570 &gt; \u8be5\u6708\u5929\u6570 \u5373\u8fdb\u5165\u4e0b\u4e00\u4e2a\u6708\n            {\n                k = 1; // \u7b2c\u4e00\u5929\n                j ++ ; // \u6708\u4efd++\n                if (j &gt; 12) // \u5982\u679c\u6708\u4efd\u5927\u4e8e 12 \u8bf4\u660e\u8fdb\u5165\u4e0b\u4e00\u5e74\n                {\n                    j = 1; // \u91cd\u65b0\u56de\u52301\u6708\n                    i ++ ; // year++\n                }\n            }\n        }\n        //\u7ed3\u679c = \u603b\u5929\u6570%7\n        cout &lt;&lt; week_name[days % 7] &lt;&lt; endl;\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#lc-weekcontest","title":"LC WeekContest","text":""},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#239","title":"239\u573a\u5468\u8d5b","text":""},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#5746","title":"5746. \u5230\u76ee\u6807\u5143\u7d20\u7684\u6700\u5c0f\u8ddd\u79bb","text":"<pre><code>class Solution {\npublic:\n    int getMinDistance(vector&lt;int&gt;&amp; nums, int target, int start) {\n        int ans = INT_MAX;\n        for (int i = 0; i &lt; nums.size(); i++) {\n            if (nums[i] == target) {\n                ans = min(ans, abs(i - start));\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#5747","title":"5747. \u5c06\u5b57\u7b26\u4e32\u62c6\u5206\u4e3a\u9012\u51cf\u7684\u8fde\u7eed\u503c","text":"<p>\u4e8c\u8fdb\u5236\u679a\u4e3e</p> <pre><code>class Solution {\npublic:\n    bool splitString(string s) {\n        int n = s.size();\n        for (int i = 1; i &lt; 1 &lt;&lt; (n - 1); i++) {\n            bool flag = true;\n            unsigned long long last = -1, x = s[0] - '0';\n            for (int j = 0; j &lt; n - 1; j++) {\n                if (i &gt;&gt; j &amp; 1) { // \u5f53\u524d\u4f4d\u9700\u8981\u5206\u5272\n                    // \u68c0\u67e5\u5408\u6cd5\u6027\n                    if (last != -1 &amp;&amp; x != last - 1) {\n                        flag = false;\n                        break;\n                    }\n                    // \u8bb0\u5f55\u4e0a\u4e00\u4e2a\u7684\u6570\u503c\n                    last = x;\n                    // \u65b0\u503c\u4e3a j + 1\n                    x = s[j + 1] - '0';\n                } else { // \u4e0d\u5206\u5272 \u7ee7\u7eed\u76f8\u52a0\n                    x = x * 10 + s[j + 1] - '0';\n                }\n\n\n            }\n            if (x != last - 1) flag = false;\n            if (flag) return true;\n\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#5749","title":"5749. \u90bb\u4f4d\u4ea4\u6362\u7684\u6700\u5c0f\u6b21\u6570","text":"<p>\u6c42\u5f53\u524d\u5168\u6392\u5217\u7684\u4e0bk\u4e2a\u6392\u5217</p> <p><code>next_permutation(b.begin(), b.end())</code></p> <p>\u5148\u627e\u5230\u7b2ck\u4e2a\u6570\uff0c\u518d\u9006\u5e8f\u5bf9\u4ea4\u6362\u3002\u7b49\u4ef7\u6c42\u89e3\u9006\u6570\u5bf9</p> <p>C\u5b58A\u7684\u5143\u7d20\u5728B\u4e2d\u7684\u4e0b\u6807\u4f4d\u7f6e\u548c\u6b21\u6570\uff0c</p> <p></p> <pre><code>class Solution {\npublic:\n    int getMinSwaps(string a, int k) {\n        string b = a;\n        while (k--) next_permutation(b.begin(), b.end());\n\n        int n = a.size();\n        vector&lt;int&gt; c(n);\n        int cnt[10] = {0};\n        for (int i = 0; i &lt; n; i++) {\n            int x = a[i] - '0';\n            cnt[x]++;\n            int y = cnt[x];\n            for (int j = 0; j &lt; n; j++) {\n                if (b[j] - '0' == x &amp;&amp; --y == 0) {\n                    c[i] = j;\n                    break;\n                }\n\n            }\n\n        }\n        int res = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j  = i + 1; j &lt; n; j++) {\n                if (c[i] &gt; c[j]) \n                    res++;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#236","title":"236\u573a\u5468\u8d5b","text":""},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#_4","title":"\u6570\u7ec4\u5143\u7d20\u79ef\u7684\u7b26\u53f7","text":"<p>\u7b7e\u5230</p> <p></p>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#5727","title":"5727\u627e\u51fa\u6e38\u620f\u7684\u83b7\u80dc\u8005","text":"<p>\u7ea6\u745f\u592b\u73af </p> <p>\u5faa\u73af\u94fe\u8868\u6a21\u62df</p> <p>\u9012\u63a8</p> <p></p> <pre><code>class Solution {\npublic:\n    typedef struct node {\n        int val;\n        node * next;\n    }node;\n\n    int findTheWinner(int n, int k) {\n        if (n == 1) return 1;\n        if (k == 1) return n;\n        node *head = new node();\n        head -&gt; val = 1, head -&gt; next = new node();\n        node *temp = head;\n        temp = temp -&gt; next;\n        for (int i = 2;i &lt;= n; i++) {\n            temp -&gt; val = i;\n            if (i != n)\n                temp -&gt;  next = new node();\n            else \n                temp -&gt; next = head;\n            temp = temp -&gt; next;\n        }\n        int remain = n;\n        // for (int i = 0; i &lt;= n; i++) {\n        //     cout &lt;&lt; head -&gt; val &lt;&lt; endl;\n        //     head = head -&gt; next;\n        // }\n        node * cur = head;\n        while (remain != 1) {\n            for (int i = 1; i &lt; k - 1; i++) {\n                cur = cur -&gt; next;  \n            }\n            //cout &lt;&lt; cur -&gt; val &lt;&lt; endl;\n            //cout &lt;&lt; cur -&gt; next -&gt; val  &lt;&lt; endl;\n            cur -&gt; next = cur -&gt; next -&gt; next;\n            cur = cur -&gt; next;\n            remain--;\n        }\n        return cur -&gt; val;\n    }\n};\n</code></pre> <pre><code>class Solution {\n    public:\n    int f(int n, int k) {\n        if (n == 1) return 0;\n        return (f(n - 1, k) + k) %n;\n    }\n    int findTheWinner(int n, int k) {\n        return f(n, k) + 1;\n    }\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#_5","title":"\u6700\u5c11\u4fa7\u8df3\u6570","text":"<pre><code>const int N = 500010, INF = 1e8;\n\nint f[N][3];\n\nclass Solution {\npublic:\n    int minSideJumps(vector&lt;int&gt;&amp; b) {\n        // \u4e2d\u95f4\u8dd1\u9053 \u8df3\u5230\u5176\u5b83\u8dd1\u9053\u90fd\u9700\u89811\n        f[0][1] = 0, f[0][0] = f[0][2] = 1;\n\n        int n = b.size() - 1;\n        for (int i = 1; i &lt;= n; i ++ ) // \u7b2ci\u5c42\n            for (int j = 0; j &lt; 3; j ++ ) { // \u7b2ci\u5c42\u7684 \u4e09\u4e2a\u70b9\n                f[i][j] = INF; // \u521d\u59cb\u72b6\u6001\u4e3aINF\n                if (b[i] == j + 1) continue;// \u5f53\u524d\u8981\u6c42\u7684\u8be5\u70b9\u4f4d\u969c\u788d\u7269 \u8df3\u8fc7\n                for (int k = 0; k &lt; 3; k ++ ) { // \u679a\u4e3ei - 1\u5c42\u7684\u6240\u6709\u72b6\u6001\n                    if (b[i] == k + 1) continue; // \u4e0d\u80fd\u7531i - 1\u5c42\u901a\u8fc7\u5230\u8fbe\n                    int cost = 0; // \u5728\u540c\u4e00\u4e2a\u6c34\u5e73\u7ebf\u4e0a cost = 0\n                    if (k != j) cost = 1; // \u8bf4\u660e\u4e0d\u5728\u540c\u4e00\u4e2a\u6c34\u5e73\u7ebf\u4e0a\n                    f[i][j] = min(f[i][j], f[i - 1][k] + cost);\n                }\n            }\n        return min(f[n][0], min(f[n][1], f[n][2]));\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#200","title":"\u524d200\u9053\u9898\u76ee","text":""},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#1","title":"1 \u4e24\u6570\u4e4b\u548c","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; nums, int target) {\n        vector&lt;int&gt; ans(2);\n        int len = nums.size();\n        for (int i = 0; i &lt; len; i++) {\n            for (int j = i + 1; j &lt; len; j++) {\n                if (nums[i] + nums[j] == target) {\n                    ans[0] = i, ans[1] = j;\n                    return ans;\n                }\n            }\n        }\n        return nums;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#2","title":"2. \u4e24\u6570\u76f8\u52a0","text":"<pre><code>class Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode head = new ListNode(l1.val + l2.val);\n        ListNode cur = head;\n        while(l1.next != null || l2.next != null){\n            l1 = l1.next != null ? l1.next : new ListNode();\n            l2 = l2.next != null ? l2.next : new ListNode();\n            cur.next = new ListNode(l1.val + l2.val + cur.val / 10);\n            cur.val %= 10;\n            cur = cur.next;\n        }\n        if(cur.val &gt;= 10){\n            cur.next = new ListNode(cur.val / 10);\n            cur.val %= 10;\n        }\n        return head;\n    }\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#3","title":"3. \u65e0\u91cd\u590d\u7684\u6700\u957f\u5b50\u4e32","text":"<pre><code>class Solution {\npublic:\n    int lengthOfLongestSubstring(string s) {\n        if(s.size() == 0) return 0;\n        unordered_set&lt;char&gt; lookup;\n        int maxStr = 0;\n        int left = 0;\n        for(int i = 0; i &lt; s.size(); i++){\n\n            // \u67e5\u627e\u5230\u4e86s[i] \u5220\u9664\u5de6\u8fb9\n            while (lookup.find(s[i]) != lookup.end()){\n                lookup.erase(s[left]);\n                left ++;\n            }\n\n            maxStr = max(maxStr,i-left+1);\n            lookup.insert(s[i]);\n    }\n        return maxStr;\n\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#4","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u4e2d\u7684\u4e2d\u4f4d\u6570","text":"<pre><code>class Solution {\npublic:\n    double findMedianSortedArrays(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        int len1 = nums1.size(), len2 = nums2.size();\n        int n = len1 + len2;\n        for (auto num : nums2) {\n            nums1.push_back(num);\n        }\n        sort(nums1.begin(), nums1.end());\n        if (n % 2 == 1) return nums1[n / 2];\n        else {\n            int mid = n / 2 - 1;\n            double a = nums1[mid], b = nums1[mid + 1];\n\n            return (a + b) / 2;\n        }\n\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#5","title":"5. \u6700\u957f\u56de\u6587\u4e32","text":"<pre><code>class Solution {\npublic:\n    string longestPalindrome(string s) {\n        int n = s.size();\n        vector&lt;vector&lt;int&gt;&gt; dp(n, vector&lt;int&gt;(n));\n        string ans;\n        for (int l = 0; l &lt; n; ++l) {\n            for (int i = 0; i + l &lt; n; ++i) {\n                int j = i + l;\n                if (l == 0) {\n                    dp[i][j] = 1;\n                } else if (l == 1) {\n                    dp[i][j] = (s[i] == s[j]);\n                } else {\n                    dp[i][j] = (s[i] == s[j] &amp;&amp; dp[i + 1][j - 1]);\n                }\n                if (dp[i][j] &amp;&amp; l + 1 &gt; ans.size()) {\n                    ans = s.substr(i, l + 1);\n                }\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#6-z","title":"6. Z\u5b57\u5f62\u53d8\u6362","text":"<pre><code>class Solution {\npublic:\n    string convert(string s, int numRows) {\n\n        if (numRows == 1) return s;\n\n        vector&lt;string&gt; rows(min(numRows, int(s.size())));\n        int curRow = 0;\n        bool goingDown = false;\n\n        for (char c : s) {\n            rows[curRow] += c;\n            if (curRow == 0 || curRow == numRows - 1) goingDown = !goingDown;\n            curRow += goingDown ? 1 : -1;\n        }\n\n        string ret;\n        for (string row : rows) ret += row;\n        return ret;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#7","title":"7. \u6574\u6570\u7ffb\u8f6c","text":"<pre><code>class Solution {\npublic:\n    int reverse(int x) {\n        string MAX = to_string(0x7fffffff); \n        int MIN_ = 0x80000000;\n        string MIN = to_string(MIN_);\n\n        bool sign = 0; // 0 positive\n        if (x == MIN_) return 0;\n        if (x &lt; 0) x = -x, sign = 1;\n        string old = to_string(x);\n        std::reverse(old.begin(), old.end()); // 321\n        if (sign) { // \u8d1f\u6570\n            old = '-' + old;\n            if (MIN.length() &lt;= old.length()) {\n                if (old &gt; MIN) return 0;\n            }\n\n        } else {\n            if (MAX.length() &lt;= old.length()) {\n                if (MAX &lt; old) return 0;\n            }\n        }\n       //cout &lt;&lt; old &lt;&lt; endl;\n        return atoi(old.c_str());\n\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#8","title":"8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570","text":"<pre><code>class Solution {\npublic:\n    int myAtoi(string s) {\n        int sign = 1, tmp = 0, i = 0;\n\n        while(s[i] == ' ')  ++i;    //1.\u5ffd\u7565\u524d\u5bfc\u7a7a\u683c\n\n        if(s[i] == '+' || s[i] == '-')    //2.\u786e\u5b9a\u6b63\u8d1f\u53f7\n            sign = (s[i++] == '-') ? -1 : 1;   //s[i]\u4e3a+\u7684\u8bddsign\u4f9d\u65e7\u4e3a1\uff0c\u4e3a-\u7684\u8bddsign\u4e3a-1\n\n        while(s[i] &gt;= '0' &amp;&amp; s[i] &lt;= '9')   //3.\u68c0\u67e5\u8f93\u5165\u662f\u5426\u5408\u6cd5\n        {\n            if(tmp &gt; INT_MAX / 10 || (tmp == INT_MAX / 10 &amp;&amp; s[i] - '0' &gt; 7))    //4.\u662f\u5426\u6ea2\u51fa\n                return sign == 1 ? INT_MAX : INT_MIN;\n            tmp = tmp * 10 + (s[i++] - '0');    //5.\u4e0d\u52a0\u62ec\u53f7\u6709\u6ea2\u51fa\u98ce\u9669\n        }\n        return tmp * sign;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#9","title":"9. \u5224\u65ad\u662f\u5426\u4e3a\u56de\u6587\u5b57\u7b26\u4e32","text":"<pre><code>class Solution {\npublic:\n    bool isPalindrome(int x) {\n        string posiX = to_string(x);\n        string temp = posiX;\n        reverse(posiX.begin(), posiX.end());\n        return temp == posiX;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    bool isPalindrome(int x) {\n        if (x &lt; 0) return false;\n        long temp = 0;\n        int r = x;\n        while (r != 0) {\n            if (temp &gt; x) return false;\n            temp = temp * 10 + r % 10;\n            r /= 10;\n        }\n        return temp == x;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#10","title":"10.\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d","text":""},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#11","title":"11.\u76db\u6c34\u6700\u591a\u7684\u5bb9\u5668","text":"<pre><code>class Solution {\n    public int maxArea(int[] height) {\n        int i = 0, j = height.length - 1, res = 0;\n        while(i &lt; j){\n            res = height[i] &lt; height[j] ? \n                Math.max(res, (j - i) * height[i++]): \n                Math.max(res, (j - i) * height[j--]); \n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#12_1","title":"12. \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57","text":"<p>13 \u4e2a\u6570\u5b57 \u4ece\u5927\u5230\u5c0f \u4f9d\u6b21\u51cf\u5230\u4e0d\u80fd\u51cf</p> <p></p> <pre><code>class Solution {\npublic:\n    string intToRoman(int num) {\n        string strs[]= {\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n        int nums[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n        string ans;\n        for (int i = 0; num &gt; 0 &amp;&amp; i &lt; 13; i++) {\n            while (nums[i] &lt;= num) {\n                ans += strs[i];\n                num -= nums[i];\n            }\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#13_1","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570","text":"<p>\u5efa\u7acb\u6620\u5c04\u51fd\u6570 \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26 \u8ba1\u7b97\u5b83\u548c\u5b83\u4e4b\u524d\u7684 \u5bf9\u4e8eI, IV \u626b\u63cf\u5230V\u4f1a\u67e5\u770b\u524d\u4e00\u4e2a \u5373IV\u5f97\u52303 \u56e0\u4e3a\u524d\u4e00\u4e2aI\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u4e3a1\u3002\u7ed3\u5408\u7f16\u7801\u683c\u5f0f\uff0c\u56e0\u4e3aVIV\u662f\u4e0d\u5b58\u5728\u7684\u3002</p> <pre><code>class Solution {\npublic:\n    int romanToInt(string s) {\n        unordered_map&lt;string, int&gt; m = {{\"I\", 1}, {\"IV\", 3}, {\"IX\", 8}, {\"V\", 5}, {\"X\", 10}, {\"XL\", 30}, {\"XC\", 80}, {\"L\", 50}, {\"C\", 100}, {\"CD\", 300}, {\"CM\", 800}, {\"D\", 500}, {\"M\", 1000}};\n        int r = m[s.substr(0, 1)];\n        for(int i=1; i&lt;s.size(); ++i){\n            string two = s.substr(i-1, 2);\n            string one = s.substr(i, 1);\n            r += m[two] ? m[two] : m[one];\n        }\n        return r;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#14","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00","text":"<p>\u7ef4\u62a4cnt\u6307\u9488 \u6307\u5411\u516c\u5171\u4e0b\u6807</p> <p></p> <pre><code>class Solution {\npublic:\n    string longestCommonPrefix(vector&lt;string&gt;&amp; strs) {\n        string ans = \"\";\n\n        int len = strs.size();\n        if (len == 0) return \"\";\n        int cnt = 0;\n        while(1) {\n            for (int i = 0; i &lt; len; i++) {\n                if (strs[i].length() == 0) return \"\";\n                if (cnt &lt; strs[i].length() &amp;&amp; cnt &lt; strs[0].length() &amp;&amp; strs[i][cnt] == strs[0][cnt]) {\n                    continue;\n                } else {\n                    return ans;\n                }\n            }\n            ans += strs[0][cnt++];\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#15","title":"15. \u4e09\u6570\u4e4b\u548c","text":"<p>\u6392\u5e8f + \u4e09\u6307\u9488</p> <pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n\n        int n = nums.size();\n        if (n &lt; 3) return res;\n\n        sort(nums.begin(), nums.end());\n\n        for (int i = 0; i &lt; n; i ++ ) {\n            //1. \u5f00\u59cb\u9884\u5904\u7406\n            if (nums[i] &gt; 0) return res;                    //\u82e5\u7b2c\u4e00\u4e2a\u6570\u5927\u4e8e0\uff0c\u540e\u9762\u600e\u4e48\u52a0\u90fd\u4e0d\u4f1a\u7b49\u4e8e0\u4e86\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;  //\u8df3\u8fc7\u91cd\u590d\u6570\u5b57\n            // i\u662f\u7b2c\u4e00\u4e2a\u6570 l \u4e09\u5143\u7ec4\u4e2d\u7b2c\u4e8c\u5c0f r \u6700\u5927\u7684\n            int l = i + 1, r = n - 1;\n            while (l &lt; r) {\n                if (nums[i] + nums[l] + nums[r] == 0) {\n\n                    res.push_back({nums[i], nums[l], nums[r]});         //\u52a0\u5165\u4e00\u4e2a\u6b63\u786e\u65b9\u6848\n                    while (l &lt; r &amp;&amp; nums[l] == nums[l + 1]) l ++ ;      //\u8df3\u8fc7\u91cd\u590d\u6570\u5b57\n                    while (l &lt; r &amp;&amp; nums[r] == nums[r - 1]) r -- ;\n                    l ++ ;                                              //\u5de6\u6307\u9488\u524d\u8fdb\n                    r -- ;                                              //\u53f3\u6307\u9488\u540e\u9000\n                }\n                else if (nums[i] + nums[l] + nums[r] &gt; 0) {\n                    r -- ;      //\u548c\u5927\u4e8e0\uff0c\u8981\u51cf\u5c11\u603b\u548c\u4e4b\u503c\uff0c\u5373\u53f3\u6307\u9488\u540e\u9000 \u56e0\u4e3a\u5de6\u6307\u9488\u4e0d\u80fd\u518d\u540e\u9000\u4e86\n                }\n                else {\n                    l ++ ;      //\u548c\u5c0f\u4e8e0\uff0c\u8981\u589e\u52a0\u603b\u548c\u4e4b\u503c\uff0c\u5373\u5de6\u6307\u9488\u524d\u8fdb, \u56e0\u4e3a\u53f3\u6307\u9488\u4e0d\u80fd\u518d\u524d\u8fdb\u4e86\n                }\n            }\n        }\n\n        return res;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#17","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u7b26\u7ec4\u5408","text":"<p>\u56de\u6eaf\u6cd5</p> <p></p> <pre><code>class Solution {\npublic:\n    vector&lt;string&gt; letterCombinations(string digits) {\n        vector&lt;string&gt; combinations;\n        if (digits.empty()) {\n            return combinations;\n        }\n        unordered_map&lt;char, string&gt; phoneMap{\n            {'2', \"abc\"},\n            {'3', \"def\"},\n            {'4', \"ghi\"},\n            {'5', \"jkl\"},\n            {'6', \"mno\"},\n            {'7', \"pqrs\"},\n            {'8', \"tuv\"},\n            {'9', \"wxyz\"}\n        };\n        string combination;\n        backtrack(combinations,combination, phoneMap, digits, 0 );\n        return combinations;\n    }\n\n    void backtrack(vector&lt;string&gt;&amp; combinations, string&amp; combination,const unordered_map&lt;char, string&gt;&amp; phoneMap, const string&amp; digits, int index) {\n        if (index == digits.length()) { // \u5f53\u524d\u8fbe\u5230\u5b57\u7b26\u7ec4\u5408\u957f\u5ea6\n            combinations.push_back(combination);\n        } else {\n            char digit = digits[index];\n            const string&amp; letters = phoneMap.at(digit); // \u627e\u5230\u5bf9\u5e94\u7684letters \n            for (const char&amp; letter: letters) {\n                combination.push_back(letter);\n                backtrack(combinations,combination,phoneMap, digits, index + 1);\n                combination.pop_back();\n            }\n        }\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#19-n","title":"19. \u5220\u9664\u94fe\u8868\u7684\u7b2cN\u4e2a\u7ed3\u70b9","text":"<p>\u5148\u904d\u5386\u4e00\u904d\u5f97\u5230\u6574\u4e2a\u94fe\u8868\u7684\u957f\u5ea6 \u7136\u540e\u4ecehead\u8d70 len - n - 1\u6b21\uff0c\u5230\u9700\u8981\u5220\u9664\u7684\u7ed3\u70b9\u7684\u524d\u4e00\u4e2a\u7ed3\u70b9\uff0c\u7136\u540e\u901a\u8fc7\u8be5\u7ed3\u70b9\u5220\u9664\u76ee\u6807\u7ed3\u70b9\uff0c\u8fd4\u56dehead</p> <p>\u8fb9\u754c\u6761\u4ef6\uff1a\u5f53len - n == 0 \u5373\u9700\u8981\u5220\u9664\u5934\u7ed3\u70b9 head = head -&gt; next\u5c31\u53ef\u4e86</p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* removeNthFromEnd(ListNode* head, int n) {\n        ListNode *temp = head;\n        int len = 0;\n        while (temp) {\n            len++;\n            temp = temp -&gt; next;\n        }\n        temp = head;\n        len = len - n;\n        if (len == 0) {\n            head = head -&gt; next;\n            return head;\n        }\n        for (int i =0; i &lt; len - 1; i++) {\n            temp = temp -&gt; next;\n        }\n        temp -&gt; next = temp -&gt; next -&gt; next;\n        return head;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#20","title":"20. \u6709\u6548\u7684\u62ec\u53f7","text":"<p>\u7528\u6808\u6765\u6a21\u62df \u5bf9\u4e8e\u5de6\u62ec\u53f7\u538b\u6808 \u53f3\u62ec\u53f7\u8981\u68c0\u67e5\u6808\u72b6\u6001</p> <pre><code>class Solution {\npublic:\n    bool isValid(string s) {\n        stack&lt;char&gt; stk;\n        for (auto c: s) {\n            if (c == ')' || c == '}' || c == ']') {\n                if (stk.size() == 0) return false;\n                char top = stk.top();\n                if (top == ')' || top == '}' || top == ']') return false;\n                switch (c) {\n                    case ')':\n                        if (top != '(') return false;\n                        break;\n                    case '}':\n                        if (top != '{') return false;\n                        break;\n                    case ']':\n                        if (top != '[') return false;\n                        break;\n                }\n                stk.pop();\n            } else {\n                stk.push(c);\n            }\n        }\n        return stk.empty();\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#21","title":"21.\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<p>\u9012\u5f52 \u6bcf\u6b21\u9012\u5f52\u90fd\u610f\u5473\u7740\u4e00\u6b21\u5206\u5272</p> <p></p> <pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        // \u5982\u679c\u4e3a\u7a7a \u610f\u5473\u7740\u6709\u4e00\u4e2a\u5230\u8fbe\u4e86\u5c3d\u5934 \u5c06\u8fd9\u4e2a\u5269\u4e0b\u7684\u63a5\u5230\u524d\u4e00\u4e2a\u540e\u9762\u5373\u53ef\n        if (l1 == NULL) {\n            return l2;\n        }\n        if (l2 == NULL) {\n            return l1;\n        }\n        // l1 \u7ed3\u70b9\u5c0f\u4e8el2\u7ed3\u70b9\n        if (l1-&gt;val &lt;= l2-&gt;val) {\n            l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);\n            return l1;\n        }\n        // l1\u7ed3\u70b9\u5c0f\u4e8e\u7b49\u4e8el2\u7ed3\u70b9\n        l2-&gt;next = mergeTwoLists(l1, l2-&gt;next);\n        return l2;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#22","title":"22. \u62ec\u53f7\u751f\u6210","text":"<p>\u9012\u5f52\u65b9\u6cd5(\u7c7b\u4f3c\u6df1\u641c)</p> <p></p> <pre><code>class Solution {\n    // \u68c0\u67e5\u62ec\u53f7\u662f\u5426\u6709\u6548\u7684\u4e00\u79cd\u65b9\u5f0f\n    bool valid(const string&amp; str) {\n        int balance = 0;\n        for (char c : str) {\n            if (c == '(') {\n                ++balance;\n            } else {\n                --balance;\n            }\n            if (balance &lt; 0) {\n                return false;\n            }\n        }\n        return balance == 0;\n    }\n\n    void generate_all(string&amp; current, int n, vector&lt;string&gt;&amp; result) {\n        // n\u662f\u5de6\u53f3\u62ec\u53f7\u7684\u4e2a\u6570\u4e3a2 * n\n        if (n == current.size()) {\n            // \u5224\u65ad\u6b64\u6b21\u8fed\u4ee3\u7684\u662f\u5426\u7b26\u5408\u89c4\u5219\n            if (valid(current)) {\n                result.push_back(current);\n            }\n            return;\n        }\n        // \u6b64\u5904\u4e24\u79cd\u65b9\u6848 \uff1a \u5f53\u524d\u586b'(' or \u5f53\u524d\u586b ')'\n        current += '(';\n        generate_all(current, n, result);\n        current.pop_back();\n\n        current += ')';\n        generate_all(current, n, result);\n        current.pop_back();\n    }\npublic:\n    vector&lt;string&gt; generateParenthesis(int n) {\n        vector&lt;string&gt; result;\n        string current;\n        generate_all(current, n * 2, result);\n        return result;\n    }\n};\n</code></pre> <p>\u56de\u6eaf\u65b9\u6cd5</p> <p>\u4f18\u5316\uff1a\u8ddf\u8e2a\u5224\u65ad\u5f53\u524d\u62ec\u53f7\u5e8f\u5217\u662f\u5426\u6709\u6548 -- \u6839\u636e\u5de6\u62ec\u53f7\u548c\u53f3\u62ec\u53f7\u4e2a\u6570\u6765\u5224\u65ad</p> <pre><code>class Solution {\n    void backtrack(vector&lt;string&gt;&amp; ans, string&amp; cur, int open, int close, int n) {\n        if (cur.size() == n * 2) {\n            ans.push_back(cur);\n            return;\n        }\n        // \u5de6\u62ec\u53f7\u5c0f\u4e8en\n        if (open &lt; n) {\n            cur.push_back('(');\n            backtrack(ans, cur, open + 1, close, n);\n            cur.pop_back();\n        }\n        // \u53f3\u62ec\u53f7\u5c0f\u4e8e\u5de6\u62ec\u53f7\n        if (close &lt; open) {\n            cur.push_back(')');\n            backtrack(ans, cur, open, close + 1, n);\n            cur.pop_back();\n        }\n    }\npublic:\n    vector&lt;string&gt; generateParenthesis(int n) {\n        vector&lt;string&gt; result;\n        string current;\n        backtrack(result, current, 0, 0, n);\n        return result;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#23-k","title":"23. \u5408\u5e76K\u4e2a\u6392\u5e8f\u94fe\u8868","text":"<p>K\u6b21\u5408\u5e76 \u4e24\u4e2a\u6709\u5e8f\u7684\u94fe\u8868</p> <pre><code>class Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode *a, ListNode *b) {\n        if ((!a) || (!b)) return a ? a : b;\n        ListNode head, *tail = &amp;head, *aPtr = a, *bPtr = b;\n        while (aPtr &amp;&amp; bPtr) {\n            if (aPtr-&gt;val &lt; bPtr-&gt;val) {\n                tail-&gt;next = aPtr; aPtr = aPtr-&gt;next;\n            } else {\n                tail-&gt;next = bPtr; bPtr = bPtr-&gt;next;\n            }\n            tail = tail-&gt;next;\n        }\n        tail-&gt;next = (aPtr ? aPtr : bPtr);\n        return head.next;\n    }\n\n    ListNode* mergeKLists(vector&lt;ListNode*&gt;&amp; lists) {\n        ListNode *ans = nullptr;\n        for (size_t i = 0; i &lt; lists.size(); ++i) {\n            ans = mergeTwoLists(ans, lists[i]);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#24","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9","text":"<p>\u9012\u5f52</p> <pre><code>class Solution {\npublic:\n    ListNode* swapPairs(ListNode* head) {\n        if (head == nullptr || head-&gt;next == nullptr) {\n            return head;\n        }\n        ListNode* newHead = head-&gt;next; // newHead\u8868\u793a\u7b2c\u4e8c\u4e2a\u8282\u70b9\n        head-&gt;next = swapPairs(newHead-&gt;next);// \u7b2c\u4e00\u4e2a\u8282\u70b9\u6307\u5411\u4e0b\u4e00\u4e2a\u9012\u5f52\n        newHead-&gt;next = head;// \u5c06\u7b2c\u4e8c\u4e2a\u8282\u70b9\u7684next \u6307\u5411\u7b2c\u4e00\u4e2a\n        return newHead;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#26_1","title":"26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879","text":"<p>\u53cc\u6307\u9488 \u4e00\u6b21\u5faa\u73af</p> <p>i\u6307\u5411\u5f53\u524d\u4e0b\u6807 j\u6307\u5411\u5faa\u73af</p> <pre><code>class Solution {\n    public int removeDuplicates(int[] nums) {\n    if (nums.length == 0) return 0;\n    int i = 0;\n    for (int j = 1; j &lt; nums.length; j++) {\n        if (nums[j] != nums[i]) {\n            i++;\n            nums[i] = nums[j];\n        }\n    }\n    return i + 1;\n}\n\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#31","title":"31. \u4e0b\u4e00\u4e2a\u6392\u5217","text":"<p>\u4e00\u4e2a\u5f88\u79d2\u7684\u601d\u8def</p> <pre><code>class Solution {\npublic:\n    void nextPermutation(vector&lt;int&gt;&amp; nums) {\n        int i = nums.size() - 2, j = nums.size() - 1;\n        while(i &gt;= 0 &amp;&amp; nums[i] &gt;= nums[i+1])   --i;    //\u5bfb\u627e\u6bd4\u540e\u9762\u90a3\u4e2a\u6570\u5c0f\u7684nums[i]\n        if(i &gt;= 0)   \n        {\n            while(j &gt;= 0 &amp;&amp; nums[j] &lt;= nums[i]) --j;    //\u5bfb\u627e\u6bd4nums[i]\u5927\u7684\u7b2c\u4e00\u4e2a\u6570\n            swap(nums[i], nums[j]);\n        }\n        sort(nums.begin() + i + 1, nums.end());     //\u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u6392\u5217\uff0ci\u4e3a-1\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#198","title":"198. \u6253\u5bb6\u52ab\u820d","text":"<p>\u7b80\u5355dp</p> <p>dp[i]\u8868\u793a\u5077\u524di\u5bb6\u80fd\u5f97\u5230\u7684\u6700\u5927\u503c</p> <p><code>dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1])</code></p> <pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if (n == 0) return 0;\n        vector&lt;int&gt; dp(n + 1, 0); // dp[i]\u8868\u793a\u5077\u524di\u4e2a\u623f\u5b50\u7684\u6700\u5927\u91d1\u989d\n        dp[1] = nums[0];\n        for (int i = 2; i &lt;= n; i++) {\n            dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1]);\n        }\n        return dp[n];\n    }\n};\n</code></pre> <p>\u8fdb\u4e00\u6b65\u5bf9\u7a7a\u95f4\u8fdb\u884c\u538b\u7f29</p> <pre><code>class Solution {\npublic:\n    int rob(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        if (n == 0) return 0;\n        //vector&lt;int&gt; dp(n + 1, 0); // dp[i]\u8868\u793a\u5077\u524di\u4e2a\u623f\u5b50\u7684\u6700\u5927\u91d1\u989d\n        //dp[1] = nums[0];\n        int cur = nums[0], pre = 0;\n        for (int i = 2; i &lt;= n; i++) {\n            int temp = cur;\n            cur = max(cur, pre + nums[i - 1]);\n            pre = temp;\n            //dp[i] = max(dp[i - 1], dp[i - 2] + nums[i - 1]);\n        }\n        return cur;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#_6","title":"\u5e38\u89c1\u9762\u8bd5\u9898","text":""},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#_7","title":"\u81ea\u5efa\u94fe\u8868","text":"<pre><code>#include &lt;iostream&gt;\nusing namespace std;\nstruct node{\n    int data;\n    node *next;\n    node(int data,node *next=NULL){\n        this-&gt;data = data;\n        this-&gt;next = next;\n    }\n};\n\nnode *createlist(const int num){\n    node *head = NULL;\n    for (int i = 0; i &lt; num; i++) {\n        head = new node(i, head);\n    }\n    return head;\n}\n\nvoid displaylist(node *head){\n    cout&lt;&lt;\"list node -&gt; \";\n    while(head!=NULL){\n        cout&lt;&lt;head-&gt;data&lt;&lt;\" \";\n        head = head-&gt;next;\n    }\n    cout&lt;&lt;endl;\n}\n\nint main(){\n    node *head = createlist(5);\n    displaylist(head);\n    return 0;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#_8","title":"\u53cd\u8f6c\u94fe\u8868","text":"<pre><code>class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        ListNode* prev = nullptr;\n        ListNode* curr = head;\n        while (curr) {\n            ListNode* next = curr-&gt;next;\n            curr-&gt;next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n};\n</code></pre> <pre><code>class Solution {\npublic:\n    ListNode* reverseList(ListNode* head) {\n        if (!head || !head-&gt;next) {\n            return head;\n        }\n        ListNode* newHead = reverseList(head-&gt;next);\n        head-&gt;next-&gt;next = head;\n        head-&gt;next = nullptr;\n        return newHead;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#_9","title":"\u73af\u5f62\u94fe\u8868","text":"<p>\u54c8\u5e0c\u8868\u5b58\u653e\u8d70\u8fc7\u7684\u8bb0\u5f55</p> <pre><code>class Solution {\npublic:\n    bool hasCycle(ListNode *head) {\n        unordered_set&lt;ListNode*&gt; seen;\n        while (head != nullptr) {\n            if (seen.count(head)) {\n                return true;\n            }\n            seen.insert(head);\n            head = head-&gt;next;\n        }\n        return false;\n    }\n};\n</code></pre> <p>\u5feb\u6162\u6307\u9488</p> <pre><code>class Solution {\npublic:\n    bool hasCycle(ListNode* head) {\n        if (head == nullptr || head-&gt;next == nullptr) {\n            return false;\n        }\n        ListNode* slow = head;\n        ListNode* fast = head-&gt;next;\n        while (slow != fast) {\n            if (fast == nullptr || fast-&gt;next == nullptr) {\n                return false;\n            }\n            slow = slow-&gt;next;\n            fast = fast-&gt;next-&gt;next;\n        }\n        return true;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#_10","title":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868","text":"<pre><code>/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {\n        // \u5982\u679c\u4e3a\u7a7a \u610f\u5473\u7740\u6709\u4e00\u4e2a\u5230\u8fbe\u4e86\u5c3d\u5934 \u5c06\u8fd9\u4e2a\u5269\u4e0b\u7684\u63a5\u5230\u524d\u4e00\u4e2a\u540e\u9762\u5373\u53ef\n        if (l1 == NULL) {\n            return l2;\n        }\n        if (l2 == NULL) {\n            return l1;\n        }\n        // l1 \u7ed3\u70b9\u5c0f\u4e8el2\u7ed3\u70b9\n        if (l1-&gt;val &lt;= l2-&gt;val) {\n            l1-&gt;next = mergeTwoLists(l1-&gt;next, l2);\n            return l1;\n        }\n        // l1\u7ed3\u70b9\u5c0f\u4e8e\u7b49\u4e8el2\u7ed3\u70b9\n        l2-&gt;next = mergeTwoLists(l1, l2-&gt;next);\n        return l2;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#_11","title":"\u6c42\u5f00\u65b9","text":"<p>\u4e8c\u5206\u67e5\u627e</p> <pre><code>int mySqrt(int a) {\n    if (a == 0) return a;\n    int l = 1, r = a, mid, sqrt;\n    while (l &lt;= r) {\n        mid = l + (r - 1) / 2;\n        sqrt = a / mid;\n        if (sqrt == mid) {\n            return mid;\n        } else if (mid &gt; sqrt){\n            r = mid - 1;\n        } else if {\n            l = mid + 1;\n        }\n        return r;\n    }\n}\n</code></pre> <p>\u725b\u987f\u8fed\u4ee3\u6cd5:\u4e3a\u4e86\u9632\u6b62\u5e73\u65b9\u8d8a\u754c</p> <pre><code>int mySqrt(int a) {\n    long x = a;\n    while (x * x &gt; a) {\n        x = (x + a / x) / 2;\n    }\n    return x;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#_12","title":"\u5feb\u901f\u6392\u5e8f","text":"<pre><code>void quick_sort(vector&lt;int&gt; &amp;nums, int l, int r) {\n    if (l + 1 &gt;= r) return;\n    int first = l, last = r - 1, key = nums[first];\n    while (first &lt; last) {\n        while (first &lt; last &amp;&amp; nums[last] &gt;= key) last--;\n        nums[first] = nums[last]; // \u627e\u5230\u5c0f\u4e8ekey\u7684\n        while (first &lt; last &amp;&amp; nums[first] &lt;= key) first++;\n        nums[last] = nums[first];\n    }\n    nums[first] = key;\n    quick_sort(nums, l, first);\n    quick_sort(nums, first + 1, r);\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#k","title":"\u7b2cK\u5927\u6570","text":"<pre><code>int findKthLarget(vector&lt;int&gt; &amp;nums, int k) {\n    int l = 0, r = nums.size(), target = num.size() - k;\n    while (l &lt; r) {\n        int mid = quickSelection(nums, l, r);\n        if (mid == target) {\n            return nums[mid];\n        }\n        if (mid &lt; target) {\n            l = mid + 1;\n        } else {\n             r = mid - 1;\n        }\n    }\n    return nums[l];\n}\n\nint quicSelection(vector&lt;int&gt; &amp;nums, int l, int r) {\n    int i = l + 1, j = r;\n    while (true) {\n        while (i &lt; r &amp;&amp; nums[i] &lt;= nums[j]) ++i;\n        while (l &lt; j &amp;&amp; nums[j] &gt;= nums[l]) --j;\n        if (i &gt;= j) break;\n        swap(nums[i], nums[j]);\n    }\n    swap(nums[l], nums[j]);\n    return j;\n}\n</code></pre>"},{"location":"Algorithm/lc-daily/lc-daiyly-problems/#_13","title":"\u77e9\u9635\u4e2d\u6700\u5927\u7684\u6b63\u65b9\u5f62","text":"<pre><code>int maxmalSqare(vector&lt;vector=&gt;&gt;)\n</code></pre>"},{"location":"Algorithm/lc-weekly/lc-344th-contest/","title":"\u7b2c 344 \u573a\u5468\u8d5b","text":""},{"location":"Algorithm/lc-weekly/lc-344th-contest/#6416","title":"6416. \u627e\u51fa\u4e0d\u540c\u5143\u7d20\u6570\u76ee\u5dee\u6570\u7ec4","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u957f\u5ea6\u4e3a n \u3002</p> <p>nums \u7684 \u4e0d\u540c\u5143\u7d20\u6570\u76ee\u5dee \u6570\u7ec4\u53ef\u4ee5\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 diff \u8868\u793a\uff0c\u5176\u4e2d diff[i] \u7b49\u4e8e\u524d\u7f00 nums[0, ..., i] \u4e2d\u4e0d\u540c\u5143\u7d20\u7684\u6570\u76ee \u51cf\u53bb \u540e\u7f00 nums[i + 1, ..., n - 1] \u4e2d\u4e0d\u540c\u5143\u7d20\u7684\u6570\u76ee\u3002</p> <p>\u8fd4\u56de nums \u7684 \u4e0d\u540c\u5143\u7d20\u6570\u76ee\u5dee \u6570\u7ec4\u3002</p> <p>\u6ce8\u610f nums[i, ..., j] \u8868\u793a nums \u7684\u4e00\u4e2a\u4ece\u4e0b\u6807 i \u5f00\u59cb\u5230\u4e0b\u6807 j \u7ed3\u675f\u7684\u5b50\u6570\u7ec4\uff08\u5305\u542b\u4e0b\u6807 i \u548c j \u5bf9\u5e94\u5143\u7d20\uff09\u3002\u7279\u522b\u9700\u8981\u8bf4\u660e\u7684\u662f\uff0c\u5982\u679c i &gt; j \uff0c\u5219 nums[i, ..., j] \u8868\u793a\u4e00\u4e2a\u7a7a\u5b50\u6570\u7ec4\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1anums = [1,2,3,4,5] \u8f93\u51fa\uff1a[-3,-1,1,3,5] \u89e3\u91ca\uff1a \u5bf9\u4e8e i = 0\uff0c\u524d\u7f00\u4e2d\u6709 1 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 4 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[0] = 1 - 4 = -3 \u3002 \u5bf9\u4e8e i = 1\uff0c\u524d\u7f00\u4e2d\u6709 2 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 3 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[1] = 2 - 3 = -1 \u3002 \u5bf9\u4e8e i = 2\uff0c\u524d\u7f00\u4e2d\u6709 3 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 2 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[2] = 3 - 2 = 1 \u3002 \u5bf9\u4e8e i = 3\uff0c\u524d\u7f00\u4e2d\u6709 4 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 1 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[3] = 4 - 1 = 3 \u3002 \u5bf9\u4e8e i = 4\uff0c\u524d\u7f00\u4e2d\u6709 5 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 0 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[4] = 5 - 0 = 5 \u3002</p> <p>\u793a\u4f8b 2\uff1a</p> <p>\u8f93\u5165\uff1anums = [3,2,3,4,2] \u8f93\u51fa\uff1a[-2,-1,0,2,3] \u89e3\u91ca\uff1a \u5bf9\u4e8e i = 0\uff0c\u524d\u7f00\u4e2d\u6709 1 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 3 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[0] = 1 - 3 = -2 \u3002 \u5bf9\u4e8e i = 1\uff0c\u524d\u7f00\u4e2d\u6709 2 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 3 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[1] = 2 - 3 = -1 \u3002 \u5bf9\u4e8e i = 2\uff0c\u524d\u7f00\u4e2d\u6709 2 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 2 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[2] = 2 - 2 = 0 \u3002 \u5bf9\u4e8e i = 3\uff0c\u524d\u7f00\u4e2d\u6709 3 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 1 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[3] = 3 - 1 = 2 \u3002 \u5bf9\u4e8e i = 4\uff0c\u524d\u7f00\u4e2d\u6709 3 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u800c\u5728\u540e\u7f00\u4e2d\u6709 0 \u4e2a\u4e0d\u540c\u7684\u5143\u7d20\u3002\u56e0\u6b64\uff0cdiff[4] = 3 - 0 = 3 \u3002 </p> <p>\u7b80\u5355\u9898\u76ee\u6a21\u62df\u5373\u53ef\uff1a\u4e24\u4e2aset\u6700\u540e\u51cf\u53bb\u5927\u5c0f</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; distinctDifferenceArray(vector&lt;int&gt;&amp; nums) {\n        int n = nums.size();\n        vector&lt;int&gt; ans(n, 0);\n        for (int i = 0; i &lt; n; i++) {\n            unordered_set&lt;int&gt; set1;\n            for (int j = 0; j &lt;= i; j++) {\n                set1.insert(nums[j]);\n            }\n            unordered_set&lt;int&gt; set2;\n            for (int j = i + 1; j &lt; n; j++) {\n                set2.insert(nums[j]);\n            }\n            ans[i] = set1.size() - set2.size();\n        }\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-weekly/lc-344th-contest/#6417","title":"6417. \u9891\u7387\u8ddf\u8e2a\u5668","text":"<p>\u8bf7\u4f60\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u80fd\u591f\u5bf9\u5176\u4e2d\u7684\u503c\u8fdb\u884c\u8ddf\u8e2a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5e76\u652f\u6301\u5bf9\u9891\u7387\u76f8\u5173\u67e5\u8be2\u8fdb\u884c\u5e94\u7b54\u3002</p> <p>\u5b9e\u73b0 FrequencyTracker \u7c7b\uff1a</p> <ul> <li>FrequencyTracker()\uff1a\u4f7f\u7528\u4e00\u4e2a\u7a7a\u6570\u7ec4\u521d\u59cb\u5316 FrequencyTracker \u5bf9\u8c61\u3002</li> <li>void add(int number)\uff1a\u6dfb\u52a0\u4e00\u4e2a number \u5230\u6570\u636e\u7ed3\u6784\u4e2d\u3002</li> <li>void deleteOne(int number)\uff1a\u4ece\u6570\u636e\u7ed3\u6784\u4e2d\u5220\u9664\u4e00\u4e2a number \u3002\u6570\u636e\u7ed3\u6784 \u53ef\u80fd\u4e0d\u5305\u542b number \uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4e0d\u5220\u9664\u4efb\u4f55\u5185\u5bb9\u3002</li> <li>bool hasFrequency(int frequency): \u5982\u679c\u6570\u636e\u7ed3\u6784\u4e2d\u5b58\u5728\u51fa\u73b0 frequency \u6b21\u7684\u6570\u5b57\uff0c\u5219\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002</li> </ul> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165 [\"FrequencyTracker\", \"add\", \"add\", \"hasFrequency\"] [[], [3], [3], [2]] \u8f93\u51fa [null, null, null, true]</p> <p>\u89e3\u91ca FrequencyTracker frequencyTracker = new FrequencyTracker(); frequencyTracker.add(3); // \u6570\u636e\u7ed3\u6784\u73b0\u5728\u5305\u542b [3] frequencyTracker.add(3); // \u6570\u636e\u7ed3\u6784\u73b0\u5728\u5305\u542b [3, 3] frequencyTracker.hasFrequency(2); // \u8fd4\u56de true \uff0c\u56e0\u4e3a 3 \u51fa\u73b0 2 \u6b21</p> <p>\u6a21\u62df\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e24\u4e2amap\u7ef4\u62a4\u6570\u636e\uff1a</p> <pre><code>class FrequencyTracker {\npublic:\n    unordered_map&lt;int, int&gt; mp;\n    unordered_map&lt;int, int&gt; curSet;\n    FrequencyTracker() {\n\n    }\n\n    void add(int number) {\n        if (curSet[mp[number]] != 0)\n            curSet[mp[number]] --;\n        mp[number] ++;\n        curSet[mp[number]] ++;\n    }\n\n    void deleteOne(int number) {\n        if (mp.find(number) == mp.end() || mp[number] == 0) {\n            return ;\n        }\n        curSet[mp[number]] --;\n        mp[number] --;\n        curSet[mp[number]] ++;\n    }\n\n    bool hasFrequency(int frequency) {\n        return curSet[frequency] != 0;\n    }\n};\n\n/**\n * Your FrequencyTracker object will be instantiated and called as such:\n * FrequencyTracker* obj = new FrequencyTracker();\n * obj-&gt;add(number);\n * obj-&gt;deleteOne(number);\n * bool param_3 = obj-&gt;hasFrequency(frequency);\n */\n</code></pre>"},{"location":"Algorithm/lc-weekly/lc-344th-contest/#6418","title":"6418. \u6709\u76f8\u540c\u989c\u8272\u7684\u76f8\u90bb\u5143\u7d20\u6570\u76ee","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3001\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 nums \u3002\u4e00\u5f00\u59cb\uff0c\u6240\u6709\u5143\u7d20\u90fd\u662f \u672a\u67d3\u8272 \uff08\u503c\u4e3a 0 \uff09\u7684\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 queries \uff0c\u5176\u4e2d queries[i] = [indexi, colori] \u3002</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u64cd\u4f5c\uff0c\u4f60\u9700\u8981\u5c06\u6570\u7ec4 nums \u4e2d\u4e0b\u6807\u4e3a indexi \u7684\u683c\u5b50\u67d3\u8272\u4e3a colori \u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e0e queries \u76f8\u7b49\u7684\u6570\u7ec4 answer \uff0c\u5176\u4e2d answer[i]\u662f\u524d i \u4e2a\u64cd\u4f5c \u4e4b\u540e \uff0c\u76f8\u90bb\u5143\u7d20\u989c\u8272\u76f8\u540c\u7684\u6570\u76ee\u3002</p> <p>\u66f4\u6b63\u5f0f\u7684\uff0canswer[i] \u662f\u6267\u884c\u5b8c\u524d i \u4e2a\u64cd\u4f5c\u540e\uff0c0 &lt;= j &lt; n - 1 \u7684\u4e0b\u6807 j \u4e2d\uff0c\u6ee1\u8db3 nums[j] == nums[j + 1] \u4e14 nums[j] != 0 \u7684\u6570\u76ee\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <p>\u8f93\u5165\uff1an = 4, queries = [[0,2],[1,2],[3,1],[1,1],[2,1]] \u8f93\u51fa\uff1a[0,1,1,0,2] \u89e3\u91ca\uff1a\u4e00\u5f00\u59cb\u6570\u7ec4 nums = [0,0,0,0] \uff0c0 \u8868\u793a\u6570\u7ec4\u4e2d\u8fd8\u6ca1\u67d3\u8272\u7684\u5143\u7d20\u3002 - \u7b2c 1 \u4e2a\u64cd\u4f5c\u540e\uff0cnums = [2,0,0,0] \u3002\u76f8\u90bb\u5143\u7d20\u989c\u8272\u76f8\u540c\u7684\u6570\u76ee\u4e3a 0 \u3002 - \u7b2c 2 \u4e2a\u64cd\u4f5c\u540e\uff0cnums = [2,2,0,0] \u3002\u76f8\u90bb\u5143\u7d20\u989c\u8272\u76f8\u540c\u7684\u6570\u76ee\u4e3a 1 \u3002 - \u7b2c 3 \u4e2a\u64cd\u4f5c\u540e\uff0cnums = [2,2,0,1] \u3002\u76f8\u90bb\u5143\u7d20\u989c\u8272\u76f8\u540c\u7684\u6570\u76ee\u4e3a 1 \u3002 - \u7b2c 4 \u4e2a\u64cd\u4f5c\u540e\uff0cnums = [2,1,0,1] \u3002\u76f8\u90bb\u5143\u7d20\u989c\u8272\u76f8\u540c\u7684\u6570\u76ee\u4e3a 0 \u3002 - \u7b2c 5 \u4e2a\u64cd\u4f5c\u540e\uff0cnums = [2,1,1,1] \u3002\u76f8\u90bb\u5143\u7d20\u989c\u8272\u76f8\u540c\u7684\u6570\u76ee\u4e3a 2 \u3002</p> <p>\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09 \u94fe\u63a5\uff1ahttps://leetcode.cn/problems/number-of-adjacent-elements-with-the-same-color \u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002</p> <p>\u8d85\u65f6\u505a\u6cd5\uff1a</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; colorTheArray(int n, vector&lt;vector&lt;int&gt;&gt;&amp; queries) {\n        vector&lt;int&gt; ans(queries.size(), 0);\n        unordered_map&lt;int, unordered_set&lt;int&gt;&gt; mp;\n        vector&lt;int&gt; nums(n, 0);\n        int size = queries.size();\n        int tmp = 0;\n        for (int i = 0; i &lt; size; i++) {\n            int idx = queries[i][0];\n            int col = queries[i][1];\n            int oldColr = nums[idx];\n\n            tmp -= check(mp[oldColr]);\n            mp[oldColr].erase(idx);\n            tmp += check(mp[oldColr]);\n\n            tmp -= check(mp[col]);\n            mp[col].insert(idx);\n            tmp += check(mp[col]);\n            nums[idx] = col;\n            ans[i] = tmp;\n        }\n        return ans;\n    }\n\n    int check(unordered_set&lt;int&gt; &amp;tmp) {\n        if(tmp.size() &lt;= 1) {\n            return 0;\n        }\n        vector&lt;int&gt; cur;\n        int ans = 0;\n        cur.assign(tmp.begin(), tmp.end());\n        sort(cur.begin(), cur.end());\n        for (int i = 0; i + 1 &lt; cur.size(); i++) {\n            if (cur[i] + 1 == cur[i + 1]) {\n                ans ++;\n            }\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u6b63\u786e\u505a\u6cd5\uff1a\u53ea\u5173\u6ce8\u6bcf\u6b21\u66f4\u6539\u4e24\u8fb9\u5143\u7d20\u662f\u5426\u8054\u901a\uff0c\u590d\u7528\u4e0a\u4e00\u6b21\u7ed3\u679c\u3002</p> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; colorTheArray(int n, vector&lt;vector&lt;int&gt;&gt; &amp;queries) {\n        int q = queries.size(), cnt = 0;\n        vector&lt;int&gt; ans(q), a(n + 2); // \u907f\u514d\u8ba8\u8bba\u4e0b\u6807\u51fa\u754c\u7684\u60c5\u51b5\n        for (int qi = 0; qi &lt; q; qi++) {\n            int i = queries[qi][0] + 1, c = queries[qi][1]; // \u4e0b\u6807\u6539\u6210\u4ece 1 \u5f00\u59cb\n            // \u5982\u679c\u5f53\u524d\u6709\u989c\u8272\uff0c\u5219\u9700\u8981\u5224\u65ad\u4e24\u8fb9\u662f\u5426\u4e00\u81f4\uff0c\u5982\u679c\u4e00\u81f4\u5219\u5bf9\u5e94 + 1\n            if (a[i]) cnt -= (a[i] == a[i - 1]) + (a[i] == a[i + 1]);\n            // \u5c06i\u8bbe\u7f6e\u4e3a\u5f53\u524d\u989c\u8272\n            a[i] = c;\n            // \u9700\u8981\u5224\u65ad\u4e24\u8fb9\u662f\u5426\u4e00\u81f4\uff0c\u5982\u679c\u4e00\u81f4\u5219\u5bf9\u5e94 + 1\n            cnt += (a[i] == a[i - 1]) + (a[i] == a[i + 1]);\n            ans[qi] = cnt;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-weekly/lc-344th-contest/#6419","title":"6419. \u4f7f\u4e8c\u53c9\u6811\u6240\u6709\u8def\u5f84\u503c\u76f8\u7b49\u7684\u6700\u5c0f\u4ee3\u4ef7","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \u8868\u793a\u4e00\u68f5 \u6ee1\u4e8c\u53c9\u6811 \u91cc\u9762\u8282\u70b9\u7684\u6570\u76ee\uff0c\u8282\u70b9\u7f16\u53f7\u4ece 1 \u5230 n \u3002\u6839\u8282\u70b9\u7f16\u53f7\u4e3a 1 \uff0c\u6811\u4e2d\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 i \u90fd\u6709\u4e24\u4e2a\u5b69\u5b50\uff0c\u5206\u522b\u662f\u5de6\u5b69\u5b50 2 * i \u548c\u53f3\u5b69\u5b50 2 * i + 1 \u3002</p> <p>\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u503c\uff0c\u7528\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3001\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 cost \u8868\u793a\uff0c\u5176\u4e2d cost[i] \u662f\u7b2c i + 1 \u4e2a\u8282\u70b9\u7684\u503c\u3002\u6bcf\u6b21\u64cd\u4f5c\uff0c\u4f60\u53ef\u4ee5\u5c06\u6811\u4e2d \u4efb\u610f \u8282\u70b9\u7684\u503c \u589e\u52a0 1 \u3002\u4f60\u53ef\u4ee5\u6267\u884c\u64cd\u4f5c \u4efb\u610f \u6b21\u3002</p> <p>\u4f60\u7684\u76ee\u6807\u662f\u8ba9\u6839\u5230\u6bcf\u4e00\u4e2a \u53f6\u5b50\u7ed3\u70b9 \u7684\u8def\u5f84\u503c\u76f8\u7b49\u3002\u8bf7\u4f60\u8fd4\u56de \u6700\u5c11 \u9700\u8981\u6267\u884c\u589e\u52a0\u64cd\u4f5c\u591a\u5c11\u6b21\u3002</p> <p>\u6ce8\u610f\uff1a</p> <p>\u6ee1\u4e8c\u53c9\u6811 \u6307\u7684\u662f\u4e00\u68f5\u6811\uff0c\u5b83\u6ee1\u8db3\u6811\u4e2d\u9664\u4e86\u53f6\u5b50\u8282\u70b9\u5916\u6bcf\u4e2a\u8282\u70b9\u90fd\u6070\u597d\u6709 2 \u4e2a\u8282\u70b9\uff0c\u4e14\u6240\u6709\u53f6\u5b50\u8282\u70b9\u8ddd\u79bb\u6839\u8282\u70b9\u8ddd\u79bb\u76f8\u540c\u3002 \u8def\u5f84\u503c \u6307\u7684\u662f\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u7684\u503c\u4e4b\u548c</p> <p></p> <p>\u89e3\u6cd5\u4e00\uff0c\u8d2a\u5fc3\u601d\u8def\uff1a\u4ece\u4e0b\u5230\u4e0a\u6a21\u62df\uff0c\u4ece\u6700\u540e\u975e\u53f6\u5b50\u7ed3\u70b9\u5f00\u59cb\uff0c\u6bd4\u8f83\u7ed3\u70b9\u4e0b\u9762\u7684\u8def\u5f84\u548c\uff0c\u8ba1\u7b97ans</p> <pre><code>class Solution {\npublic:\n    int minIncrements(int n, vector&lt;int&gt; &amp;cost) {\n        int ans = 0;\n        for (int i = n / 2; i; i--) { // \u4ece\u6700\u540e\u4e00\u4e2a\u975e\u53f6\u8282\u70b9\u5f00\u59cb\u7b97\n            ans += abs(cost[i * 2 - 1] - cost[i * 2]); // \u4e24\u4e2a\u5b50\u8282\u70b9\u53d8\u6210\u4e00\u6837\u7684\n            cost[i - 1] += max(cost[i * 2 - 1], cost[i * 2]); // \u7d2f\u52a0\u8def\u5f84\u548c\n        }\n        return ans;\n    }\n};\n</code></pre> <p>\u89e3\u6cd5\u513f\uff0cDSF\uff1a</p> <pre><code>class Solution {\npublic:\n    int minIncrements(int n, vector&lt;int&gt;&amp; cost) {\n        int ans = 0;\n\n        function&lt;int(int)&gt; dfs = [&amp;](int i) -&gt; int {\n            if (i &gt;= n) {\n                return 0;\n            }\n            int sum = cost[i];\n            int l = dfs(2 * i + 1); /* \u6c42\u5de6\u5b50\u6811\u7684\u548c */\n            int r = dfs(2 * i + 2); /* \u6c42\u53f3\u5b50\u6811\u7684\u548c */\n            sum += max(l, r);  /* \u5f53\u524d\u8def\u5f84\u7684\u548c */\n            ans += abs(l - r); /* \u9700\u8981\u5e73\u8861\u5de6\u53f3\u5b50\u6811\u7684\u64cd\u4f5c\u6570 */\n            return sum;\n        };\n\n        dfs(0);\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-weekly/lc-376th/","title":"LC.376th\u5468\u8d5b","text":""},{"location":"Algorithm/lc-weekly/lc-376th/#100149","title":"100149. \u627e\u51fa\u7f3a\u5931\u548c\u91cd\u590d\u7684\u6570\u5b57","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; findMissingAndRepeatedValues(vector&lt;vector&lt;int&gt;&gt;&amp; grid) {\n        int a , b;\n        map&lt;int, int&gt; cnt;\n        for(auto x : grid) {\n            for(auto y : x) {\n                if (cnt[y] != 0) {\n                    a = y;\n                }\n                cnt[y]++;\n            }\n        }\n        for(int i = 1; i &lt;= grid.size() * grid.size(); i++) {\n            if (cnt[i] == 0) {\n                b = i;\n                break;\n            }\n        }\n\n        return {a, b};\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-weekly/lc-376th/#100161","title":"100161. \u5212\u5206\u6570\u7ec4\u5e76\u6ee1\u8db3\u6700\u5927\u5dee\u9650\u5236","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; divideArray(vector&lt;int&gt;&amp; nums, int k) {\n        sort(nums.begin(), nums.end());\n        vector&lt;vector&lt;int&gt;&gt; ans;\n        int n = nums.size();\n        int cnt = 0;\n        for(int i = 0, j = 0; i &lt; n &amp;&amp; j &lt; n; ) {\n            j = i;\n            int curMax = nums[i], curMin = nums[j];\n            vector&lt;int&gt; cur;\n            while(j &lt; n &amp;&amp; curMax - curMin &lt;= k) {\n                cur.push_back(nums[j]);\n                j++;\n                if (cur.size() == 3) {\n                    break;\n                }\n                if (j &gt;= n) continue;\n                curMax = max(curMax, nums[j]);\n                curMin = min(curMin, nums[j]);\n            }\n            i = j;\n            if (cur.size() &lt; 3) {\n                return {};\n            }\n            if (cur.size() != 0) {\n                ans.push_back(cur);\n            }\n        }\n        if (ans.size() == n / 3) {\n            return ans;\n        }\n        return {};\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-weekly/lc-376th/#100151","title":"100151. \u4f7f\u6570\u7ec4\u6210\u4e3a\u7b49\u6570\u6570\u7ec4\u7684\u6700\u5c0f\u4ee3\u4ef7","text":"<ol> <li>\u5982\u4f55\u6253\u8868\u751f\u6210\u6240\u6709\u56de\u6587\u6570\u5b57</li> <li>\u5feb\u901f\u9009\u62e9\u5e93\u51fd\u6570\uff0c\u83b7\u5f97\u7b2cM\u5927\u5143\u7d20\uff1a<code>nth_element(nums.begin(), nums.begin() + m, nums.end());</code></li> <li>\u5982\u4f55\u521d\u59cb\u5316\u51fd\u6570\uff1a<code>auto init = [] {\u51fd\u6570\u4f53}();</code></li> <li>\u5b9a\u4e49\u51fd\u6570\u5f15\u7528\uff1a<code>auto cost = [&amp;](int i, int j) -&gt; long long {};</code></li> <li>\u4e8c\u5206\u67e5\u627e\u83b7\u5f97\u5bf9\u5e94\u4e0b\u6807\uff1a<code>lower_bound(pal.begin(), pal.end(), mid) - pal.begin();</code></li> </ol> <pre><code>vector&lt;int&gt; pal;\n\nauto init = [] {\n    pal.push_back(0); // \u54e8\u5175\uff0c\u9632\u6b62\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684 i \u4e0b\u6807\u8d8a\u754c\n    // \u4e25\u683c\u6309\u987a\u5e8f\u4ece\u5c0f\u5230\u5927\u751f\u6210\u6240\u6709\u56de\u6587\u6570\uff08\u4e0d\u7528\u5b57\u7b26\u4e32\u8f6c\u6362\uff09\n    for (int base = 1; base &lt;= 10000; base *= 10) {\n        // \u751f\u6210\u5947\u6570\u957f\u5ea6\u56de\u6587\u6570\n        for (int i = base; i &lt; base * 10; i++) {\n            int x = i;\n            for (int t = i / 10; t; t /= 10) {\n                x = x * 10 + t % 10;\n            }\n            pal.push_back(x);\n        }\n        // \u751f\u6210\u5076\u6570\u957f\u5ea6\u56de\u6587\u6570\n        if (base &lt;= 1000) {\n            for (int i = base; i &lt; base * 10; i++) {\n                int x = i;\n                for (int t = i; t; t /= 10) {\n                    x = x * 10 + t % 10;\n                }\n                pal.push_back(x);\n            }\n        }\n    }\n    pal.push_back(1'000'000'001); // \u54e8\u5175\uff0c\u9632\u6b62\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684 i \u4e0b\u6807\u8d8a\u754c\n    return 0;\n}();\n\nclass Solution {\npublic:\n    long long minimumCost(vector&lt;int&gt; &amp;nums) {\n        int m = (nums.size() - 1) / 2;\n        nth_element(nums.begin(), nums.begin() + m, nums.end());\n        int mid = nums[m]; // \u4e2d\u4f4d\u6570\n\n        // \u8fd4\u56de nums \u4e2d\u7684\u6240\u6709\u6570\u53d8\u6210 pal[i] \u7684\u603b\u4ee3\u4ef7\n        auto cost = [&amp;](int i) -&gt; long long {\n            int target = pal[i];\n            long long sum = 0;\n            for (int x: nums) {\n                sum += abs(x - target);\n            }\n            return sum;\n        };\n\n        // \u4e8c\u5206\u627e\u4e2d\u4f4d\u6570\u53f3\u4fa7\u6700\u8fd1\u7684\u56de\u6587\u6570\n        int i = lower_bound(pal.begin(), pal.end(), mid) - pal.begin();\n\n        // \u679a\u4e3e\u79bb\u4e2d\u4f4d\u6570\u6700\u8fd1\u7684\u4e24\u4e2a\u56de\u6587\u6570 pal[i-1] \u548c pal[i]\n        return min(cost(i - 1), cost(i));\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-weekly/lc-376th/#100123","title":"100123. \u6267\u884c\u64cd\u4f5c\u4f7f\u9891\u7387\u5206\u6570\u6700\u5927","text":"<ol> <li>\u524d\u7f00\u548c+\u6ed1\u52a8\u7a97\u53e3</li> </ol> <pre><code>class Solution {\npublic:\n    int maxFrequencyScore(vector&lt;int&gt; &amp;nums, long long k) {\n        sort(nums.begin(), nums.end());\n\n        int n = nums.size();\n        vector&lt;long long&gt; s(n + 1, 0);\n        for (int i = 0; i &lt; n; i++) {\n            s[i + 1] = s[i] + nums[i];\n        }\n\n        // \u628a nums[l] \u5230 nums[r] \u90fd\u53d8\u6210 nums[i]\n        auto distance_sum = [&amp;](int l, int i, int r) -&gt; long long {\n            long long left = (long long) nums[i] * (i - l) - (s[i] - s[l]);\n            long long right = s[r + 1] - s[i + 1] - (long long) nums[i] * (r - i);\n            return left + right;\n        };\n\n        int ans = 0, left = 0;\n        for (int i = 0; i &lt; n; i++) {\n            while (distance_sum(left, (left + i) / 2, i) &gt; k) {\n                left++;\n            }\n            ans = max(ans, i - left + 1);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-weekly/lc-377th/","title":"LC377th\u5468\u8d5b","text":""},{"location":"Algorithm/lc-weekly/lc-377th/#100148","title":"100148. \u6700\u5c0f\u6570\u5b57\u6e38\u620f","text":"<pre><code>class Solution {\npublic:\n    vector&lt;int&gt; numberGame(vector&lt;int&gt;&amp; nums) {\n        priority_queue&lt;int&gt; tmp;\n        for(auto x : nums) {\n            tmp.push(-x);\n        }\n        vector&lt;int&gt; ans;\n        while(!tmp.empty()) {\n            int a = -tmp.top();tmp.pop();\n            int b = -tmp.top();tmp.pop();\n            ans.push_back(b);\n            ans.push_back(a);\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-weekly/lc-377th/#100169","title":"100169. \u79fb\u9664\u6805\u680f\u5f97\u5230\u7684\u6b63\u65b9\u5f62\u7530\u5730\u7684\u6700\u5927\u9762\u79ef","text":"<pre><code>class Solution {\n    unordered_set&lt;int&gt; f(vector&lt;int&gt; &amp;a, int mx) {\n        a.push_back(1);\n        a.push_back(mx);\n        sort(a.begin(), a.end());\n        unordered_set&lt;int&gt; set;\n        for (int i = 0; i &lt; a.size(); i++) {\n            for (int j = i + 1; j &lt; a.size(); j++) {\n                set.insert(a[j] - a[i]);\n            }\n        }\n        return set;\n    }\n\npublic:\n    int maximizeSquareArea(int m, int n, vector&lt;int&gt; &amp;hFences, vector&lt;int&gt; &amp;vFences) {\n        auto h = f(hFences, m);\n        auto v = f(vFences, n);\n        if (h.size() &gt; v.size()) {\n            swap(h, v);\n        }\n        int ans = 0;\n        for (int x: h) {\n            if (v.contains(x)) {\n                ans = max(ans, x);\n            }\n        }\n        return ans ? (long long) ans * ans % 1'000'000'007 : -1;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-weekly/lc-377th/#100156-i","title":"100156. \u8f6c\u6362\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u6210\u672c I","text":"<pre><code>class Solution {\npublic:\n    long long minimumCost(string source, string target, vector&lt;char&gt; &amp;original, vector&lt;char&gt; &amp;changed, vector&lt;int&gt; &amp;cost) {\n        int dis[26][26];\n        memset(dis, 0x3f, sizeof(dis));\n        for (int i = 0; i &lt; 26; i++) {\n            dis[i][i] = 0;\n        }\n        for (int i = 0; i &lt; cost.size(); i++) {\n            int x = original[i] - 'a';\n            int y = changed[i] - 'a';\n            dis[x][y] = min(dis[x][y], cost[i]);\n        }\n        for (int k = 0; k &lt; 26; k++) {\n            for (int i = 0; i &lt; 26; i++) {\n                for (int j = 0; j &lt; 26; j++) {\n                    dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);\n                }\n            }\n        }\n\n        long long ans = 0;\n        for (int i = 0; i &lt; source.length(); i++) {\n            int d = dis[source[i] - 'a'][target[i] - 'a'];\n            if (d == 0x3f3f3f3f) {\n                return -1;\n            }\n            ans += d;\n        }\n        return ans;\n    }\n};\n</code></pre>"},{"location":"Algorithm/lc-weekly/lc-377th/#100158-ii","title":"100158. \u8f6c\u6362\u5b57\u7b26\u4e32\u7684\u6700\u5c0f\u6210\u672c II","text":"<pre><code>struct Node {\n    Node *son[26]{};\n    int sid = -1; // \u5b57\u7b26\u4e32\u7684\u7f16\u53f7\n};\n\nclass Solution {\npublic:\n    long long minimumCost(string source, string target, vector&lt;string&gt; &amp;original, vector&lt;string&gt; &amp;changed, vector&lt;int&gt; &amp;cost) {\n        Node *root = new Node();\n        int sid = 0;\n        auto put = [&amp;](string &amp;s) -&gt; int {\n            Node *o = root;\n            for (char b: s) {\n                int i = b - 'a';\n                if (o-&gt;son[i] == nullptr) {\n                    o-&gt;son[i] = new Node();\n                }\n                o = o-&gt;son[i];\n            }\n            if (o-&gt;sid &lt; 0) {\n                o-&gt;sid = sid++;\n            }\n            return o-&gt;sid;\n        };\n\n        // \u521d\u59cb\u5316\u8ddd\u79bb\u77e9\u9635\n        int m = cost.size();\n        vector&lt;vector&lt;int&gt;&gt; dis(m * 2, vector&lt;int&gt;(m * 2, INT_MAX / 2));\n        for (int i = 0; i &lt; m * 2; i++) {\n            dis[i][i] = 0;\n        }\n        for (int i = 0; i &lt; m; i++) {\n            int x = put(original[i]);\n            int y = put(changed[i]);\n            dis[x][y] = min(dis[x][y], cost[i]);\n        }\n\n        // Floyd \u6c42\u4efb\u610f\u4e24\u70b9\u6700\u77ed\u8def\n        for (int k = 0; k &lt; sid; k++) {\n            for (int i = 0; i &lt; sid; i++) {\n                if (dis[i][k] == INT_MAX / 2) { // \u52a0\u4e0a\u8fd9\u53e5\u8bdd\uff0c\u5de8\u5927\u4f18\u5316\uff01\n                    continue;\n                }\n                for (int j = 0; j &lt; sid; j++) {\n                    dis[i][j] = min(dis[i][j], dis[i][k] + dis[k][j]);\n                }\n            }\n        }\n\n        int n = source.size();\n        vector&lt;long long&gt; memo(n, -1);\n        function&lt;long long(int)&gt; dfs = [&amp;](int i) -&gt; long long {\n            if (i &gt;= n) {\n                return 0;\n            }\n            auto &amp;res = memo[i];\n            if (res != -1) {\n                return res;\n            }\n            res = LONG_LONG_MAX / 2;\n            if (source[i] == target[i]) {\n                res = dfs(i + 1); // \u4e0d\u4fee\u6539 source[i]\n            }\n            Node *p = root, *q = root;\n            for (int j = i; j &lt; n; j++) {\n                p = p-&gt;son[source[j] - 'a'];\n                q = q-&gt;son[target[j] - 'a'];\n                if (p == nullptr || q == nullptr) {\n                    break;\n                }\n                if (p-&gt;sid &lt; 0 || q-&gt;sid &lt; 0) {\n                    continue;\n                }\n                // \u4fee\u6539\u4ece i \u5230 j \u7684\u8fd9\u4e00\u6bb5\n                int d = dis[p-&gt;sid][q-&gt;sid];\n                if (d &lt; INT_MAX / 2) {\n                    res = min(res, dis[p-&gt;sid][q-&gt;sid] + dfs(j + 1));\n                }\n            }\n            return res;\n        };\n        long long ans = dfs(0);\n        return ans &lt; LONG_LONG_MAX / 2 ? ans : -1;\n    }\n};\n</code></pre>"},{"location":"Algorithm/notes/template/","title":"Template","text":""},{"location":"Algorithm/notes/template/#stl","title":"STL\u7528\u6cd5","text":"<ol> <li>sort\u8bed\u6cd5\uff1a</li> </ol> <pre><code>std::sort(points.begin(), points.end(), [](const auto&amp; a, const auto&amp; b) {\n            return a[0] &lt; b[0];\n });\n</code></pre> <ol> <li></li> </ol>"},{"location":"Algorithm/notes/part-one/01-introduction/","title":"Introduction\uff5c\u7b80\u4ecb","text":""},{"location":"Algorithm/notes/part-one/01-introduction/#programming-language","title":"Programming Language\uff5c\u7f16\u7a0b\u8bed\u8a00","text":"<p>At the moment, the most popular programming languages used in contests are C++, Python and Java. For example, in Google Code Jam 2017, among the best 3,000 participants, 79 % used C++, 16 % used Python and 8 % used Java [29]. Some participants also used several languages.</p> <p>\u76ee\u524d\u6709\u5f88\u591a\u8bed\u8a00\u53ef\u4ee5\u9009\u62e9\uff1a</p> <ul> <li>python\uff1a\u5f88\u591a\u5185\u7f6e\u51fd\u6570\uff0c\u652f\u6301\u641e\u5b9a\u5ea6\u8fd0\u7b97</li> <li>java\uff1aCollection\u5e93\u4ee5\u53caUtil\u5e93\u5237\u9898\u4e5f\u4e0d\u9519</li> <li>c++(11+)\uff1a\u56e0\u4e3a\u5e26\u6709STL\u652f\u6301\u5404\u79cd\u6570\u636e\u7ed3\u6784\u4ee5\u53ca\u9644\u5e26\u7b97\u6cd5\uff0c\u6bd4\u8f83\u9002\u5408\u505a\u7b97\u6cd5\u9898\u3002\u672c\u6587\u4ee5cpp 11\u7248\u672c\u4e66\u5199\u4ee3\u7801\u3002</li> </ul>"},{"location":"Algorithm/notes/part-one/01-introduction/#c-code-template","title":"C++ Code Template\uff5c\u4ee3\u7801\u6a21\u677f","text":"<p>A typical C++ code template:</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\nint main() {\n    // solution comes here\n    cout &lt;&lt; \"Hello World!\" &lt;&lt; endl;\n}\n</code></pre> <ul> <li><code>#include</code> is a feture of g++ compiler that allows up to import libs.</li> <li><code>bits/stdc++.h</code>\u662f\u4e07\u80fd\u5e93\u5305\u542b\u5e38\u7528\u7684\u5e93\u6587\u4ef6</li> <li><code>using namespace std;</code>\u8868\u793a\u7c7b\u548c\u51fd\u6570\u53ef\u4ee5\u76f4\u63a5\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\uff0c\u5982\u679c\u9664\u53bb\u8fd9\u4e00\u53e5\uff0c\u4e3e\u4e2a\u4f8b\u5b50\u4f60\u7684\u8f93\u51fa\u5199\u6cd5\u524d\u9762\u5c31\u8981\u52a0\u4e0a<code>std::cout</code></li> <li>\u8fd0\u884ccode\uff1a<code>g++ -std=c++11 -O2 -Wall test.cpp -o test</code><ul> <li><code>-std=c++11</code>\uff1a\u8868\u793a\u4f7f\u7528cpp11\u8bed\u6cd5\u6807\u51c6</li> <li><code>-O2</code>\uff1a\u4f18\u5316\u4ee3\u7801</li> <li><code>-Wall</code>\uff1a\u5c55\u793a\u8b66\u544a\u548c\u53ef\u80fd\u7684\u9519\u8bef</li> </ul> </li> </ul>"},{"location":"Algorithm/notes/part-one/01-introduction/#input-and-output","title":"Input And Output\uff5c\u8f93\u5165\u4e0e\u8f93\u51fa","text":"<ul> <li> <p>Input : cin,\u53ef\u4ee5\u5ffd\u7565\u4e2d\u95f4\u7a7a\u683c\u4ee5\u53ca\u6362\u884c</p> <pre><code>int a, b;\nstring x;\ncin &gt;&gt; a &gt;&gt; b &gt;&gt; x;\n</code></pre> </li> <li> <p>Output : cout stream</p> <pre><code>int a = 123, b = 456;\nstring x = \"monkey\";\ncout &lt;&lt; a &lt;&lt; \" \" &lt;&lt; b &lt;&lt; \" \" &lt;&lt; x &lt;&lt; \"\\n\";\n</code></pre> </li> <li> <p>\u4f18\u5316\u8f93\u5165\u8f93\u51fa\u901f\u5ea6\uff1a</p> <pre><code>ios::sync_with_stdio(0);\ncin.tie(0);\n</code></pre> </li> <li> <p>endl:\u6362\u884c\u5e76\u5237\u65b0\u7f13\u51b2\u533a</p> </li> <li> <p>printf\u4e0escanf\u8981\u6bd4cin\u548ccout\u5feb</p> </li> <li> <p>\u8bfb\u53d6\u4e00\u6574\u884c\uff1a</p> <pre><code>string s;\ngetline(cin, s);\n</code></pre> </li> <li> <p>\u8bfb\u53d6\u672a\u77e5\u591a\u884c\u6570\u636e\uff0c\u4e00\u76f4\u8bfb\u53d6\u5230\u6570\u636e\u672b\u5c3eEOF</p> <pre><code>while (cin &gt;&gt; x) {\n    // code\n}\n</code></pre> </li> <li> <p>\u8bfb\u53d6\u6587\u4ef6\u548c\u8f93\u51fa\u5230\u6587\u4ef6</p> <pre><code>freopen(\"input.txt\", \"r\", stdin);\nfreopen(\"output.txt\", \"w\", stdout);\n</code></pre> </li> </ul>"},{"location":"Algorithm/notes/part-one/01-introduction/#working-with-numbers","title":"Working With Numbers\uff5c\u5904\u7406\u6570\u5b57","text":""},{"location":"Algorithm/notes/part-one/01-introduction/#integers","title":"Integers\uff5c\u6574\u6570","text":"<ul> <li>\u6570\u636e\u8303\u56f4<ul> <li>32bit(int)\uff1a\u22122<sup>31</sup>...2<sup>31</sup>\u22121\uff0c\u5927\u6982-2 * 10<sup>9</sup>~2 * 10 <sup>9</sup></li> <li>64bit(long long): 2<sup>63</sup>...2<sup>63</sup>\u22121\uff0c\u5927\u6982\u22129\u00b710<sup>18</sup> ...9\u00b710<sup>18</sup></li> </ul> </li> <li>LL\u6807\u8bc6long long\u7c7b\u578b\uff1a<code>long long x = 123456789123456789LL;</code></li> <li>\u4e24\u4e2aint*int\u7ed3\u679c\u8fd8\u662fint</li> <li>g++ compiler\u652f\u6301128bit\u6570\u636e<code>__int128_t</code>\uff0c\u5927\u6982\u6570\u636e\u8303\u56f4\u5728-10<sup>38</sup>~10<sup>38</sup>(\u5927\u591a\u6570\u7ade\u8d5b\u90fd\u4e0d\u5141\u8bb8\u6b64\u7c7b\u578b)</li> </ul>"},{"location":"Algorithm/notes/part-one/01-introduction/#modular-arithmetic","title":"Modular Arithmetic\uff5c\u6a21\u8fd0\u7b97","text":"<p>\u5728\u67d0\u4e9b\u7b54\u6848\u7279\u522b\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u4e3a\u4e86\u7167\u987e\u5404\u8bed\u8a00\u7684\u5dee\u5f02\uff0c\u6240\u4ee5\u90fd\u4f1a\u5bf9\u7ed3\u679c\u8fdb\u884c\u53d6\u6a21\u64cd\u4f5c\uff0c\u5e38\u7528\u7684mod\u6570\u4e3a<code>1e9 + 7</code>\uff0c\u8fd9\u6837\u53ef\u4ee5\u7167\u987e\u5230int\u548clong\u6570\u636e\u7c7b\u578b\u3002</p> <p>\u6a21\u8fd0\u7b97\u7b49\u5f0f\uff1a</p> <p></p> <p>\u8d1f\u6570\u7684\u6a21\u8fd0\u7b97\u4e3a0\u6216\u8005\u8d1f\u6570\u3002</p>"},{"location":"Algorithm/notes/part-one/01-introduction/#floating-point-numbers","title":"Floating Point Numbers\uff5c\u6d6e\u70b9\u6570","text":"<p>\u5e38\u7528\u7684\u662f64bit\u7684double\u7c7b\u578b\uff0c\u540c\u65f6g++\u652f\u630180bit\u7684long double\uff0c\u5927\u591a\u6570\u573a\u666f\u4e0b64\u5c31\u591f\u4e86\uff0c80\u7684\u66f4\u4e3a\u51c6\u786e\u3002</p> <p><code>printf(\"%.9f\\n\", x);</code>\u6253\u5370\u4fdd\u7559\u4e5d\u4f4d\u5c0f\u6570</p> <p>rounding errors\uff1a</p> <pre><code>double x = 0.3*3+0.1;\nprintf(\"%.20f\\n\", x); // 0.99999999999999988898\n</code></pre> <p>\u56e0\u4e3a\u5b58\u5728\u820d\u5165\u8bef\u5dee\u6240\u4ee5\u5bf9\u4e8e\u6d6e\u70b9\u6570\u7684\u6bd4\u8f83\u8981\u7528\uff1a</p> <pre><code>if (abs(a-b) &lt; 1e-9) {\n    // a and b are equal\n}\n</code></pre>"},{"location":"Algorithm/notes/part-one/01-introduction/#shortening-code","title":"Shortening Code\uff5c\u7b80\u5316\u4ee3\u7801","text":"<p>\u7b80\u5316\u4ee3\u7801</p>"},{"location":"Algorithm/notes/part-one/01-introduction/#type-names","title":"Type Names\uff5c\u7c7b\u578b\u540d\u79f0","text":"<p>\u7528<code>typedef</code>\u6765\u7ed9\u51fa\u4e00\u4e2a\u7b80\u77ed\u7684\u7c7b\u578b\u540d\u79f0.</p> <pre><code>typedef long long ll;\nlong long a = 123456789;\nlong long b = 987654321;\ncout &lt;&lt; a*b &lt;&lt; \"\\n\";\n</code></pre> <pre><code>typedef vector&lt;int&gt; vi;\ntypedef pair&lt;int,int&gt; pi;\n</code></pre>"},{"location":"Algorithm/notes/part-one/01-introduction/#macros","title":"Macros\uff5c\u5b8f\u5b9a\u4e49","text":"<p>A macro means that certain strings in the code will be changed before the compilation.In C++, macros are defined using the #define keyword.</p> <pre><code>#define F first\n#define S second\n#define PB push_back\n #define MP make_pair\n</code></pre> <p>code:</p> <pre><code>v.push_back(make_pair(y1,x1));\nv.push_back(make_pair(y2,x2));\nint d = v[i].first+v[i].second;\n</code></pre> <p>Shortend:</p> <pre><code>v.PB(MP(y1,x1));\nv.PB(MP(y2,x2));\nint d = v[i].F+v[i].S;\n</code></pre> <p>Macro param:</p> <pre><code>#define REP(i,a,b) for (int i = a; i &lt;= b; i++)\n\nfor (int i = 1; i &lt;= n; i++) {\n    search(i);\n}\n\n// to \nREP(i,1,n) {\n    search(i);\n}\n</code></pre>"},{"location":"Algorithm/notes/part-one/01-introduction/#mathematics","title":"Mathematics\uff5c\u7b97\u6570\u8fd0\u7b97","text":""},{"location":"Algorithm/notes/part-one/01-introduction/#sum-formulas","title":"Sum Formulas\uff5c\u6c42\u548c\u516c\u5f0f","text":"<p>\u7ed9\u51fa\u4e00\u4e9b\u5e38\u7528\u6c42\u548c\u516c\u5f0f\uff1a</p> <p></p> <p>arithmetic progression\uff5c\u7b49\u5dee\u6570\u5217</p> <p>\u5982\u679c\u5404\u6570\u4e4b\u95f4\u5dee\u503c\u76f8\u540c\uff0c\u5b58\u5728\u4e00\u4e2a\u8ba1\u7b97\u516c\u5f0f\uff1a</p> <p>exp\uff1a<code>3, 7, 11, 15</code></p> <p>\u516c\u5f0f\u4e3a\uff1a</p> <p>geometric progression\uff5c\u7b49\u6bd4\u6570\u5217</p> <p>A geometric progression is a sequence of numbers where the ratio between any two consecutive numbers is constant. For example,3,6,12,24</p> <p></p> <p>harmonic sum\uff5c\u8c10\u6ce2\u548c</p> <p></p>"},{"location":"Algorithm/notes/part-one/01-introduction/#set-theory","title":"Set Theory\uff5c\u96c6\u5408\u8bba","text":"<p>A set is a collection of elements. For example, the set, X = {2, 4, 7}</p> <ul> <li>|S|\u8868\u793aS\u7684size</li> <li>\u5982\u679cS\u4e2d\u5305\u542b\u4e00\u4e2ax\uff0c\u5199\u505ax \u2208 S\uff0c\u5426\u8005 x \u2208\u0338 S</li> <li>\u96c6\u5408\u64cd\u4f5c<ul> <li>The intersection A \u2229 B\uff5c\u53d6\u4ea4\u96c6</li> <li>The union A \u222a B\uff5c\u53d6\u5e76\u96c6</li> <li>The complement A \u0304\uff5c\u53d6\u53cd</li> <li>The difference A  B = A \u2229 B \u0304\uff5c\u5c06B\u7684\u5143\u7d20\u4eceA\u4e2d\u79fb\u9664</li> </ul> </li> <li>subset\uff1aA\u4e2d\u5143\u7d20\u90fd\u5b58\u5728\u4e8eS\uff0c\u5199\u505aA \u2282 S\uff0c\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6\u683c\u6570\u4e3a2<sup>|S|</sup>\uff0c\u5305\u542b\u7a7a\u96c6</li> <li>\u5b57\u7b26\u8868\u793a<ul> <li>N (natural numbers), </li> <li>Z (integers), </li> <li>Q (rational numbers)</li> <li>R (real numbers)</li> </ul> </li> <li>\u8868\u793a\u4e00\u4e2a\u96c6\u5408\uff1a<code>{f(n):n\u2208S},</code><ul> <li>f(n)\u8868\u793a\u51fd\u6570</li> <li>n\u8868\u793a\u53c2\u6570\uff0c\u5e76\u4e14\u8303\u56f4\u5728S\u4e2d</li> </ul> </li> </ul>"},{"location":"Algorithm/notes/part-one/01-introduction/#logic","title":"Logic\uff5c\u903b\u8f91\u8fd0\u7b97","text":"<p>The value of a logical expression is either true (1) or false (0). </p> <p>The most impor- tant logical operators are \u00ac (negation), \u2227 (conjunction), \u2228 (disjunction), \u21d2 (implication) and \u21d4 (equivalence).</p> <ul> <li>A predicate\uff1a\u4e00\u4e2a\u57fa\u4e8e\u53c2\u6570\u4e3a\u6700\u540e\u7ed3\u679c\u4e3atrue\u6216\u8005false\u7684\u8868\u8fbe\u5f0f</li> <li>A quantifier\uff1aconnects a logical expression to the elements of a set. The most important quantifiers are \u2200 (for all) and \u2203 (there is). For example,</li> </ul> <p>\u2200x(\u2203y(y&lt;x))\uff1a\u8868\u793a\u6240\u6709x\u90fd\u6709\u4e00\u4e2ay\u5c0f\u4e8ex\uff0c\u5f53\u96c6\u5408\u4e3a\u6240\u6709\u6574\u6570\u65f6\u4e3atrue\uff0c\u4e3a\u81ea\u7136\u6570\u7684\u65f6\u5019\u662ffalse\u56e0\u4e3ax\u5b58\u5728\u6700\u5c0f\u503c\u3002</p> <p>Using the notation described above, we can express many kinds of logical propositions. For example,</p> <p>\u2200x((x&gt;1\u2227\u00acP(x))\u21d2(\u2203a(\u2203b(a&gt;1\u2227b&gt;1\u2227x=ab))))\uff1a\u8868\u793a\u5982\u679c\u4e00\u4e2a\u6570\u5b57x\u6bd41\u5927\u5e76\u4e14\u4e0d\u662f\u7d20\u6570\uff0c\u90a3\u4e48\u5b58\u5728a\u548cb\uff0c\u4ed6\u4eec\u90fd\u90fd\u5927\u4e8e1\u5e76\u4e14\u4e58\u79ef\u4e3ax\u3002\u5f53\u96c6\u5408\u662f\u6574\u6570\u65f6\u8fd9\u4e2a\u5047\u8bbe\u6210\u7acb\u3002</p>"},{"location":"Algorithm/notes/part-one/01-introduction/#functions","title":"Functions\uff5c\u8ba1\u7b97\u51fd\u6570","text":"<ul> <li> <p>ceil and floor:The function \u230ax\u230b rounds the number x down to an integer, and the function \u2308x\u2309 rounds the number x up to an integer. For example,\u230a3/2\u230b = 1 and \u23083/2\u2309 = 2.</p> </li> <li> <p>max and min:The functions min(x1,x2,...,xn) and max(x1,x2,...,xn) give the smallest and largest of values x1,x2,...,xn. For example,min(1,2,3) = 1 and max(1,2,3) = 3.</p> </li> <li> <p>The factorial n! can be defined</p> <p></p> </li> <li> <p>Fibonacci numbers\uff5c\u6590\u6ce2\u90a3\u5951\u6570\u5217:</p> <p></p> <ul> <li> <p>Binet\u2019s formula\uff5c\u6bd4\u5948\u516c\u5f0f:</p> <p></p> </li> </ul> </li> </ul>"},{"location":"Algorithm/notes/part-one/01-introduction/#logarithms","title":"Logarithms\uff5c\u5bf9\u6570","text":"<p>The logarithm of a number x is denoted logk(x), where k is the base of the logarithm. According to the definition, logk(x) = a exactly when k<sup>a</sup> = x.</p> <p></p> <p>The natural logarithm ln(x) of a number x is a logarithm whose base is e \u2248 2.71828. Another property of logarithms is that the number of digits of an integer x in base b is \u230alogb(x)+1\u230b. For example, the representation of 123 in base 2 is 1111011 and \u230alog2(123) + 1\u230b = 7.</p>"},{"location":"Algorithm/notes/part-one/01-introduction/#contests-and-resources","title":"Contests and resources\uff5c\u6bd4\u8d5b\u548c\u8d44\u6e90","text":""},{"location":"Algorithm/notes/part-one/01-introduction/#ioi","title":"IOI\uff5c\u56fd\u9645\u5965\u6797\u5339\u514b\u4fe1\u606f\u7ade\u8d5b","text":"<p>The International Olympiad in Informatics (IOI) is an annual programming contest for secondary school students.</p> <ul> <li> <p>\u6bcf\u4e2a\u56fd\u5bb6\u90fd\u4f1a\u9001\u4e00\u652f\u961f\u4f0d\u8fdb\u5165\u8fd9\u4e2a\u6bd4\u8d5b\u3002\u81ea\u4ece80\u5e74\u4ee3\u5f00\u59cb\u901a\u5e38\u90fd\u4f1a\u6709300\u53ea\u961f\u4f0d\u3002</p> </li> <li> <p>\u6bd4\u8d5b\u5305\u542b\u4e24\u4e2a\u4e94\u5c0f\u65f6\u7684\u6bd4\u8d5b\u3002\u5728\u8fd9\u4e24\u4e2a\u6bd4\u8d5b\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u9700\u8981\u89e3\u51b33\u4e2a\u4e0d\u540c\u96be\u5ea6\u7684\u7b97\u6cd5\u3002\u6bcf\u4e00\u4e2a\u4efb\u52a1\u90fd\u4f1a\u88ab\u62c6\u5206\u4e3a\u591a\u4e2a\u5b50\u4efb\u52a1\uff0c\u6bcf\u4e2a\u5b50\u4efb\u52a1\u90fd\u88ab\u8d4b\u4e88\u4e86\u4e00\u4e2a\u5206\u6570\u3002\u5373\u4f7f\u53c2\u8d5b\u961f\u5458\u88ab\u5206\u4e3a\u591a\u4e2a\u961f\u4f0d\uff0c\u4f46\u662f\u4ed6\u4eec\u8fd8\u662f\u5404\u81ea\u4e3a\u6218\u3002</p> </li> <li> <p>\u51fa\u73b0\u5728IOI\u4e2d\u7684\u8003\u9898\u662f\u4eceIOI\u5927\u7eb2\u4e2d\u6765\u7684</p> </li> <li>IOI\u7684\u53c2\u8d5b\u8005\u90fd\u662f\u4ece\u56fd\u5bb6\u7eac\u5ea6\u7684\u6bd4\u8d5b\u7b5b\u9009\u7684\u8fc7\u6765\u7684\u3002\u5728IOI\u4e4b\u524d\u8fd8\u6709\u533a\u57df\u6027\u7684\u6bd4\u8d5b\u5fc5\u5165BOI\u3001CEOI\u3001APIO\u3002</li> <li>\u6709\u4e00\u4e9b\u56fd\u5bb6\u4f1a\u4e3aIOI\u9009\u624b\u7ec4\u7ec7\u5728\u7ebf\u7684\u7ec3\u4e60\u8d5b\uff0c\u5fc5\u5165Croatian Open Competition in Informatics\u3001USA computing Olympiad\u7b49</li> </ul>"},{"location":"Algorithm/notes/part-one/01-introduction/#icpc","title":"ICPC\uff5c\u56fd\u9645\u9ad8\u6821\u7f16\u7a0b\u6bd4\u8d5b","text":"<ul> <li>The International Collegiate Programming Contest (ICPC)</li> <li>\u4e13\u95e8\u4e3a\u5b66\u6821\u5f00\u8bbe\u7684\uff0c\u6bcf\u652f\u961f\u4f0d\u5305\u542b\u4e09\u540d\u9009\u624b\uff0c\u4e0d\u50cfIOI\uff0c\u4ed6\u4eec\u4e00\u8d77\u89e3\u51b3\u95ee\u9898\uff0c\u6bcf\u652f\u961f\u4f0d\u53ea\u6709\u4e00\u53f0\u7535\u8111</li> <li>ICPC\u5305\u542b\u591a\u4e2a\u9636\u6bb5\uff0c\u6700\u7ec8\u6700\u4f18\u79c0\u7684\u961f\u4f0d\u5c06\u88ab\u9080\u8bf7\u8fdb\u5165\u4e16\u754c\u51b3\u8d5b\u3002\u5c3d\u7ba1\u53c2\u8d5b\u7684\u9009\u624b\u4e0d\u8ba1\u5176\u6570\uff0c\u4f46\u662f\u603b\u7684\u51b3\u8d5b\u8d44\u683c\u5c31\u90a3\u4e48\u51e0\u4e2a\uff0c\u6240\u4ee5\u5728\u67d0\u4e9b\u56fd\u5bb6\u8fdb\u5165\u51b3\u8d5b\u5c31\u5df2\u7ecf\u8bf4\u660e\u5f88\u4e86\u4e0d\u8d77\u4e86\u3002</li> <li>\u5728\u6bcf\u4e2aICPC\u6bd4\u8d5b\u4e2d\uff0c\u53c2\u8d5b\u961f\u4f0d\u6709\u4e94\u4e2a\u5c0f\u65f6\u65f6\u95f4\u53bb\u89e3\u51b3\u5341\u9053\u7b97\u6cd5\u9898\u76ee\u3002\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\u4ec5\u5728\u5b83\u9ad8\u6548\u7684\u901a\u8fc7\u6240\u6709\u7684case\u4e4b\u540e\u624d\u7b97\u63a5\u53d7\u3002\u5728\u6bd4\u8d5b\u671f\u95f4\uff0c\u7ade\u4e89\u8005\u4eec\u53ef\u4ee5\u67e5\u770b\u4ed6\u4eec\u7684\u961f\u4f0d\u7684\u7ed3\u679c\uff0c\u4f46\u662f\u5728\u6700\u540e\u4e00\u4e2a\u5c0f\u65f6\uff0c\u79ef\u5206\u699c\u4f1a\u51bb\u7ed3\u5e76\u4e14\u770b\u4e0d\u5230\u6700\u540e\u4e00\u4e2a\u63d0\u4ea4\u7684\u7ed3\u679c\u3002</li> <li>\u51fa\u73b0\u5728ICPC\u4e2d\u7684\u5185\u5bb9\u8ddfIOI\u76f8\u6bd4\u6ca1\u6709\u7279\u522b\u7684\u660e\u786e\u3002\u5728\u6240\u6709\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u660e\u786e\u7684\u662f\u5728ICPC\u4e2d\u66f4\u591a\u7684\u77e5\u8bc6\u5c24\u5176\u662f\u6570\u5b66\u77e5\u8bc6\u662f\u7279\u522b\u9700\u8981\u7684\u3002</li> </ul>"},{"location":"Algorithm/notes/part-one/01-introduction/#online-contests","title":"Online Contests\uff5c\u5728\u7ebf\u6bd4\u8d5b","text":"<ul> <li>\u73b0\u5728\u6709\u8bb8\u591a\u5728\u7ebf\u7684\u6bd4\u8d5b\uff0c\u516c\u5f00\u7ed9\u6bcf\u4e2a\u4eba\u3002\u76ee\u524d\u4e3a\u6b62\u6700\u6d3b\u8dc3\u7684\u6bd4\u8d5b\u662fCodeforces\uff0c\u5b83\u6bcf\u5468\u90fd\u4f1a\u4e3e\u529e\u4e00\u4e2a\u5468\u8d5b\u3002\u5728cf\u4e2d\uff0c\u53c2\u8d5b\u8005\u88ab\u5206\u4e3a\u4e24\u53ea\u5206\u652f\uff1a\u521d\u5b66\u8005\u5728Div2\u4e2d\uff0c\u9ad8\u624b\u5728Div1\u4e2d\u3002\u5176\u4ed6\u5728\u7ebf\u7f51\u7ad9\u5305\u62ecAtCoder\uff0cCs Academy\uff0chackerRank\uff0cTopcoder\u3002</li> <li>\u5176\u4ed6\u516c\u53f8\u4e5f\u4f1a\u7ec4\u7ec7\u4e00\u4e9b\u5728\u7ebf\u6bd4\u8d5b\uff1aFacebook Hacker Cup\uff0cGoogle Code Jam and Yandex\u3002\u8fd9\u4e9b\u516c\u53f8\u7ecf\u5e38\u4f7f\u7528\u8fd9\u4e9b\u6bd4\u8d5b\u6765\u505a\u62db\u8058\uff1a\u6bd4\u8d5b\u6392\u540d\u9ad8\u5c55\u793a\u4e86\u67d0\u4eba\u7684\u80fd\u529b\u5982\u4f55\u3002</li> <li>\u76ee\u524d\u8fd8\u6709\u5176\u4ed6\u7684\u4e13\u95e8\u505a\u7b97\u6cd5\u7684\u516c\u53f8\uff1a<ul> <li>LeetCode\uff1a\u5f00\u59cb\u53cc\u5468\u8d5b\u3001\u5468\u8d5b\u3001\u6bcf\u65e5\u4e00\u9898\u3001\u5b66\u4e60\u8d44\u6e90\u7b49\u3002</li> <li>Acwing\uff1a\u56fd\u5185\u7684\u4e00\u5bb6\u7b97\u6cd5\u516c\u53f8\uff0c\u4e5f\u6709\u53cc\u5468\u8d5b\u3001\u5468\u8d5b\uff0c\u4f1a\u5356\u7b97\u6cd5\u8bfe\u7b49</li> </ul> </li> </ul>"},{"location":"Algorithm/notes/part-one/02-time-complexity/","title":"Time Complexity\uff5c\u65f6\u95f4\u590d\u6742\u5ea6","text":""},{"location":"Algorithm/notes/part-one/02-time-complexity/#calculation-rules","title":"Calculation Rules\uff5c\u8ba1\u7b97\u89c4\u5219","text":"<p>The time complexity of an algorithm is denoted O(\u00b7\u00b7\u00b7) where the three dots represent some function.Usually, the variable n denotes the input size. For example, if the input is an array of numbers, n will be the size of the array, and if the input is a string, n will be the length of the string.</p>"},{"location":"Algorithm/notes/part-one/02-time-complexity/#loops","title":"Loops\uff5c\u5faa\u73af","text":"<p>If there are k nested loops, the time complexity is O(n<sup>k</sup>).</p> <p>O(n):</p> <pre><code>for (int i = 1; i &lt;= n; i++) {\n    // code\n}\n</code></pre> <p>O(n<sup>2</sup>):</p> <pre><code> for (int i = 1; i &lt;= n; i++) {\n    for (int j = 1; j &lt;= n; j++) {\n        // code\n    }\n }\n</code></pre>"},{"location":"Algorithm/notes/part-one/02-time-complexity/#order-of-magnitude","title":"Order Of Magnitude\uff5c\u6570\u91cf\u7ea7","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u8868\u793a\u4e86\u6570\u91cf\u7ea7\uff0c\u4e0d\u80fd\u8868\u660e\u5177\u4f53\u7684\u6267\u884c\u6b21\u6570\u3002\u6240\u4ee5\u5bf9\u4e8e 3n, n + 5 and \u2308n/2\u2309\uff0c\u7684\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662fO(n).</p> <pre><code>for (int i = 1; i &lt;= 3*n; i++) {\n    // code\n}\n\nfor (int i = 1; i &lt;= n + 5; i++) {\n    // code\n}\n\nfor (int i = 1; i &lt;= n; i += 2) {\n    // code\n}\n</code></pre> <p>\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4ecd\u7136\u662fO(n<sup>2</sup>)</p> <pre><code>for (int i = 1; i &lt;= n; i++) {\n    for (int j = i+1; j &lt;= n; j++) {\n    // code\n    } \n}\n</code></pre>"},{"location":"Algorithm/notes/part-one/02-time-complexity/#phases","title":"Phases\uff5c\u4ee3\u7801\u7ec4\u5408","text":"<p>\u5982\u679c\u4e00\u4e2a\u7b97\u6cd5\u5305\u542b\u4e86\u591a\u79cd\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6574\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53d6\u6700\u5927\u7684\u90a3\u4e2a\uff0c\u56e0\u4e3a\u6700\u6162\u7684\u7b97\u6cd5\u7ecf\u5e38\u662f\u4ee3\u7801\u6548\u7387\u7684\u74f6\u9888\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u4e0b\u9762\u662fO(n),O(n<sup>2</sup>)\u548cO(n)\uff0c\u6240\u4ee5\u6574\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n<sup>2</sup>2)</p> <pre><code>for (int i = 1; i &lt;= n; i++) {\n    // code\n}\nfor (int i = 1; i &lt;= n; i++) {\n    for (int j = 1; j &lt;= n; j++) {\n       // code\n    } \n}\nfor (int i = 1; i &lt;= n; i++) {\n    // code\n}\n</code></pre>"},{"location":"Algorithm/notes/part-one/02-time-complexity/#several-variables","title":"Several Variables\uff5c\u591a\u4e2a\u53d8\u91cf","text":"<p>\u5982\u679c\u4e00\u4e2a\u7b97\u6cd5\u4f9d\u8d56\u591a\u4e2a\u53d8\u91cf\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u516c\u5f0f\u5c31\u5bf9\u5e94\u7684\u6709\u51e0\u4e2a\u53d8\u91cf\u3002</p> <p>\u4e3e\u4f8b\uff0c\u4e0b\u9762\u662fO(n*m)\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff1a</p> <pre><code>for (int i = 1; i &lt;= n; i++) {\n    for (int j = 1; j &lt;= m; j++) {\n        // code\n    } \n}\n</code></pre>"},{"location":"Algorithm/notes/part-one/02-time-complexity/#recursion","title":"Recursion\uff5c\u9012\u5f52","text":"<p>\u9012\u5f52\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u53d6\u51b3\u4e8e\u51fd\u6570\u7684\u8c03\u7528\u6b21\u6570\u4ee5\u53ca\u5355\u8bcd\u8c03\u7528\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u6574\u4f53\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u8fd9\u4e9b\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u4e58\u79ef\u3002</p> <p>\u4f8b\u5b50\uff1a</p> <pre><code>void f(int n) {\n        if (n == 1) return;\n        f(n-1);\n}\n</code></pre> <p>\u6574\u4f53\u65b9\u6cd5\u88ab\u8c03\u7528\u4e86n\u6b21\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002</p> <p>\u53e6\u5916\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>void g(int n) {\n        if (n == 1) return;\n        g(n-1);\n        g(n-1);\n}\n</code></pre> function call number of calls g(n) 1 g(n - 1) 2 g(n - 2) 4 ... ... g(1) 2<sup>n-1</sup> <p>\u6240\u4ee5\u6574\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u8fd9\u4e9b\u8c03\u7528\u6c42\u548c\uff1a1+2+4+\u00b7\u00b7\u00b7+2<sup>n\u22121</sup> =2<sup>n</sup>\u22121=O(2<sup>n</sup>).</p>"},{"location":"Algorithm/notes/part-one/02-time-complexity/#complexity-classes","title":"Complexity Classes\uff5c\u590d\u6742\u5ea6\u7c7b","text":"<ul> <li>O(1) constant-time</li> <li>O(logn) logarithmic</li> <li>O(n<sup>0.5</sup>) square root algorithm</li> <li>O(n) linear</li> <li>O(nlogn) </li> <li>O(n<sup>2</sup>) quadratic</li> <li>O(n<sup>3</sup>) cubic</li> <li>O(2<sup>n</sup>)</li> <li>O(n!)</li> </ul> <p>\u5982\u679c\u4e00\u4e2a\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u591a\u662fO(n<sup>k</sup>)\uff0ck\u662f\u5e38\u91cf\uff0c\u90a3\u4e48\u5b83\u662f\u591a\u9879\u5f0f\u3002\u8fd9\u4e2ak\u901a\u5e38\u5f88\u5c0f\uff0c\u6240\u4ee5\u901a\u5e38\u6765\u8bf4\u591a\u9879\u5f0f\u53ef\u4ee5\u610f\u5473\u7740\u8fd9\u4e2a\u7b97\u6cd5\u662f\u9ad8\u6548\u7684\u3002</p> <p>NP-Hard\uff08NP\u96be\u95ee\u9898\uff09\uff1a\u76ee\u524d\u4e3a\u6b62\u95ee\u9898\u7684\u591a\u9879\u5f0f\u89e3\u6cd5\u3002</p>"},{"location":"Algorithm/notes/part-one/02-time-complexity/#estimating-efficiency","title":"Estimating Efficiency\uff5c\u4f30\u7b97\u6548\u7387","text":"<p>\u901a\u8fc7\u63a8\u7b97\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5c31\u53ef\u4ee5\u6765\u68c0\u67e5\u81ea\u5df1\u7684\u89e3\u6cd5\u662f\u5426\u7b26\u5408\u9898\u76ee\u8981\u6c42\u3002\u76ee\u524d\u4e3a\u6b62\u4e00\u4e2a\u6807\u51c6\u662f\uff1a\u8bc4\u4f30\u4f60\u7b97\u6cd5\u7684\u673a\u5668\u4e00\u79d2\u53ef\u4ee5\u6267\u884c1e9\u7684\u6307\u4ee4\u3002</p> <p>\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5982\u679c\u7b97\u6cd5\u8f93\u5165\u662fn=1e5\uff0c\u90a3\u4e48\u4e00\u4e2aO(n<sup>2</sup>)\u5bf9\u5e94\u7684\u5c31\u662f\u6267\u884c1e10\u4e2a\u6307\u4ee4\uff0c\u5927\u698210s\u7684\u65f6\u95f4\u4f1a\u8d85\u8fc7\u9898\u76ee\u9650\u5236\u3002</p> <p>\u901a\u8fc7\u9898\u76ee\u7ed9\u5b9a\u7684\u6570\u636e\u96c6\u5927\u5c0f\u4e5f\u53ef\u4ee5\u6765\u63a8\u65ad\u5e94\u8be5\u7528\u4ec0\u4e48\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p> input size required time complexity n &lt;= 10 O(n!) n &lt;= 20 O(2<sup>n</sup>) n &lt;= 500 O(n<sup>3</sup>) n &lt;= 5000 O(n<sup>2</sup>) n &lt;= 10^6 O(nlogn) or O(n) n is large O(1) or O(logn)"},{"location":"Algorithm/notes/part-one/02-time-complexity/#maximum-subarray-sum","title":"Maximum Subarray Sum\uff5c\u6700\u5927\u5b50\u6570\u7ec4","text":"<p>Given an array of n numbers, our task is to calculate the maximum subar- ray sum, i.e., the largest possible sum of a sequence of consecutive values in the array2. The problem is interesting when there may be negative values in the array. For example, in the array:-1, 2, 4, -3, 5, 2, -5, 2. the subarray[1...5] has the maximum sum 10.</p>"},{"location":"Algorithm/notes/part-one/02-time-complexity/#1on3","title":"\u7b97\u6cd51:O(n<sup>3</sup>)","text":"<pre><code>int best = 0;\nfor (int a = 0; a &lt; n; a++) {\n    for (int b = a; b &lt; n; b++) {\n        int sum = 0;\n        for (int k = a; k &lt;= b; k++) {\n            sum += array[k];\n        }\n        best = max(best,sum);\n    }\n}\ncout &lt;&lt; best &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"Algorithm/notes/part-one/02-time-complexity/#2on2","title":"\u7b97\u6cd52:O(n<sup>2</sup>)","text":"<pre><code>int best = 0;\nfor (int a = 0; a &lt; n; a++) {\n    int sum = 0;\n    for (int b = a; b &lt; n; b++) {\n        sum += array[b];\n        best = max(best,sum);\n    }\n}\ncout &lt;&lt; best &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"Algorithm/notes/part-one/02-time-complexity/#3on","title":"\u7b97\u6cd53:O(n)","text":"<pre><code>int best = 0, sum = 0;\nfor (int k = 0; k &lt; n; k++) {\n    sum = max(array[k],sum+array[k]);\n    best = max(best,sum);\n}\ncout &lt;&lt; best &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"Algorithm/notes/part-one/02-time-complexity/#efficiency-comparison","title":"Efficiency Comparison\uff5c\u6548\u7387\u5bf9\u6bd4","text":"Array size Algo 1 Algo 2 Algo 3 10<sup>2</sup> 0.0s 0.0s 0.0s 10<sup>3</sup> 0.0s 0.0s 0.0s 10<sup>4</sup> &gt;10.0s 0.1s 0.0s 10<sup>5</sup> &gt;10.0s 5.3s 0.0s 10<sup>6</sup> &gt;10.0s &gt;0.0s 0.0s 10<sup>7</sup> &gt;10.0s &gt;0.0s 0.0s"},{"location":"Algorithm/notes/part-one/03-sorting/","title":"03 sorting","text":""},{"location":"Algorithm/notes/part-one/03-sorting/#sorting","title":"Sorting\uff5c\u6392\u5e8f","text":""},{"location":"Algorithm/notes/part-one/04-data-structures/","title":"04 data structures","text":""},{"location":"Algorithm/notes/part-one/04-data-structures/#data-structures","title":"Data Structures\uff5c\u6570\u636e\u7ed3\u6784","text":""},{"location":"Algorithm/notes/part-one/05-complete-search/","title":"05 complete search","text":""},{"location":"Algorithm/notes/part-one/05-complete-search/#complete-search","title":"Complete Search\uff5c\u7a77\u4e3e\u641c\u7d22","text":""},{"location":"Algorithm/notes/part-one/06-greedy-algorithms/","title":"06 greedy algorithms","text":""},{"location":"Algorithm/notes/part-one/06-greedy-algorithms/#greedy-algorithms","title":"Greedy Algorithms\uff5c\u8d2a\u5fc3\u7b97\u6cd5","text":""},{"location":"Algorithm/notes/part-one/07-dynamic-programming/","title":"07 dynamic programming","text":""},{"location":"Algorithm/notes/part-one/07-dynamic-programming/#dynamic-programming","title":"Dynamic Programming\uff5c\u52a8\u6001\u89c4\u5212","text":""},{"location":"Algorithm/notes/part-one/08-amortized-analusis/","title":"08 amortized analusis","text":""},{"location":"Algorithm/notes/part-one/08-amortized-analusis/#amortized-analusis","title":"Amortized Analusis\uff5c\u5e73\u644a\u5206\u6790","text":""},{"location":"Algorithm/notes/part-one/09-range-queries/","title":"09 range queries","text":""},{"location":"Algorithm/notes/part-one/09-range-queries/#range-queries","title":"Range Queries\uff5c\u8303\u56f4\u67e5\u8be2","text":""},{"location":"Algorithm/notes/part-one/10-bit-manipulation/","title":"10 bit manipulation","text":""},{"location":"Algorithm/notes/part-one/10-bit-manipulation/#bit-manipulation","title":"Bit Manipulation\uff5c\u4f4d\u64cd\u4f5c","text":""},{"location":"English/","title":"\u82f1\u8bed\u5b66\u4e60","text":""},{"location":"English/#_2","title":"\u4e3b\u8981\u5185\u5bb9","text":"<ol> <li>\u82f1\u6587\u6587\u7ae0\u7ffb\u8bd1</li> <li>\u53e3\u8bed\u3001\u53e5\u5f0f\u3001\u8bed\u6cd5\u5b66\u4e60\u8bb0\u5f55</li> </ol>"},{"location":"English/#_3","title":"\u76ee\u5f55","text":"<ol> <li>The Coming Game Engine Inflection Point \u00b7 New Design Congress</li> <li>Five mysteries the Standard Model can\u2019t explain | symmetry magazine</li> <li>Rondam Ramblings: A catalog of wealth-creation mechanisms (rongarret.info)</li> </ol>"},{"location":"English/article-trans/1.Dyson-spheres-and-the-quest-to-detect-alien-technosignatures/","title":"1. Dyson spheres and the quest to detect alien technosignatures","text":"<p>\u539f\u6587\uff1aDyson spheres and the quest to detect alien technosignatures - Big Think</p> <p>These theoretical megastructures represent one way an advanced civilization might harvest energy from stars.</p> <ul> <li>theoretical: \u7406\u8bba\u4e0a\u7684\uff1b\u7406\u8bba\u4e0a\u5b58\u5728\u7684\uff1b\u5047\u8bbe\u7684</li> <li>megastructures: \u4f1f\u5927\u5de5\u7a0b\u5de1\u793c\uff1b\u4f1f\u5927\u5de5\u7a0b\u5de1\u793c\u7cfb\u5217\uff1b\u5de8\u578b\u7ed3\u6784\u4e2d\u5fc3</li> <li>Harvest: \u6536\u83b7\uff1b\u6536\u5272</li> </ul>"},{"location":"English/article-trans/1.Dyson-spheres-and-the-quest-to-detect-alien-technosignatures/#key-takeaways","title":"Key Takeaways","text":"<p>The concept of a Dyson sphere, envisioned by physicist Freeman Dyson, addresses how advanced civilizations might harness the immense energy of their stars. </p> <ul> <li>The concept of sth: \u67d0\u4e1c\u897f\u7684\u6982\u5ff5</li> <li>envisioned: \u60f3\u8c61</li> <li>physicist\uff1a\u79d1\u5b66\u5bb6</li> <li>addresses\uff1a\u5f3a\u8c03</li> <li>advanced civilizations\uff1a\u5148\u8fdb\u6587\u660e</li> <li>harness\uff1a\u9a6c\u5177\u3001\u63a7\u5236</li> <li>immense\uff1a\u65e0\u7a77\u7684\u3001\u65e0\u9650\u7684</li> </ul> <p>A Dyson sphere, theoretically a vast shell enclosing a star, could capture all its energy, but practical considerations have led to the concept of a \"Dyson swarm\" of orbiting energy-collecting devices as a more feasible alternative. </p> <ul> <li>theoretically: \u7406\u8bba\u6765\u8bf4</li> <li>enclosing\uff1a\u5c01\u95ed</li> <li>practical considerations\uff1a\u5b9e\u9645\u7684\u8003\u8651</li> <li>swarm\uff1a\u8702\u7fa4\u3001\u5bc6\u96c6</li> <li>orbiting\uff1a\u76d8\u65cb\u73af\u7ed5</li> <li>feasible alternative\uff1a\u53ef\u884c\u7684\u4ee3\u66ff\u65b9\u6848</li> </ul> <p>These megastructures, theoretically detectable through their infrared emissions, have been a central theme in SETI research for over 60 years, representing a potential hallmark of advanced technological civilizations and a key target in the ongoing quest to find extraterrestrial life.</p> <ul> <li>infrared emissions\uff1a\u7ea2\u5916\u8f90\u5c04</li> <li>hallmark\uff1a\u6807\u8bb0</li> <li>the ongoing quest\uff1a\u6b63\u5728\u8fdb\u884c\u7684\u63a2\u7d22</li> <li>extraterrestrial life\uff1a\u5916\u661f\u751f\u547d</li> </ul>"},{"location":"English/article-trans/1.Dyson-spheres-and-the-quest-to-detect-alien-technosignatures/#body","title":"Body","text":"<p>What would you do if you were in charge of an immensely powerful technological civilization? This might sound like a dorm-room, too-many-beers kind of question, but it lies at the heart of the search for intelligent life in the Universe. After all, if you are looking for alien technological civilizations, it would help to know what you might be looking for.</p> <ul> <li>If u were sth: \u5047\u8bbe\u4f60\u662f\u3002\u3002</li> <li>dorm-room\uff1a\u5bdd\u5ba4</li> <li>too-many-beers\uff1a\u559d\u592a\u591a\u5564\u9152</li> </ul> <p>In the early 1960s, when people were first starting to think seriously about the possibilities for advanced civilizations in the galaxy, physicist Freeman Dyson asked exactly this kind of question. How, he inquired, would a truly technologically advanced civilization harvest energy? It was the right focus for questions about other civilizations because, while we can\u2019t say much about alien culture or politics, any technologically advanced species would require energy \u2014 and likely a lot of it. In this way, Dyson recognized that every civilization that\u2019s climbing up the ladder of technological capacity will easily recognize the big, honking energy source sitting right there at the center of their solar systems: stars. </p> <ul> <li>culture or politics\uff1a\u5b97\u6559\u6587\u5316</li> <li>species\uff1a\u79cd\u65cf</li> <li>honking\uff1a\u543c\u53eb</li> <li>solar system\uff1a\u592a\u9633\u7cfb</li> </ul> <p>A typical star produces about 100 million billion billion watts of power. That\u2019s a million times more power produced every second than all the power plants on Earth produce in one year. Dyson imagined that it would be natural for a truly advanced civilization to harvest all this power from their star. This was the birth of the \u201cDyson sphere,\u201d one of the most enduring ideas in the Search for Extraterrestrial Intelligence (I\u2019ll note that some people still use the term SETI, but as I explain in my new book, these days the field is also known as technosignatures, which refers to any measurable evidence of technology use).</p> <p>Watts\uff1a\u74e6\u7279\uff08\u590d\u6570\uff09</p> <p>million\uff1a\u767e\u4e07</p> <p>billion\uff1a\u5343\u4e07</p> <p>measurable\uff1a\u53ef\u6d4b\u91cf\u7684</p>"},{"location":"English/article-trans/1.Dyson-spheres-and-the-quest-to-detect-alien-technosignatures/#what-is-a-dyson-sphere","title":"What is a Dyson sphere?","text":"<p>Think of a vast shell, like a hollow golf ball, that\u2019s the size of Earth\u2019s orbit, surrounding and entirely enclosing a star. Covering the inside of the sphere would be some form of light-collecting technology. In this way, it\u2019s theoretically possible that all of the star\u2019s light could be harvested for energy. Besides energy harvesting, a Dyson sphere could serve other purposes, too. With a surface area of more than a billion Earths, a civilization might use a fraction of their Dyson sphere for living space, too. There\u2019s a lot of real estate in there, after all. </p> <ul> <li>fraction\uff1a\u7ec4\u6210\u3001\u788e\u7247</li> <li>living space\uff1a\u751f\u6d3b\u7a7a\u95f4</li> <li>estate\uff1a\u623f\u5b50\u3001\u623f\u5730\u4ea7</li> </ul> <p>Is it physically possible to build a Dyson sphere? Despite being such an audacious idea, Dyson worked out the basic requirements for building such a vast machine. Over the years, other researchers have also dedicated time to working out the details associated with building and operating this archetype of an alien megastructure. They found that for a shell one mile thick with a radius the size of Earth\u2019s orbit, you would need to grind up all the mass held in all the Solar System\u2019s planets. All that mass would have to be processed and used for fabricating the Dyson sphere\u2019s components. So, a typical solar system has the material needed to get the job done even if it would require technology that seems god-like to us.</p> <ul> <li>audacious\uff1a\u9c81\u83bd\u7684</li> <li>Over the years\uff1a\u8fd9\u4e9b\u5e74\u6765</li> <li>grind up\uff1a\u78e8\u788e\u3001\u78be\u788e</li> <li>fabricate\uff1a\u6784\u5efa\u3001\u7ec4\u6210</li> <li>god-like\uff1a\u4e0a\u5e1d\u4e00\u6837</li> <li>get the job done\uff1a\u8ba9\u8fd9\u4efd\u5de5\u4f5c\u5b8c\u6210</li> </ul>"},{"location":"English/article-trans/1.Dyson-spheres-and-the-quest-to-detect-alien-technosignatures/#dyson-swarms","title":"Dyson swarms","text":"<p>One important point that even Dyson recognized, but which has been subsequently emphasized by astrophysicists like Jason Wright, is that Dyson spheres would not be spheres. An actual rigid sphere would be unstable in many ways, being prone to crash against the Sun or warp and bend itself apart. A better bet is a \u201cDyson swarm\u201d of vast and freely orbiting machines, each of which collects a subset of the star\u2019s power. With enough swarm members, you\u2019d be able to capture a significant fraction of the stellar energy.</p> <ul> <li>subsequently\uff1a\u968f\u540e\u3001\u7d27\u63a5\u7740</li> <li>astrophysicists\uff1a\u5929\u4f53\u7269\u7406\u5b66\u5bb6</li> <li>rigid\uff1a\u4e25\u683c\u7684\u3001\u6b7b\u677f\u7684</li> <li>prone\uff1a\u5df2\u4e8e\u906d\u53d7\u7684</li> <li>stellar\uff1a\u6052\u661f\u3001\u660e\u661f</li> </ul> <p>The last and maybe most important point about Dyson spheres and swarms is that they should be observable! The second law of thermodynamics tells us you can\u2019t harvest energy and put it to use without generating \u201cwaste\u201d heat. This means Dyson spheres would glow in the infrared, making them an excellent target for technosignature searches. In my recent and very fun conversation with Sean Carrol about the frontiers of astrobiology and technosignature science, he raised the interesting point that maybe an advanced civilization just nests a series of Dyson spheres around a star to capture the radiation emitted from the heat all the way down to the cosmic microwave. It\u2019s a cool idea, though it appears that the return on investment after the first sphere drops so quickly that it\u2019d probably not be worth it.</p> <ul> <li>observable\uff1a\u53ef\u89c2\u6d4b\u7684</li> <li>The second law of thermodynamics\uff1a\u70ed\u52a8\u529b\u5b66\u7b2c\u4e8c\u5b9a\u5f8b</li> <li>technosignature\uff1a</li> <li>astrobiology\uff1a\u5929\u4f53\u751f\u7269\u5b66</li> <li>cosmic microwave\uff1a\u5b87\u5b99\u5fae\u6ce2</li> </ul> <p>So, if you oversaw an immensely powerful technological civilization, would you build a Dyson sphere? If your answer is yes, then you are in good company: Dyson spheres (or swarms) have been a staple of SETI for more than 60 years for good reason. They seem likely, and maybe even universal. But is that true? There\u2019s no way to know except to go looking for them.</p> <ul> <li>oversaw\uff1a\u76d1\u7763\u3001\u76d1\u89c6</li> <li>staple\uff1a\u8ba2\u4e66\u9489</li> </ul>"},{"location":"Java/","title":"Java\u8bed\u8a00\u76f8\u5173\u5b66\u4e60","text":""},{"location":"Java/#_1","title":"\u672c\u7ae0\u5185\u5bb9","text":"<ol> <li>Java\u8bed\u8a00\u57fa\u7840</li> <li>Java\u9ad8\u7ea7\u8bed\u6cd5</li> <li>Java\u7248\u672c\u7279\u6027</li> <li>JVM</li> <li>Spring</li> <li>Spring-Boot 3.0+</li> <li>Mybatis</li> <li>Maven</li> <li>Graddle</li> </ol>"},{"location":"Java/java-core/java-core-basic/","title":"\u4e00\u3001\u5f00\u53d1\u73af\u5883\u51c6\u5907","text":""},{"location":"Java/java-core/java-core-basic/#_2","title":"\u4e0b\u8f7d","text":"<p>\u8fdb\u5165 JDK \u5b98\u65b9\u4e0b\u8f7d\u5730\u5740 (opens new window)\uff0c\u6839\u636e\u81ea\u5df1\u7684\u73af\u5883\u9009\u62e9\u4e0b\u8f7d\u6240\u9700\u7248\u672c\u3002</p>"},{"location":"Java/java-core/java-core-basic/#_3","title":"\u5b89\u88c5","text":"<p>windows \u73af\u5883\u7684 jdk \u5305\u662f exe \u5b89\u88c5\u6587\u4ef6\uff0c\u542f\u52a8\u540e\u6839\u636e\u5b89\u88c5\u5411\u5bfc\u5b89\u88c5\u5373\u53ef\u3002</p> <p>Linux \u73af\u5883\u7684 jdk \u5305\uff0c\u89e3\u538b\u5230\u672c\u5730\u5373\u53ef\u3002</p> <p>Linux\u591a\u7248\u672cJava\u5305\u7ba1\u7406\uff1aSDKMAN</p> <p>Win\u591a\u7248\u672c\u5de5\u5177\uff1a\u5982\u4f55\u5728Windows\u4e2d\u5feb\u901f\u5207\u6362\u4e0d\u540c\u7684Java\u7248\u672c - Jaxu - \u535a\u5ba2\u56ed (cnblogs.com)</p>"},{"location":"Java/java-core/java-core-basic/#_4","title":"\u73af\u5883\u53d8\u91cf","text":""},{"location":"Java/java-core/java-core-basic/#windows","title":"Windows","text":"<p>\u8ba1\u7b97\u673a &gt; \u5c5e\u6027 &gt; \u9ad8\u7ea7\u7cfb\u7edf\u8bbe\u7f6e &gt; \u73af\u5883\u53d8\u91cf</p> <p>\u6dfb\u52a0\u4ee5\u4e0b\u73af\u5883\u53d8\u91cf\uff1a</p> <p><code>JAVA_HOME</code>\uff1a<code>C:\\Program Files (x86)\\Java\\jdk1.8.0_91</code> \uff08\u6839\u636e\u81ea\u5df1\u7684\u5b9e\u9645\u8def\u5f84\u914d\u7f6e\uff09</p> <p><code>CLASSPATH</code>\uff1a<code>.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;</code> \uff08\u6ce8\u610f\u524d\u9762\u6709\u4e2a\".\"\uff09</p> <pre><code>Path`\uff1a`%JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin;\n</code></pre>"},{"location":"Java/java-core/java-core-basic/#linux","title":"Linux","text":"<p>\u6267\u884c <code>vi /etc/profile</code> \uff0c\u7f16\u8f91\u73af\u5883\u53d8\u91cf\u6587\u4ef6</p> <p>\u6dfb\u52a0\u4e24\u884c\uff1a</p> <pre><code>export JAVA_HOME=path/to/java\nexport PATH=JAVA_HOME/bin:JAVA_HOME/jre/bin:\n</code></pre> <p>\u6267\u884c <code>source /etc/profile</code> \uff0c\u7acb\u5373\u751f\u6548\u3002</p>"},{"location":"Java/java-core/java-core-basic/#_5","title":"\u6d4b\u8bd5\u5b89\u88c5\u6210\u529f\u6d4b\u8bd5\u5b89\u88c5\u6210\u529f","text":"<p>\u6267\u884c\u547d\u4ee4 <code>java -version</code> \uff0c\u5982\u679c\u5b89\u88c5\u6210\u529f\uff0c\u4f1a\u6253\u5370\u5f53\u524d java \u7684\u7248\u672c\u4fe1\u606f\u3002</p>"},{"location":"Java/java-core/java-core-basic/#_6","title":"\u5f00\u53d1\u5de5\u5177","text":"<p>\u5de5\u6b32\u5584\u5176\u4e8b\uff0c\u5fc5\u5148\u5229\u5176\u5668\u3002\u7f16\u5199 Java \u7a0b\u5e8f\uff0c\u5f53\u7136\u6709\u5fc5\u8981\u9009\u62e9\u4e00\u4e2a\u5408\u9002\u7684 IDE\u3002</p> <p>IDE\uff08Integrated Development Environment\uff0c\u5373\u96c6\u6210\u5f00\u53d1\u73af\u5883\uff09\u662f\u7528\u4e8e\u63d0\u4f9b\u7a0b\u5e8f\u5f00\u53d1\u73af\u5883\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u4e00\u822c\u5305\u62ec\u4ee3\u7801\u7f16\u8f91\u5668\u3001\u7f16\u8bd1\u5668\u3001\u8c03\u8bd5\u5668\u548c\u56fe\u5f62\u7528\u6237\u754c\u9762\u7b49\u5de5\u5177\u3002</p> <p>\u5e38\u89c1\u7684 Java IDE \u5982\u4e0b\uff1a</p> <ul> <li>Eclipse - \u4e00\u4e2a\u5f00\u653e\u6e90\u4ee3\u7801\u7684\u3001\u57fa\u4e8e Java \u7684\u53ef\u6269\u5c55\u5f00\u53d1\u5e73\u53f0\u3002</li> <li>NetBeans - \u5f00\u653e\u6e90\u7801\u7684 Java \u96c6\u6210\u5f00\u53d1\u73af\u5883\uff0c\u9002\u7528\u4e8e\u5404\u79cd\u5ba2\u6237\u673a\u548c Web \u5e94\u7528\u3002</li> <li>IntelliJ IDEA - \u5728\u4ee3\u7801\u81ea\u52a8\u63d0\u793a\u3001\u4ee3\u7801\u5206\u6790\u7b49\u65b9\u9762\u7684\u5177\u6709\u5f88\u597d\u7684\u529f\u80fd\u3002</li> <li>MyEclipse - \u7531 Genuitec \u516c\u53f8\u5f00\u53d1\u7684\u4e00\u6b3e\u5546\u4e1a\u5316\u8f6f\u4ef6\uff0c\u662f\u5e94\u7528\u6bd4\u8f83\u5e7f\u6cdb\u7684 Java \u5e94\u7528\u7a0b\u5e8f\u96c6\u6210\u5f00\u53d1\u73af\u5883\u3002</li> <li>EditPlus - \u5982\u679c\u6b63\u786e\u914d\u7f6e Java \u7684\u7f16\u8bd1\u5668\u201cJavac\u201d\u4ee5\u53ca\u89e3\u91ca\u5668\u201cJava\u201d\u540e\uff0c\u53ef\u76f4\u63a5\u4f7f\u7528 EditPlus \u7f16\u8bd1\u6267\u884c Java \u7a0b\u5e8f\u3002</li> </ul>"},{"location":"Java/java-core/java-core-basic/#hello-world","title":"\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\uff1aHello World","text":"<p>\u6dfb\u52a0 HelloWorld.java \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a</p> <pre><code>public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}\n</code></pre> <p>\u6267\u884c\u540e\uff0c\u63a7\u5236\u53f0\u8f93\u51fa\uff1a</p> <pre><code>Hello World\n</code></pre>"},{"location":"Java/java-core/java-core-basic/#2","title":"2.\u57fa\u7840\u8bed\u6cd5\u7279\u6027","text":""},{"location":"Java/java-core/java-core-basic/#21","title":"2.1 \u6ce8\u91ca","text":"<pre><code>public class HelloWorld {\n    /*\n     * JavaDoc \u6ce8\u91ca\n     */\n    public static void main(String[] args) {\n        // \u5355\u884c\u6ce8\u91ca\n        /* \u591a\u884c\u6ce8\u91ca\uff1a\n           1. \u6ce8\u610f\u70b9a\n           2. \u6ce8\u610f\u70b9b\n         */\n        System.out.println(\"Hello World\");\n    }\n}\n</code></pre>"},{"location":"Java/java-core/java-core-basic/#22","title":"2.2 \u57fa\u7840\u6570\u636e\u7c7b\u578b","text":""},{"location":"Java/java-core/java-core-basic/#221","title":"2.2.1 \u6570\u636e\u7c7b\u578b","text":"<ul> <li>\u503c\u7c7b\u578b\uff1a</li> <li>\u5f15\u7528\u7c7b\u578b\uff1a</li> <li>\u503c\u7c7b\u578bVS\u5f15\u7528\u7c7b\u578b\uff1a</li> </ul>"},{"location":"Java/java-core/java-core-basic/#222","title":"2.2.2 \u503c\u7c7b\u578b","text":""},{"location":"Java/java-core/java-core-basic/#23","title":"2.3 \u53d8\u91cf","text":""},{"location":"Java/java-core/java-core-basic/#24","title":"2.4 \u6570\u7ec4","text":""},{"location":"Java/java-core/java-core-basic/#25","title":"2.5 \u679a\u4e3e","text":""},{"location":"Java/java-core/java-core-basic/#26","title":"2.6 \u64cd\u4f5c\u7b26","text":""},{"location":"Java/java-core/java-core-basic/#27","title":"2.7 \u65b9\u6cd5","text":""},{"location":"Java/java-core/java-core-basic/#28","title":"2.8 \u63a7\u5236\u8bed\u53e5","text":""},{"location":"Java/java-core/java-core-basic/#29","title":"2.9 \u5f02\u5e38","text":""},{"location":"Java/java-core/java-core-basic/#210","title":"2.10 \u6cdb\u578b","text":""},{"location":"Java/java-core/java-core-basic/#211","title":"2.11 \u53cd\u5c04","text":""},{"location":"Java/java-core/java-core-basic/#212","title":"2.12 \u6ce8\u89e3","text":""},{"location":"Java/java-core/java-core-basic/#213","title":"2.13 \u5e8f\u5217\u5316","text":""},{"location":"Java/java-core/java-core-basic/#java","title":"\u6df1\u5165\u7406\u89e3Java\u57fa\u7840\u6570\u636e\u7c7b\u578b","text":""},{"location":"Java/java-core/java-core-basic/#java_1","title":"Java\u9762\u5411\u5bf9\u8c61","text":""},{"location":"Java/java-core/java-core-basic/#java_2","title":"Java\u65b9\u6cd5\u8be6\u89e3","text":""},{"location":"Java/java-core/java-core-basic/#java_3","title":"Java\u6570\u7ec4\u8be6\u89e3","text":""},{"location":"Java/java-core/java-core-basic/#java_4","title":"Java\u679a\u4e3e\u8be6\u89e3","text":""},{"location":"Java/java-core/java-core-basic/#java_5","title":"Java\u63a7\u5236\u8bed\u53e5","text":""},{"location":"Java/java-core/java-core-basic/#java_6","title":"Java\u5f02\u5e38\u8be6\u89e3","text":""},{"location":"Java/java-core/java-core-basic/#java_7","title":"Java\u6cdb\u578b\u8be6\u89e3","text":""},{"location":"Java/java-core/java-core-basic/#java_8","title":"Java\u53cd\u5c04\u548c\u52a8\u6001\u4ee3\u7406\u8be6\u89e3","text":""},{"location":"Java/java-core/java-core-basic/#java_9","title":"Java\u6ce8\u89e3\u8be6\u89e3","text":""},{"location":"Java/java-core/java-core-basic/#java_10","title":"Java\u5e38\u7528\u5de5\u5177\u7c7b\u8be6\u89e3","text":""},{"location":"Java/java-core/java-core-basic/#java-string","title":"Java String\u7c7b\u578b\u8be6\u89e3","text":""},{"location":"Life/","title":"\u8bb0\u5f55\u751f\u6d3b","text":""},{"location":"Life/#_2","title":"\u4e3b\u8981\u5185\u5bb9","text":"<ol> <li>\u5b66\u4e60\u505a\u996d</li> <li>\u601d\u8003\u611f\u609f</li> <li>\u5e74\u7ec8\u603b\u7ed3</li> <li>\u65c5\u6e38\u5206\u4eab</li> </ol>"},{"location":"Life/cooking/NoodlesMixedWithScallionOil/","title":"\u8471\u6cb9\u62cc\u9762","text":""},{"location":"Life/cooking/NoodlesMixedWithScallionOil/#1","title":"1.\u51c6\u5907\u6750\u6599","text":"<ul> <li>\u5c0f\u8471 2\uffe5</li> <li>\u9762\u6761 1\uffe5</li> <li>\u9e21\u86cb</li> <li>\u9999\u6599</li> </ul>"},{"location":"Life/cooking/NoodlesMixedWithScallionOil/#2","title":"2.\u5236\u4f5c\u8fc7\u7a0b","text":"<ol> <li>\u5c0f\u8471\u6d17\u5e72\u51c0 \u64e6\u5e72\u51c0\u6c34\u5206</li> <li>\u8471\u767d\u548c\u8471\u7eff\u5206\u5f00</li> <li>\u9999\u6599\uff1a\u4e00\u9897\u516b\u89d2\u3001\u4e00\u5c0f\u5757\u6842\u76ae\u30012\u7247\u9999\u53f6</li> <li>\u8c03\u6599\uff1a6\u52fa\u751f\u62bd\u3001\u4e09\u52fa\u8001\u62bd\u30012\u5c0f\u52fa\u767d\u7cd6</li> <li>\u714e\u9e21\u86cb</li> <li>5\u6210\u6cb9\u4e0b\u8471\u767d\u548c\u9999\u6599\uff0c\u5168\u7a0b\u6700\u5c0f\u706b\u70b8\u76f4\u91d1\u9ec4</li> <li>\u8471\u767d\u548c\u9999\u6599\u53bb\u9664</li> <li>\u5c0f\u706b\u70b8\u8471\u7eff</li> <li>\u6492\u5165\u5c0f\u867e\u7c73\uff0c\u653e\u5165\u8c03\u6599\uff0c\u6599\u6c41\u5192\u70df\u5173\u706b\uff0c\u5012\u51fa\u667e\u51c9</li> <li>\u9762\u716e\u719f\u8fc7\u6c34</li> </ol>"},{"location":"Life/cooking/NoodlesMixedWithScallionOil/#3","title":"3.\u6210\u679c","text":""},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/","title":"\u5de5\u4f5c\u5feb\u4e00\u5e74\u7684\u5f97\u4e0e\u5931","text":""},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/#1","title":"1.\u4e3a\u4ec0\u4e48\u4f1a\u5199\u8fd9\u7bc7\u6587\u7ae0","text":"<p>\u5199\u8fd9\u7bc7\u6587\u7ae0\u6ca1\u6709\u522b\u7684\u76ee\u7684\uff0c\u603b\u662f\u89c9\u5f97\u5f97\u5199\u70b9\u4ec0\u4e48\uff0c\u6765\u8868\u8fbe\u548c\u8bb0\u5f55\u8fd9\u4e00\u5e74\u7684\u6240\u5f97\u6240\u5931\u3002\u540c\u65f6\u4e5f\u4e3a\u4e86\u6392\u89e3\u65f6\u95f4\uff0c\u627e\u70b9\u6709\u610f\u4e49\u7684\u4e8b\u60c5\u53bb\u505a\u3002\u6700\u540e\u501f\u52a9\u8fd9\u7bc7\u6587\u7ae0\u5e0c\u671b\u5bf9\u672a\u6765\u6709\u6e05\u6670\u7684\u89c4\u5212\u548c\u8ba4\u77e5\u3002</p> <p>-- 2023-06-03 \u4e00\u4e2a\u8ff7\u832b\u65e0\u804a\u7684\u4e0b\u5348\u3002</p> <p>\u501f\u6b64\u6587\u7ae0\uff0c\u8bb0\u5f55\u6211\u8fd9\u4e00\u5e74\u6240\u5f97\u6240\u5931\u3001\u6240\u60f3\u6240\u601d\u3002</p> <p>\uff08\u56e0\u4e3a\u56fe\u5e8a\u5728github\uff0c\u6709\u6253\u4e0d\u5f00\u7684\u60c5\u51b5\uff0c\u8bf7\u6302TiZi\uff09</p> <p>\u7b80\u5355\u505a\u4e00\u4e2a\u81ea\u6211\u4ecb\u7ecd\uff1a</p> <p>1999\u5e74\u51fa\u751f\uff0c\u6bd5\u4e1a\u4e8e\u6210\u90fd\uff0c\u76ee\u524d\u5728\u6210\u90fd\u963f\u91cc\u5df4\u5df4\u672c\u5730\u751f\u6d3b\u5de5\u4f5c\uff0c\u5c0f\u5c0fP5\u7a0b\u5e8f\u5458\u3002</p>"},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/#2","title":"2.\u4e8b\u4e1a\uff1a\u8fdb\u5165\u4e92\u8054\u7f51\u516c\u53f8\u5de5\u4f5c","text":""},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/#21-21","title":"2.1 21\u5e74\u7684\u6691\u671f\u5b9e\u4e60\u7ecf\u5386","text":"<p>\u521a\u4ece\u6210\u90fd\u4e00\u4e2a\u672b\u6d41211\u672c\u79d1\u6bd5\u4e1a\uff0c\u5927\u4e09\u5728\u8003\u7814\u548c\u5de5\u4f5c\u4e4b\u95f4\u6765\u56de\u6a2a\u8df3\uff0c\u6700\u540e\u9009\u62e9\u4e86\u4e00\u6761\u5f53\u65f6\u6700\u9002\u5408\u81ea\u5df1\u7684\u9053\u8def\uff0c\u90a3\u5c31\u662f\u53bb\u5de5\u4f5c\uff0c\u53bb\u627e\u5b9e\u4e60\uff0c\u8fdb\u5165\u793e\u4f1a\u52a0\u6cb9\u5de5\u4f5c\uff0c\u591a\u8d5a\u70b9\u94b1\u3002\u627e\u5b9e\u4e60\u7684\u8def\u4e0a\u4e5f\u6ca1\u6709\u90a3\u4e48\u8f7b\u677e\uff0c\u56e0\u4e3a\u51c6\u5907\u7684\u5f88\u665a\uff0c\u5e78\u597d\u5927\u4e09\u6709\u7740\u65e0\u9650\u7684\u52a8\u529b\u53bb\u5b66\u4e60\uff0c\u4e0d\u65ad\u8bd5\u9519\uff0c\u5728\u9762\u8bd5\u4e2d\u5bf9\u9762\u8bd5\u9898\u4e0d\u65ad\u7684\u719f\u6089\uff0c\u5c31\u7b97\u5982\u6b64\uff0c\u6700\u540e\u4e5f\u53ea\u662f\u627e\u5230\u4e86\u5317\u4eac\u7684<code>\u597d\u672a\u6765</code>\u516c\u53f8\uff0c\u5f88\u611f\u8c22\u80fd\u7ed9\u6211\u4e00\u4e2a\u6691\u671f\u5b9e\u4e60offer\uff0c\u5f88\u6e05\u6670\u7684\u8bb0\u7740200/\u5929\u7684\u5b9e\u4e60\u85aa\u8d44\uff0c\u662fgolang\u5c97\u4f4d\uff0c\u5f53\u65f6\u4e5f\u6ca1\u60f3\u5230\u6700\u540e\u627e\u7684\u786e\u5b9ejava\u5c97\u4f4d\u3002</p> <p>\u5b9e\u4e60\u9762\u8bd5\u7ecf\u9a8c\uff1a</p> <ol> <li>\u7b80\u5386\uff1a\u5bf9\u4e8e\u7b80\u5386\u4e0a\u7684\u5185\u5bb9\uff0c\u81ea\u5df1\u8981\u786e\u8ba4\u90fd\u4f1a\uff0c\u4e0d\u4f1a\u7684\u4e0d\u8981\u5199\uff0c\u4f1a\u88ab\u95ee\u3002</li> <li>\u9879\u76ee\uff1a\u9879\u76ee\u8981\u4e86\u89e3\u96be\u70b9\uff0c\u6ca1\u6709\u96be\u70b9\u53ef\u4ee5\u8bf4\u540e\u7eed\u53ef\u4ee5\u63d0\u5347\u7684\u70b9\u3002</li> <li>\u7b97\u6cd5\uff1a\u591a\u5237LeetCode\uff0c\u5468\u672b\u4e5f\u53ef\u4ee5\u6253lc\u7684\u53cc\u5468\u8d5b\u548c\u5468\u8d5b\u3002\u63a8\u8350c++\u56e0\u4e3a\uff0cstl\u5f88\u65b9\u4fbf\u3002</li> <li>\u5176\u5b83\uff1a\u81ea\u4fe1\uff0c\u51b7\u9759\u3002\u5bf9\u4e8e\u81ea\u5df1\u4e86\u89e3\u7684\uff0c\u8981\u6761\u7406\u6e05\u6670\u7684\u56de\u7b54\u3002\u5bf9\u4e8e\u81ea\u5df1\u4e0d\u4e86\u89e3\u7684\u8981\u52aa\u529b\u601d\u8003\uff0c\u8bf4\u51fa\u81ea\u5df1\u7684\u601d\u8003\uff0c\u9762\u8bd5\u5b98\u57fa\u672c\u4f1a\u5f15\u5bfc\u3002</li> </ol> <p>\u963f\u91cc\u7684\u5b9e\u4e60\u798f\u5229\uff1a</p> <ol> <li>\u57fa\u672c\u85aa\u8d44\uff1a\u672c\u79d1350/\u5929\uff0c\u7814\u7a76\u751f400/\u5929</li> <li>\u623f\u8865\u6bcf\u67082k</li> <li>\u514d\u8d39\u4f53\u68c0</li> <li>\u62a5\u9500\u5f02\u5730\u5c31\u804c\u6765\u56de\u4ea4\u901a\u8d39\u7528</li> <li>\u5165\u804c\u4e03\u5929\u5185\u62a5\u9500\u4f4f\u5bbf\uff0c\u8ba9\u4f60\u627e\u623f\u5b50</li> <li>\u9910\u8865\u3001\u4e5d\u70b9\u4e4b\u540e\u53c810\u5757\u94b1\u591c\u5bb5</li> <li>\u6709\u8f6c\u6b63\u673a\u4f1a</li> </ol>"},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/#22-21","title":"2.2 21\u5e74\u676d\u5dde\u963f\u91cc\u5b9e\u4e60","text":"<p>\u63a5\u7740\u4e0a\u6587\u627e\u5b9e\u4e60\uff0c\u5728\u51c6\u5907\u63a5\u4e86\u597d\u672a\u6765\u7684\u5b9e\u4e60offer\u7684\u65f6\u5019\uff0c\u963f\u91cc\u901a\u77e5\u9762\u8bd5\u90fd\u901a\u8fc7\u4e86\uff0c\u9a6c\u4e0a\u4e5f\u8981\u53d1offer\uff0c\u90a3\u65f6\u5019\u56e0\u4e3a\u8981\u6691\u671f\u5b9e\u4e60\u66ff\u4ee3\uff0c\u9700\u8981\u6750\u6599\uff0c\u9519\u70b9\u5c31\u63a5\u4e86\u597d\u672a\u6765\u7684\u5b9e\u4e60offer\uff0c\u73b0\u5728\u56de\u8fc7\u5934\u6765\u770b\uff0c\u5f53\u65f6\u5e78\u597d\u6ca1\u505a\u9519\u8bef\u51b3\u5b9a\uff0c\u6765\u5230\u676d\u5dde\u963f\u91cc\u672c\u5730\u751f\u6d3b\u5b9e\u4e60\u3002</p> <p>\u8bf4\u8d77\u53bb\u676d\u5dde\uff0c\u60f3\u8d77\u6765\u5f53\u65f6\u5728\u6210\u90fd\u548c\u676d\u5dde\u4e2d\u9009\u62e9\uff0c\u6700\u540e\u9009\u62e9\u4e86\u676d\u5dde\uff0c\u56e0\u4e3a\u77e5\u9053\u676d\u5dde\u662f\u603b\u90e8\uff0c\u7ed3\u679c\u6700\u540e\u4e5f\u6ca1\u53bb\u5230\u963f\u91cc\u603b\u90e8(\u897f\u6eaa\u56ed\u533a)\uff0c\u53bb\u7684\u662f\u8682\u8681\u91d1\u670d\u7684Z\u7a7a\u95f4\uff0c\u697c\u578b\u50cfZ\uff0c\u4e00\u4e2a\u7855\u5927\u7684\u8682\u8681\u96c6\u56e2\u6302\u5728\u697c\u9876\uff0c\u5174\u594b\u7684\u62cd\u4e86\u4e00\u4e0b\u7167\u7247\u3002</p> <p>\u676d\u5dde\u5b9e\u4e60\u7b97\u662f\u5feb\u4e50\u7684\uff0c\u89c1\u5230\u4e86\u5e26\u6211\u7684\u5e08\u5144\uff0c\u4e5f\u662f\u6cb3\u5357\u4eba\uff0c\u73b0\u4ee5\u79bb\u804c\uff0c\u6700\u540e\u4e00\u6b21\u542c\u8bf4\u662f\u5728Zoom\uff0c\u795d\u597d\u3002</p> <p>\u7136\u540e\u5c31\u662f\u5feb\u4e50\u7684\u5b9e\u4e60\u671f\u95f4\uff0c\u90a3\u65f6\u5019\u6211\u4e5f\u6ca1\u60f3\u6211\u6700\u540e\u80fd\u8f6c\u6b63\uff0c\u4e00\u4e2a\u5c0f\u5c0f\u672c\u79d1\uff0c\u5377\u8fc7\u4e86C9\uff0c\u6700\u540e\u62ff\u5230\u4e86\u79cb\u62db\u76f4\u901aoffer\u3002</p> <p>\u8fd9\u4e2a\u8fc7\u7a0b\u6211\u4e0d\u80fd\u5c55\u5f00\u8bf4\u4e86\uff0c\u56e0\u4e3a\u5185\u5bb9\u592a\u591a\u4e86\uff0c\u540e\u7eed\u5982\u679c\u6709\u673a\u4f1a\u6211\u518d\u8be6\u7ec6\u8bf4\u8bf4\u3002</p> <p>\u8865\u4e00\u4e0b\u6691\u671f\u5b9e\u4e60offer\uff0c\u5b9e\u4e60\u5230\u8f6c\u6b63\u7684\u6d41\u7a0b\uff1a</p> <p>\u6625\u62db\u5b98\u7f51\u6295\u9012 -&gt; \u9762\u8bd52-3\u6280\u672f\u9762 -&gt; 1\u9762HR -&gt; \u6700\u540e\u53d1\u653eoffer -&gt; \u5165\u804c -&gt; 2-3\u4e2a\u6708\u5b9e\u4e60 -&gt; \u5728\u79cb\u62db\u5f00\u542f\u4e4b\u524d\u8fdb\u884c\u8f6c\u6b63\u7b54\u8fa9 -&gt; \u901a\u8fc7\u5c31\u76f4\u63a5\u53d1\u653e\u6b63\u5f0foffer -&gt; \u6bd5\u4e1a\u4e4b\u540e\u5373\u53ef\u5165\u804c</p> <p>\u8865\u4e00\u4e0b\u901a\u77e5\u4e66\u53ca\u6700\u540e\u7684\u5408\u7167\uff1a\u6574\u4f53\u6765\u8bf4\u6536\u83b7\u5f88\u591a\uff0c\u4e5f\u5f88\u5feb\u4e50\u3002</p> <p></p> <p></p>"},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/#23-22","title":"2.3 22\u5e74\u6210\u90fd\u963f\u91cc\u5b9e\u4e60","text":"<p>\u5b9e\u4e60\u8f6c\u6b63\u901a\u8fc7\u540e\uff0c\u56de\u5230\u5b66\u6821\u7ee7\u7eed\u5b8c\u6210\u5269\u4e0b\u7684\u672c\u79d1\u5b66\u4e1a\uff0c\u8fd9\u4e2a\u65f6\u95f4\u66f4\u5feb\u4e50\uff0c\u4e0e\u5ba4\u53cb\u6216\u8005\u5176\u5b83\u4eba\u6765\u6bd4\uff0c\u5df2\u7ecf\u5f88\u597d\u4e86\uff0c\u5fd9\u7740\u6bd5\u4e1a\u7684\u4e8b\uff0c\u4e5f\u5fd9\u4e9b\u73ed\u4e0a\u7684\u4e8b\uff08\u73ed\u957f\uff09\uff0c\u5e2e\u52a9\u73ed\u4e0a\u7684\u540c\u5b66\u5b8c\u6210\u5b66\u4e1a\u548c\u987a\u5229\u6bd5\u4e1a\u3002</p> <p>\u5230\u5927\u56db\u7684\u540e\u534a\u6bb5\uff0c\u6211\u89c9\u5f97\u592a\u95f2\u4e86\uff0c\u521a\u597d\u4e3b\u7ba1\u53c8\u8bf4\u6210\u90fd\u8fd9\u8fb9\u8fd8\u80fd\u7ee7\u7eed\u5b9e\u4e60\uff0c\u4e8e\u662f\u5c31\u53c8\u5230\u6210\u90fd\u8fd9\u8fb9\u7ee7\u7eed\u5b9e\u4e60\uff0c\u9047\u5230\u4e00\u4e2a\u8682\u8681\u8fc7\u6765\u7684\u4e3b\u7ba1\uff0c\u5bf9\u6211\u5f88\u597d\u4e5f\u5f88\u91cd\u89c6\uff0c\u5c31\u7b2c\u4e00\u6b21\u4ea7\u751f\u4e86\u7559\u5728\u6210\u90fd\u7684\u60f3\u6cd5\uff0c\u89c9\u5f97\u6210\u90fd\u8fd9\u8fb9\u6c1b\u56f4\u5f88\u597d\uff0c\u867d\u7136\u6838\u5fc3\u6ca1\u6709\u676d\u5dde\u90a3\u8fb9\u597d\uff0c\u4f46\u662f\u6211\u5728\u6210\u90fd\u5b9e\u4e60\u7684\u8fd9\u51e0\u4e2a\u6708\u5f7b\u5e95\u6539\u53d8\u4e86\u6211\u8fd9\u4e9b\uff0c\u6211\u8fc7\u5f88\u5feb\u4e50\uff0c\u800c\u4e14\u5b66\u5230\u4e86\u5f88\u591a\u5f00\u53d1\u76f8\u5173\u7684\uff0c\u5f53\u7136\u8fd9\u90e8\u5206\u5b9e\u4e60\u4e3a\u540e\u9762\u7559\u5728\u8fd9\u91cc\u8bd5\u7528\u671f\uff0c\u8d77\u4e86\u5f88\u5927\u7684\u4f5c\u7528\u3002</p> <p>\u524d\u524d\u540e\u540e\u7b97\u8d77\u6765\u5b9e\u4e60\u4e86\u534a\u5e74\u3002\u522b\u4eba\u5728\u6bd5\u4e1a\u65c5\u884c\uff0c\u4eab\u53d7\u6700\u540e\u7684\u5927\u5b66\u751f\u6d3b\uff0c\u6211\u5728\u5b9e\u4e60\uff0c\u4ee5\u81f3\u4e8e\u6bd5\u4e1a\u4e4b\u540e\u5341\u5206\u7559\u5ff5\u5728\u5b66\u6821\u7684\u65e5\u5b50\u3002\u597d\u5728\u8fd9\u6bb5\u7ecf\u5386\u8ba9\u6211\u540e\u9762\u7684\u5de5\u4f5c\u5f97\u5230\u4e86\u4fdd\u969c\uff0c\u8bd5\u7528\u671f\u4e5f\u8f7b\u677e\u901a\u8fc7\u3002</p>"},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/#24","title":"2.4 \u5de5\u4f5c\u4e00\u5e74\u7684\u601d\u8003","text":"<p>\u6280\u672f\u53ea\u662f\u4e00\u90e8\u5206\uff0c\u505a\u597d\u4e1a\u52a1\u4e5f\u633a\u597d\u7684\uff0c\u505a\u4e1a\u52a1\u5f00\u53d1\u6700\u96be\u7684\u5c31\u662f\u5982\u4f55\u7406\u89e3\u4e1a\u52a1\uff0c\u6280\u672f\u6ca1\u6709\u5f88\u96be\u7684\u90e8\u5206\u3002\u5fd9\u5b8c\u6bcf\u5929\u7684\u5de5\u4f5c\uff0c\u56de\u5230\u5bb6\u4e5f\u5e94\u8be5\u4fdd\u6301\u7ee7\u7eed\u5b66\u4e60\uff0c\u8fd9\u4e00\u70b9\u6211\u53bb\u5e74\u505a\u7684\u4e0d\u597d\u6211\u53cd\u601d\u3002</p> <p>\u4e5f\u5e94\u8be5\u62bd\u51fa\u4e00\u6bb5\u65f6\u95f4\u53bb\u8fd0\u52a8\uff0c\u53bb\u953b\u70bc\uff0c\u62e5\u6709\u5065\u5eb7\u7684\u8eab\u4f53\u624d\u80fd\u505a\u4ee5\u540e\u7684\u4e8b\u3002</p> <p>\u8f6f\u6280\u80fd\u4e5f\u5f88\u91cd\u8981\uff0c\u6700\u96be\u7684\u5c31\u662f\u8ddf\u4eba\u6253\u4ea4\u9053\uff0c\u4eca\u5929\u4f60\u8ba9\u4ed6\u5e2e\u4e00\u4e2a\u5fd9\uff0c\u660e\u5929\u4ed6\u627e\u4f60\u5e2e\u5fd9\uff0c\u4e00\u5b9a\u8981\u5b66\u4f1a\u597d\u597d\u6c9f\u901a\uff0c\u6ee1\u8db3\u4eba\u60c5\u5473\u7684\u540c\u65f6\u4e5f\u8981\u63d0\u9ad8\u6c9f\u901a\u7684\u6548\u7387\uff0c\u5b66\u4f1a\u770b\u4eba\u4e0b\u83dc\u789f\uff0c\u6bd4\u5982\u8ddf\u6280\u672f\u6253\u4ea4\u9053\uff0c\u5c31\u9ad8\u6548\u4e00\u70b9\uff0c\u67e5\u7ebf\u4e0a\u95ee\u9898\uff0c\u76f4\u63a5\u7ed9\u4ed6traceId\uff0c\u8ddfHR\u548c\u4ea7\u54c1\u5c31\u8981\u66f4\u6709\u98ce\u8da3\u548c\u5e7d\u9ed8\u7684\u8bdd\u9898\u6765\u804a\u3002</p>"},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/#3","title":"3.\u7231\u60c5\uff1a\u8c08\u8c08\u7406\u60f3\u7684\u7231\u60c5(\u7231\u60c5\u89c2)","text":"<p>\u5bf9\u4e8e\u7231\u60c5\u6211\u6709\u5f88\u591a\u6545\u4e8b\uff0c\u4f46\u662f\u597d\u4e8e\u9762\u5b50\uff0c\u8003\u8651\u5230\u8fd9\u7bc7\u6587\u7ae0\u4f1a\u88ab\u719f\u4eba\u770b\u5230\uff0c\u6709\u4e9b\u4e8b\u6211\u4e0d\u80fd\u5927\u8c08\u7279\u8c08\u3002</p> <p>\u4e0a\u6587\u63d0\u5230\u4e86\u4eba\u4e0e\u4eba\u4e4b\u95f4\u6253\u4ea4\u9053\u662f\u4e00\u4ef6\u5f88\u96be\u7684\u4e8b\uff0c\u8c08\u670b\u53cb\u6211\u53cd\u800c\u89c9\u5f97\u6ca1\u6709\u90a3\u4e48\u96be\uff0c\u96be\u7684\u662f\u5982\u4f55\u9047\u89c1\uff0c\u4e5f\u5c31\u662f\u770b\u7f18\u5206\u3002</p> <p>\u6709\u60c5\u4eba\u7ec8\u6210\u7737\u5c5e\uff0c\u65e0\u60c5\u81ea\u7136\u8d70\u4e0d\u5230\u6700\u540e\uff0c\u8c08\u604b\u7231\u7684\u8fc7\u7a0b\u5c31\u662f\u4e92\u76f8\u53d8\u597d\u7684\u8fc7\u7a0b\uff0c\u4e92\u76f8\u5438\u5f15\uff0c\u4eba\u751f\u5e94\u8be5\u6d12\u8131\uff0c\u5982\u679c\u6709\u610f\u96be\u5e73\uff0c\u90a3\u5c31\u5c3d\u4eba\u4e8b\uff0c\u542c\u5929\u547d\uff0c\u4e3a\u81ea\u5df1\u7684\u8fc7\u9519\u6f47\u6d12\u4e70\u5355\u3002</p> <p></p>"},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/#4","title":"4.\u751f\u6d3b\uff1a\u4e0d\u60f3\u518d\u8fc7\u7684\u592a\u7cd9\u4e86","text":""},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/#41","title":"4.1 \u751f\u6d3b\u5e94\u8be5\u662f\u5065\u5eb7\u7684","text":"<p>\u5982\u6807\u9898\uff0c\u751f\u6d3b\u4e2d\u81ea\u5df1\u5e94\u8be5\u5b66\u4f1a\u7167\u987e\u81ea\u5df1\uff0c\u8eab\u4f53\u8981\u591a\u591a\u953b\u70bc\uff0c\u8981\u6ce8\u610f\u536b\u751f\uff0c\u5929\u51b7\u52a0\u8863\uff0c\u540c\u65f6\u4e5f\u8981\u53ca\u65f6\u6392\u89e3\u5b64\u72ec\u548c\u4e0d\u597d\u7684\u60c5\u7eea\u3002</p> <ul> <li>\u5065\u8eab\uff1a\u4e00\u4e2a\u5065\u5eb7\u7684\u8eab\u4f53</li> <li>\u53a8\u827a\uff1a\u5b66\u4f1a\u81ea\u5df1\u505a\u996d<ul> <li>\u81ea\u5df1\u505a\u559c\u6b22\u7684</li> <li>\u4e5f\u80fd\u7167\u987e\u5176ta\u4eba</li> </ul> </li> <li>\u6ce8\u91cd\u536b\u751f\uff1a<ul> <li>\u7a7f\u642d\u611f\u89c9</li> <li>\u53ca\u65f6\u6d17\u6fa1</li> <li>\u6253\u626b\u536b\u751f</li> </ul> </li> <li>\u7cbe\u795e\u5065\u5eb7<ul> <li>\u8bfb\u4e66</li> <li>\u770b\u7535\u5f71\u3001\u542c\u6b4c</li> <li>\u5f39\u5409\u4ed6</li> </ul> </li> </ul>"},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/#42","title":"4.2 \u751f\u6d3b\u5e94\u8be5\u662f\u6709\u8ffd\u6c42\u7684","text":"<p>\u8981\u7ed9\u81ea\u5df1\u7684\u751f\u6d3b\u6307\u5b9a\u6807\u51c6\u548c\u8ffd\u6c42\uff0c\u5bf9\u4e8e\u4e00\u4e9b\u4e8b\u60c5\u4e0d\u505a\u7f62\u4e86\uff0c\u505a\u4e86\u5c31\u8981\u505a\u5230\u6781\u81f4\uff0c\u5236\u5b9a\u91cf\u5316\u7684\u76ee\u6807\uff0c\u8fd9\u70b9\u5728\u963f\u91cc\u7684OKR\u673a\u5236\u91cc\u9762\u5c24\u4e3a\u7a81\u51fa\uff0c\u8ffd\u6c42\u7ed3\u679c\uff0c\u8fc7\u7a0b\u53ef\u4ee5\u91cf\u5316\u3002</p> <p>\u5bf9\u4e8e\u6211\u81ea\u5df1\uff0c\u6211\u627f\u8ba4\u6211\u6bd4\u8f83\u61d2\uff0c\u5f88\u591a\u4e8b\u60c5\u505a\u4e86\u4f46\u662f\u6ca1\u6709\u505a\u597d\uff0c\u6ca1\u6709\u575a\u6301\u4e0b\u53bb\uff0c\u6bd4\u5982\u6bcf\u5929\u90fd\u4f1a\u5b89\u6392\u5b66\u4e60\uff0c\u4f46\u662f\u5b66\u4e60\u5185\u5bb9\u6bcf\u5929\u4e00\u6362\uff0c\u60f3\u8d77\u6765\u4e00\u51fa\u662f\u4e00\u51fa\u3002</p> <p>\u6240\u4ee5\u4e0d\u8981\u518d\u5bf9\u81ea\u5df1\u592a\u597d\u4e86\uff0c\u4e0d\u8981\u592a\u5b89\u9038\u4e86\uff0c\u4e45\u4e86\u81ea\u7136\u800c\u7136\u5c31\u51fa\u95ee\u9898\u4e86\u3002</p>"},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/#43","title":"4.3 \u751f\u6d3b\u5e94\u8be5\u662f\u5145\u6ee1\u4eea\u5f0f\u611f\u548c\u6d6a\u6f2b\u611f\u7684","text":"<p>\u60f3\u8bf4\u8fd9\u70b9\uff0c\u662f\u56e0\u4e3a\u5bf9\u5e94\u4e86\u5927\u6807\u9898\u201c\u751f\u6d3b\u8fc7\u7684\u592a\u7cd9\u4e86\u201d\uff0c\u4e0d\u77e5\u9053\u901a\u8fc7\u4e00\u4e9b\u4eea\u5f0f\u548c\u6d6a\u8d39\u4e30\u5bcc\u81ea\u5df1\u7684\u751f\u6d3b\uff0c\u548c\u5185\u5fc3\u4e16\u754c\uff0c\u5f53\u7136\u8fd9\u70b9\u4e5f\u8ddf\u4ece\u5c0f\u5230\u5927\u7684\u73af\u5883\u6709\u5173\uff0c\u4e4b\u524d\u4e00\u76f4\u6ca1\u60f3\u901a\u4eba\u4e3a\u4ec0\u4e48\u8981\u8fc7\u751f\u65e5\uff0c\u4e5f\u662f\u56e0\u4e3a\u4ece\u5c0f\u5230\u5927\u90fd\u4e0d\u8fc7\u751f\u65e5\uff0c\u6240\u4ee5\u8fd9\u70b9\u4eea\u5f0f\u611f\u6ca1\u6709\u5fc5\u8981\uff0c\u53bb\u5e74\u7834\u5929\u8352\u7684\u8fc7\u4e86\u751f\u65e5\uff0c\u4e5f\u4f53\u4f1a\u5230\u4e86\u751f\u65e5\u4e0d\u53ea\u662f\u81ea\u5df1\uff0c\u4e5f\u662f\u548c\u7231\u4f60\u7684\u4eba\u5728\u4e00\u8d77\u7684\u65e5\u5b50\uff0c\u611f\u53d7\u522b\u4eba\u5bf9\u4f60\u7684\u7231\u3002</p> <p>\u751f\u6d3b\u8fc7\u7684\u7cbe\u81f4\u70b9\uff0c\u6bd4\u5982\u53d1\u4e86\u5e74\u7ec8\u5956\uff0c\u81ea\u5df1\u51fa\u53bb\u597d\u597d\u5403\u4e00\u987f\uff0c\u5956\u52b1\u8fd9\u4e00\u5e74\u7684\u52aa\u529b\uff0c\u6b3a\u9a97\u5185\u5fc3\uff0c\u867d\u7136\u542c\u7740\u5f88\u5b64\u72ec\u548c\u53ef\u601c\uff0c\u4f46\u4e5f\u662f\u8ba9\u81ea\u5df1\u80fd\u5f00\u5fc3\u7684\u4e8b\u3002</p> <p>\u8c08\u4e86\u604b\u7231\u6d6a\u6f2b\u611f\u66f4\u91cd\u8981\u4e86\uff0c\u6bcf\u4e2a\u5973\u5b69\u8ddf\u4f60\u4e0d\u662f\u4e3a\u4e86\u53d7\u82e6\u548c\u96be\u8fc7\uff0c\u8d77\u7801\u5979\u503c\u5f97\u5feb\u4e50\uff0c\u540e\u6765\u6211\u624d\u77e5\u9053\uff0c\u94b1\u4e0d\u662f\u503c\u5f97\u5f00\u5fc3\u7684\u4e8b\uff0c\u5728\u4e00\u8d77\u7684\u5feb\u4e50\u65f6\u95f4\u624d\u662f\uff0c\u4ece\u5c0f\u5230\u5927\u90fd\u662f\u90fd\u662f\u88ab\u5f53\u516c\u4e3b\uff0c\u4f60\u4e5f\u5e94\u8be5\u4e00\u6837\u3002</p>"},{"location":"Life/thinking/TheGainsAndLossesOfWorkingForNearlyAYear/#5","title":"5.\u540e\u7eed\u7684\u8ba1\u5212","text":"<p>\u4e4b\u524d\u6574\u7406\u4e86\u4e00\u7248\u540e\u7eed\u7684\u5b66\u4e60\u548c\u8bb0\u5f55</p> <p></p>"},{"location":"Life/travel/yun-nan/","title":"\u82b1\u4e2a\u5468\u672b\u77ed\u6682\u7ed3\u675f\u5f02\u5730\u5427\uff5e","text":"<p>\u6210\u90fd\u5230\u4e91\u5357\u6606\u660e\uff0c\u8fc7\u4e86\u4e00\u4e2a\u653e\u677e\u7684\u5468\u672b\u3002\uff08\u56fe\u7247\u8fc7\u5927\u8b66\u544a\uff09</p> <p>2023.12.08\uff5e2023.12.10</p>"},{"location":"Life/travel/yun-nan/#1","title":"1.\u7fe0\u6e56\u516c\u56ed","text":"<p>\u9002\u5408\u517b\u8001\u3001\u770b\u7ea2\u5634\u6d77\u9e25</p> <p>\u521a\u5230\u516c\u56ed\u5c31\u770b\u5230\u4e00\u7fa4\u8001\u6cd5\u5e08\u5728\u6597\u6cd5\uff1a</p> <p></p> <p>\u201c\u6625\u57ce\u201d\u7684\u5929\u6c14\u52a0\u6301\u4e0b\u7684\u7fe0\u6e56\u516c\u56ed\uff1a</p> <p></p>"},{"location":"Life/travel/yun-nan/#2","title":"2.\u6ec7\u6c60\u53ca\u6d77\u6d2a\u6e7f\u5730\u516c\u56ed","text":"<p>\u770b\u3001\u5582\u6d77\u9e25\u3001\u770b\u6606\u660e\u51ac\u65e5\u666f\u8272\u3001\u67ab\u7ea2\u6797\u3001\u843d\u65e5</p> <p>\u7f8e\u5982\u753b\u7684\u67ab\u53f6\u6797\uff1a\u4e0d\u7f29\u653e\uff0c\u7ed9\u4e2a\u5927\u56fe\u3002\u8fd9\u5f20\u65e0\u654c\u4e86\uff0c\u6211\u76f4\u51fa\u7684\uff0c\u8272\u5f69\u65e0\u654c\u3002</p> <p></p> <p>\u7f8e\u4e3d\u7684\u67ab\u53f6\u6797</p> <p>\u6ec7\u6c60\u8fb9\u4eab\u53d7\u6e38\u5ba2\u6295\u5582\u7684\u6d77\u9e25\uff1a</p> <p> </p> <p> </p>"},{"location":"Life/travel/yun-nan/#3","title":"3.\u6309\u6469\u53ca\u7cbe\u6cb9\u8fc7\u654f","text":"<p>\u4e4b\u524d\u6309\u6469\u4ece\u6765\u6ca1\u6709\u7528\u8fc7\u7cbe\u6cb9\uff0c\u8fd9\u6b21\u7528\u4e8630\u5757\u7684\u7cbe\u6cb9\uff0c\u56de\u6210\u90fd\u4e4b\u540e\u5168\u8eab\u7ea2\u75d2\uff0c\u51cc\u6668\u4e94\u70b9\u6302\u53f7\u53bb\u770b\u533b\u751f\uff0c\u8fd8\u4f11\u4e86\u4e00\u5929\u5047\u671f\uff0c\u5f97\u4e86\u5168\u8eab\u8fc7\u654f\u6027\u5f15\u8d77\u7684\u5bfb\u9ebb\u75b9\uff0c\u4e07\u5e78\u6d88\u7684\u5f88\u5feb\u4e00\u5929\u90fd\u6ca1\u4e8b\u4e86\u3002\u4ee5\u540e\u5438\u53d6\u6559\u8bad\uff0c\u600e\u4e48\u4e5f\u4e0d\u7528\u7cbe\u6cb9\u6309\u6469\u4e86\uff0c\u8840\u6db2\u91cc\u9762\u662f\u4fd7\u8840\u7528\u4e0d\u5f97\u592a\u9ad8\u8d35\u7684\u3002\u8fd9\u4e2a\u7ae0\u8282\u5c31\u65e0\u56fe\u7247\u4e86\u3002</p>"},{"location":"Life/travel/yun-nan/#4","title":"4.\u611f\u609f\u603b\u7ed3","text":"<p>\u6700\u8fd1\u8bf4\u5b9e\u8bdd\u538b\u529b\u5f88\u5927\uff0c\u8eab\u5728\u4e92\u8054\u7f51\u884c\u4e1a\uff0c\u5e94\u8be5\u73cd\u60dc\u81ea\u5df1\u8eab\u4f53\u5065\u5eb7\u7684\u65f6\u5019\uff0c\u591a\u966a\u966a\u5bb6\u4eba\u3001\u7231\u4eba\uff0c\u591a\u653e\u677e\u4e00\u4e0b\u5fc3\u60c5\u522b\u7ef7\u592a\u7d27\u4e86\uff0c\u82b1\u70b9\u65f6\u95f4\u53bb\u770b\u6ca1\u770b\u8fc7\u7684\u98ce\u666f\u3001\u53bb\u5403\u70b9\u6ca1\u5403\u8fc7\u7684\u7f8e\u98df\u3001\u53bb\u611f\u53d7\u6ca1\u611f\u53d7\u7684\u6587\u5316\u3002\u4e0b\u6b21\u4e00\u5b9a\u591a\u62cd\u70b9\u5403\u7684\u597d\u5403\u7684\u3002</p> <p> </p> <p>\u200b    </p>"},{"location":"Plans/day-plan/","title":"Day plan","text":"<ul> <li>\u7b97\u6cd5\u5b66\u4e60</li> <li>\u6bcf\u65e5\u4e00\u9898<ul> <li>lc-cn</li> <li>lc-en</li> </ul> </li> <li>\u7b97\u6cd5\u8d44\u6599</li> <li>\u82f1\u8bed</li> <li>\u9605\u8bfb</li> <li>\u53e3\u8bed\uff1aUdemy\u9ad8\u5206 \u7f8e\u56fd\u82f1\u8bed\u53e3\u8bed\u53d1\u97f3\u8bfe\u7a0b \uff08\u4e2d\u82f1\u5b57\u5e55\uff09_\u54d4\u54e9\u54d4\u54e9_bilibili</li> <li>\u5355\u8bcd</li> <li>\u8bed\u6cd5</li> <li>\u6280\u672f</li> <li>\u4eca\u65e5\u70ed\u699c</li> <li></li> </ul>"},{"location":"Projects/help-gf-with-openAI/","title":"\u3010\u6559\u7a0b\u3011\u4ece0\u52301\u8c03\u7528ChatGPT\u5feb\u901f\u5e2e\u5973\u670b\u53cb\u8d5a\u5916\u5feb","text":"<p>\u672c\u6587\u8bb0\u5f55\u5b66\u4e60openAI\u63a5\u5165\u5b66\u4e60\u8fc7\u7a0b\uff08Python\u7248\uff09\u4ee5\u53ca\u5c0f\u9879\u76ee\u5b9e\u6218\u3002</p>"},{"location":"Projects/help-gf-with-openAI/#1","title":"1.\u80cc\u666f","text":"<p>\u6700\u8fd1npy\u627e\u5230\u4e86\u4e00\u4e2a\u6a21\u578b\u6548\u679c\u8bc4\u4f30\u7684\u4efb\u52a1\uff0c\u4e3b\u8981\u5185\u5bb9\u662f\u4ece\u4e13\u4e1a\u89d2\u5ea6\u51fa\u53d1\u8bc4\u4f30\u4ed6\u4eec\u7684\u6a21\u578b\u7684\u4f18\u5316\u6548\u679c\uff0c\u4e00\u7ec4\u4f18\u5316\u6548\u679c\u8bc4\u4f30\u7531\u4e00\u4e2a\u539f\u59cb\u82f1\u8bed\u53e5\u5b50\uff0c\u4e09\u4e2a\u4ed6\u4eec\u6a21\u578b\u7b80\u5316\u603b\u7ed3\u540e\u7684\u53e5\u5b50\u3002</p> <p>\u8981\u6c42\u4ece\u4ee5\u4e0b\u4e09\u4e2a\u65b9\u9762\u8bc4\u4f30\u4e09\u4e2a\u7b80\u5316\u540e\u7684\u6548\u679c\uff1a</p> <ul> <li>\u7b80\u6d01\u6027\uff1a\u4e0d\u662f\u7b80\u5355\u53e5\u62631\u5206\u3001\u610f\u8bd1\u4e3a\u66f4\u7b80\u5355\u7684\u5c31\u6bd4\u53e6\u5916\u4e24\u53e5\u591a1\u5206\uff1b</li> <li>\u6d41\u7545\u6027\uff1a\u66f2\u89e3\u53e5\u5b50\u4e00\u5904\u62631\u5206\u3001\u6807\u70b9\u7b26\u53f7\u4e0d\u51c6\u786e\u62631\u5206\u3001\u8bed\u6cd5or\u642d\u914d\u4e0d\u5bf9\u62631\u5206\uff1b</li> <li>\u5145\u5206\u6027\uff1a\u6f0f\u8bd1\u4e00\u5904\u62631\u5206</li> </ul> <p>\u4e00\u4e2a\u4f8b\u5b50\uff1a</p> <pre><code>105\u590d\u6742\u53e5\uff1aConvinced that the grounds were haunted, they decided to publish their findings in a book An Adventure (1911), under the pseudonyms of Elizabeth Morison and Frances Lamont.\n\u7b80\u5316\u53e51\uff1aThey believed the grounds were haunted. They decided to publish their findings in a book. They used the names of Elizabeth Morison and Frances Lamont.\n\u7b80\u5316\u53e52\uff1aConvinced that the grounds were haunted, they decided to publish what they found in a book called An Adventure. They used the names Elizabeth Morison and Frances Lamont.\n\u7b80\u5316\u53e53\uff1aConvinced that the grounds were haunted, they decided to publish their findings in a book called An Adventure (1911). They used the names Elizabeth Morison and Frances Lamont.\n\u53e51\u5f97\u5206\uff1a\u6d41\u7545\u6027[]\uff1b\u7b80\u6d01\u6027[]\uff1b\u5145\u5206\u6027[]\n\u53e52\u5f97\u5206\uff1a\u6d41\u7545\u6027[]\uff1b\u7b80\u6d01\u6027[]\uff1b\u5145\u5206\u6027[]\n\u53e53\u5f97\u5206\uff1a\u6d41\u7545\u6027[]\uff1b\u7b80\u6d01\u6027[]\uff1b\u5145\u5206\u6027[]\n</code></pre> <p><code>[]</code>\u4e2d\u5199\u4f60\u7684\u8bc4\u5206\uff0c\u6ee1\u52065\u5206\uff0c\u5171\u53e5\u5b50\u7ec4\u6709380+\u7ec4\uff0c\u5982\u679c\u4eba\u5de5\u8bc4\u4f30\u7684\u8bdd\u8fc7\u4e8e\u9ebb\u70e6\u4e86\uff0c\u5728\u8fd9\u4e2a\u573a\u666f\u4f7f\u7528chatgpt\u6700\u5408\u9002\u4e0d\u8fc7\uff0c\u4e8e\u662f\u5f00\u59cb\u7740\u624b\u5f00\u53d1\u4e00\u4e2a\u5c0f\u9879\u76ee\u6765\u5b9e\u73b0\u5feb\u901f\u7684\u8bc4\u4f30\u3002</p>"},{"location":"Projects/help-gf-with-openAI/#2","title":"2.\u73af\u5883\u51c6\u5907","text":""},{"location":"Projects/help-gf-with-openAI/#21-openai","title":"2.1 OpenAI\u8d26\u53f7\u51c6\u5907","text":"<p>Overview - OpenAI API</p> <p>\u9700\u8981\u51c6\u5907\u4ee5\u4e0b\u8d26\u53f7\uff1a</p> <ul> <li>\u8c37\u6b4c\u8d26\u53f7\uff1aGmail\uff08\u56fd\u5185\u624b\u673a\u53f7\u5373\u53ef\u6ce8\u518c\uff09</li> <li>OpenAI\u8d26\u53f7\uff08\u4f7f\u7528\u8c37\u6b4c\u8d26\u53f7\u5feb\u901f\u767b\u9646\uff09</li> </ul>"},{"location":"Projects/help-gf-with-openAI/#22-openai-keys","title":"2.2 OpenAI-Keys\u51c6\u5907","text":"<p>API Reference - OpenAI API</p> <p>\u7533\u8bf7OpenApi-Keys\u7684\u65f6\u5019\u9700\u8981\u63a5\u5916\u56fd\u624b\u673a\u53f7\u7684\u9a8c\u8bc1\u7801\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u63a5\u7801\u5e73\u53f0\u3002</p> <p>\u4fbf\u5b9c\u63a5\u7801\u5e73\u53f0\uff1a\u56e0\u4e3a\u65b0\u624b\u673a\u53f7\u6709\u989d\u591613\u7f8e\u5143\u514d\u8d39\u989d\u5ea6\uff0c\u7ed1\u5b9a\u8fc7\u7684\u624b\u673a\u53f7\u63a5\u7801\u5e73\u53f0\u53ea\u67095\u7f8e\u91d1\u514d\u8d39\u989d\u5ea6\uff0c\u4e5f\u591f\u7528\u4e86\u3002</p> <ul> <li>onlinesim.io\uff081\u7f8e\u5143\u8d77\u5145\uff0c\u6211\u7528\u7684\u8fd9\u4e2a\uff0c\u63a8\u8350\uff09</li> <li>SMS-Activate(2\u7f8e\u5143\u8d77\u5145)</li> </ul> <p>\u6700\u540e\u81ea\u5df1\u521b\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684API Keys\u5373\u53ef\uff08\u9700\u8981\u81ea\u5df1\u590d\u5236\u5230\u5176\u4ed6\u5730\u65b9\uff0c\u53ea\u5c55\u793a\u4e00\u6b21\uff0c\u53ef\u4ee5\u5220\u9664\u518d\u521b\u63a5\uff09\uff1a</p> <p></p>"},{"location":"Projects/help-gf-with-openAI/#23","title":"2.3 \u5f00\u53d1\u73af\u5883","text":"<p>OpenAPI\u6700\u65b0\u5b98\u65b9\u6587\u6863\uff1aAPI Reference - OpenAI API</p> <p>\u6211\u8fd9\u91cc\u53c2\u7167\u4e86\u8001\u7248\u672c\u7684\u6559\u7a0b\uff0c\u65b0\u8001\u90fd\u53ef\u4ee5\uff0c\u7248\u672c\u5f71\u54cd\u7684\u662fendpoint\uff0cendpoint\u51b3\u5b9a\u4e4b\u5dee\u54ea\u4e9b\u6a21\u578b\u8c03\u7528\u3002\u8fd9\u91cc\u7ed9\u51fa\u6211\u7684\u73af\u5883\u51c6\u5907\u3002</p> <ul> <li>python\u5c31\u4e0d\u8bf4\u4e86</li> <li><code>pip install openai==0.27.0</code>\u53ea\u9700\u8981\u8fd9\u4e2a\u4f9d\u8d56</li> </ul>"},{"location":"Projects/help-gf-with-openAI/#3","title":"3.\u4ee3\u7801\u8be6\u89e3","text":"<p>\u56e0\u4e3a\u672c\u8eab\u4e0d\u662f\u4e13\u4e1a\u5199python\u7684\uff0c\u4ee3\u7801\u6709\u70b9\u77ec\u4f46\u662f\u80fd\u8dd1\u5c31\u884c\u3002</p> <pre><code>from time import sleep\n\nimport openai\nimport json\n\n# \u586b\u4f60\u7684\u79d8\u94a5\nopenai.api_key = \"sk-xxxxxx\"\n# \u4e00\u4e9b\u5143\u6570\u636e\naspects = ['Conciseness', 'Fluency', 'Sufficiency']\nstudents = ['A', 'B', 'C']\n\n\n# \u63d0\u95ee\u4ee3\u7801\ndef chat_gpt(prompt) -&gt; str:\n    # \u4f60\u7684\u95ee\u9898\n\n    # \u8001\u7248\u672c\u8c03\u7528\u5199\u6cd5\uff0c\u4e0d\u652f\u6301\u8c03\u7528gpt-3.5-turbo\n\n    # # \u8c03\u7528 ChatGPT \u63a5\u53e3\n    # model_engine = \"text-davinci-003\"\n    # # model_engine = \"gpt-3.5-turbo\"\n    # completion = openai.Completion.create(\n    #     engine=model_engine,\n    #     prompt=prompt,\n    #     max_tokens=1024,\n    #     n=1,\n    #     stop=None,\n    #     temperature=0.5,\n    # )\n    #\n    # response = completion.choices[0].text\n    # return response\n    # Call the OpenAI API to generate a response\n    response = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[{'role': 'user', 'content': prompt}],\n        max_tokens=1024,\n        n=1,\n        temperature=0.5,\n        top_p=1,\n        frequency_penalty=0.0,\n        presence_penalty=0.6,\n    )\n    # Get the response text from the API response\n    response_text = response['choices'][0]['message']['content']\n\n    # OPENAI\u81ea\u5df1\u505a\u4e86\u6d41\u63a7\uff0c\u5177\u4f53\u770b\u5b98\u7f51\n    sleep(21)\n    return response_text\n\n\nresult_tmplate = f'\u53e51\u5f97\u5206\uff1a\u6d41\u7545\u6027[]\uff1b\u7b80\u6d01\u6027[]\uff1b\u5145\u5206\u6027[]'\n\nno_need = '[]'\n\nif __name__ == '__main__':\n\n    separator = '\uff1a'\n\n    # read file\n    fr = open(\"formatted_sentences_100_250.txt\", \"r\")\n    fo = open(\"formatted_sentences_result_100-250.txt\", \"w+\")\n    sentences = []\n    cnt = 0\n    max_cnt = 400\n    for line in fr:\n        if cnt &gt; max_cnt:\n            break\n        if line.find(separator) == -1 or line.find(no_need) != -1:\n            continue\n        sentence = line.split(separator)[1]\n        sentences.append(sentence)\n        fo.write(line)\n        if len(sentences) == 4:\n            # \u5904\u7406\u7ed3\u679c\n            promt = (\n                f'From now on you are a teacher who is responsible for grading students(\"A\", \"B\", \"C\") on the simplified results of the original sentences you propose out on a scale of 5. '\n                f'From the following three aspects: {aspects[0]}, {aspects[1]}, {aspects[2]}'\n                'Here is a example:'\n                f'original\uff1a{sentence[0]}'\n                f'\"A\":{sentence[1]}'\n                f'\"B\":{sentence[2]}'\n                f'\"C\":{sentence[3]}'\n                f\"Evaluate the score for students(\\\"A\\\", \\\"B\\\", \\\"C\\\") with the above three aspects('{aspects[0]}', '{aspects[1]}', '{aspects[2]}').\"\n                \"Your answer can only and just be returned in pure JSON format that can be serialized into dict format in Python.\"\n            )\n            gpt = chat_gpt(promt).replace('Answer:', '')\n            load = dict(json.loads(gpt))\n            tmp_load = {}\n            flag = False\n            # \u4fee\u6b63\u6570\u636e\uff0c\u53ef\u80fd\u683c\u5f0f\u4e0d\u662f\u60f3\u8981\u7684A\uff1a..\u800c\u662fConciseness\uff1a\u2018A\u2019\n            for key, value in load.items():\n                if len(key) &gt; 1:\n                    flag = True\n                    for k, v in value.items():\n                        if k not in tmp_load.keys():\n                            tmp_load[k] = {}\n                        tmp_load[k][key] = v\n            if flag:\n                load = tmp_load\n            for idx, student in enumerate(students):\n                scores = []\n                rating = load.get(student)\n                for aspect in aspects:\n                    for k, v in rating.items():\n                        if k.lower().count(aspect.lower()) != 0:\n                            scores.append(v)\n                            break\n                result_template = f'\u53e5{idx + 1}\u5f97\u5206\uff1a\u6d41\u7545\u6027[{scores[0]}]\uff1b\u7b80\u6d01\u6027[{scores[1]}]\uff1b\u5145\u5206\u6027[{scores[2]}]\\n'\n                if idx == len(students) - 1:\n                    result_template += '\\n'\n                fo.write(result_template)\n            cnt += 1\n            sentences = []\n            print(f'cur group at = {cnt}')\n            if cnt &gt;= max_cnt:\n                break\n\n    fo.close()\n    fr.close()\n    print(f'done, {cnt} sentences group is processed.')\n</code></pre>"},{"location":"Projects/help-gf-with-openAI/#4","title":"4.\u6548\u679c\u5c55\u793a","text":"<p>\u5927\u6982\u6bcf\u5206\u949f\u8c03\u7528\u4e09\u6b21OPENAI\u63a5\u53e3\uff08\u56e0\u4e3aOPENAI\u505a\u4e86\u6d41\u91cf\u63a7\u5236\uff09\uff0c\u901f\u5ea6\u8fd8\u662f\u6709\u70b9\u6162\uff0c\u540e\u9762\u53c8\u7ed9npy\u521b\u5efa\u4e86\u4e00\u4e2a\u8d26\u53f7\uff0c\u6d41\u63a7\u53ea\u9488\u5bf9\u5355API Key\uff0c\u6240\u4ee5\u62c6\u5206\u6587\u4ef6\u4e4b\u540e\u8dd1\u4e86\u4e24\u4e2a\u8fdb\u7a0b\uff0c\u901f\u5ea6\u51cf\u534a\uff0c380+\u76f8\u5f53\u4e8e\u82b1\u8d39\uff1a<code>380/(3*2)=60min</code>\u3002\u8fd9\u4e2a\u573a\u666f\u9002\u5408\u5f88\u591a\u9700\u8981\u4f4e\u7ea7\u4eba\u529b\u7684\u5730\u65b9\uff0c\u53ef\u4ee5\u501f\u52a9\u514d\u8d39\u989d\u5ea6\u6765\u8d5a\u5916\u5feb\u4e86\u3002</p> <p></p>"},{"location":"Resources/tutorials/","title":"Tutorials","text":"<ol> <li>Introduction to Modern Statistics (2<sup>nd</sup> Ed) (openintro-ims2.netlify.app)</li> <li>Asabeneh/30-Days-Of-Python: 30 days of Python programming challenge is a step-by-step guide to learn the Python programming language in 30 days. This challenge may take more than100 days, follow your own pace. These videos may help too: https://www.youtube.com/channel/UC7PNRuno1rzYPb1xLa4yktw (github.com)</li> <li>rossant/awesome-math: A curated list of awesome mathematics resources (github.com)</li> <li>\u8ba1\u7b97\u673a\u4f53\u7cfb\u7ed3\u6784\u57fa\u7840 (foxsen.github.io)</li> <li>Understanding AWK - Earthly Blog</li> <li>[The container orchestrator landscape LWN.net]</li> <li>Free Linear Algebra textbook, from Jim Hefferon</li> <li>Daring Fireball: One More Thing: The M1 Macs</li> <li>brain of mat kelcey... (matpalm.com)</li> <li>timqian/chinese-independent-blogs: \u4e2d\u6587\u72ec\u7acb\u535a\u5ba2\u5217\u8868 (github.com)</li> <li>Git In The Trenches (cbx33.github.io)</li> <li>Baby\u2019s First Garbage Collector \u2013 journal.stuffwithstuff.com</li> </ol>"},{"location":"Resources/tutorials/#java","title":"Java","text":""},{"location":"Resources/tutorials/#springboot3","title":"SpringBoot3+","text":"<p>1. Getting Started - Master Spring Framework and Spring Boot_\u54d4\u54e9\u54d4\u54e9_bilibili</p> <p>Spring Boot3 \u548c Spring6 \u5b9e\u6218-Master Spring Boot 3 &amp; Spring Framework 6 With Java_\u54d4\u54e9\u54d4\u54e9_bilibili</p> <p>005 Using the Akka libraries_\u54d4\u54e9\u54d4\u54e9_bilibili</p>"},{"location":"Resources/tutorials/#_1","title":"\u524d\u7aef","text":""},{"location":"Resources/tutorials/#vue","title":"Vue","text":"<p>1. Course Roadmap and Projects_\u54d4\u54e9\u54d4\u54e9_bilibili</p> <p>1. Welcome to the Course!_\u54d4\u54e9\u54d4\u54e9_bilibili</p> <p>1. Introduction_\u54d4\u54e9\u54d4\u54e9_bilibili</p>"},{"location":"Resources/tutorials/#_2","title":"\u865a\u62df\u5316","text":"<p>P1\u3010Udemy\u4ed8\u8d39\u8bfe\u7a0b\u3011 Docker and Kubernetes: The Complete Guide \u2192\u5b8c\u6574\u5f00\u53d1\u6307\u5357\uff08\u4e2d\u82f1\u6587\u5b57\u5e55\uff09_\u54d4\u54e9\u54d4\u54e9_bilibili</p>"},{"location":"Resources/tutorials/#python","title":"Python","text":"<p>[udemy] Python for Data Science and Machine Learning Bootcamp_\u54d4\u54e9\u54d4\u54e9_bilibili</p>"},{"location":"Resources/tutorials/#git-github","title":"git &amp; github","text":"<p>\u3010Udemy\u4ed8\u8d39\u8bfe\u7a0b\u3011 Git &amp; GitHub - The Practical Guide \u2192Git&amp;GitHub \u4f7f\u7528\u6307\u5357\uff08\u4e2d\u82f1\u6587\u5b57\u5e55\uff09_\u54d4\u54e9\u54d4\u54e9_bilibili</p>"},{"location":"Resources/tutorials/#rust","title":"rust","text":"<p>1. Course Introduction_\u54d4\u54e9\u54d4\u54e9_bilibili</p> <p>\u3010Udemy\u4ed8\u8d39\u8bfe\u7a0b\u3011The Rust Programming Language\uff08\u4e2d\u82f1\u6587\u5b57\u5e55\uff09 \u2192 \u5b66\u4e60\u4e00\u79cd\u73b0\u4ee3\u3001\u5f3a\u5927\u800c\u5b89\u5168\u7684\u7cfb\u7edf\u7f16\u7a0b\u8bed\u8a00\uff01_\u54d4\u54e9\u54d4\u54e9_bilibili</p>"},{"location":"Resources/tutorials/#_3","title":"\u82f1\u8bed","text":"<p>\u3010Udemy\u6559\u7a0b\u3011\u82f1\u8bed\u53e3\u8bed\u8bcd\u6c47 English Vocabulary Launch Upgrade your speaking 90\u8282\u3010\u82f1\u8bed\u3011_\u54d4\u54e9\u54d4\u54e9_bilibili</p> <p>\u3010\u6cb9\u7ba1\u6700\u706b\u96c5\u601d\u8bcd\u6c47\u8bfe\u301130\u5929\u5e26\u4f60\u638c\u63e116500\u8bcd\u6c47 \u96c5\u601d\u7a33\u8fc78.5\uff01200\u96c6\u5b8c\u6574\u7248 \u9644\u96c5\u601d\u5b66\u4e60\u7c7d\u6599pdf_\u54d4\u54e9\u54d4\u54e9_bilibili</p>"},{"location":"Resources/tutorials/#golang","title":"Golang","text":"<p>\u3010Udemy\u9ad8\u5206\u4ed8\u8d39\u8bfe\u7a0b\u3011Golang \u4e2d\u57fa\u4e8e REST \u7684\u5fae\u670d\u52a1 API \u5f00\u53d1\uff08\u4e2d\u82f1\u6587\u5b57\u5e55\uff09_\u54d4\u54e9\u54d4\u54e9_bilibili</p> <p>\u3010Udemy\u4ed8\u8d39\u8bfe\u7a0b\u3011\u4f7f\u7528 Go (Golang) \u638c\u63e1\u591a\u7ebf\u7a0b\u7f16\u7a0b\uff08\u5728 Go Lang \u4e2d\u901a\u8fc7\u5b9e\u7528\u6709\u8da3\u7684\u793a\u4f8b\u4e86\u89e3\u591a\u7ebf\u7a0b\u3001\u5e76\u53d1\u548c\u5e76\u884c\u7f16\u7a0b\uff09\u4e2d\u82f1\u6587\u5b57\u5e55_\u54d4\u54e9\u54d4\u54e9_bilibili</p>"},{"location":"Resources/tutorials/#udemygolang__bilibili","title":"\u3010Udemy\u9ad8\u5206\u70ed\u95e8\u4ed8\u8d39\u8bfe\u7a0b\u3011Golang\uff1a\u5b8c\u6574\u5f00\u53d1\u8005\u6307\u5357\uff08\u57fa\u7840\u77e5\u8bc6\u548c\u9ad8\u7ea7\u7279\u6027\uff09\u4e2d\u82f1\u6587\u5b57\u5e55_\u54d4\u54e9\u54d4\u54e9_bilibili","text":""},{"location":"Resources/tutorials/#_4","title":"\u5927\u6570\u636e","text":"<p>\u3010Udemy\u70ed\u95e8\u8bfe\u7a0bApache Spark\u3011\u4f7f\u7528 RDD\u3001DataFrame\u3001SparkSQL\u3001Kafka\u548c\u673a\u5668\u5b66\u4e60\u5904\u7406\u5927\u6570\u636e\u548c\u5b9e\u65f6\u6d41\u5f0f\u4f20\u8f93\uff08\u4e2d\u82f1\u6587\u5b57\u5e55\uff09_\u54d4\u54e9\u54d4\u54e9_bilibili</p> <p>Udemy - Apache Kafka Series - Learn Apache Kafka for Beginners v3 2022-10(12-18)_\u54d4\u54e9\u54d4\u54e9_bilibili</p> <p>\u3010Udemy Apache Kafka \u6392\u540d\u7b2c\u4e00\u3011\u521d\u5b66\u8005\u5b9e\u8df5\u6307\u5357\uff0c\u5b66\u4e60 Apache Kafka 3.0 \u751f\u6001\u7cfb\u7edf\u3001\u6838\u5fc3\u6982\u5ff5 Apache Kafka v3_\u54d4\u54e9\u54d4\u54e9_bilibili</p>"},{"location":"Tools/IDE/IDEA/","title":"IDEA\u5feb\u6377\u952e","text":""},{"location":"Tools/IDE/IDEA/#_1","title":"\u76ee\u5f55","text":"<p>[toc]</p>"},{"location":"Tools/IDE/IDEA/#mac-win","title":"MAC &amp; WIN\u952e\u76d8\u547d\u4ee4","text":""},{"location":"Tools/IDE/IDEA/#macwin","title":"MAC\u548cWIN\u952e\u76d8\u6620\u5c04","text":"<p>Mac \u952e\u76d8\u7684\u529f\u80fd\u952e\u662f <code>fn</code> \u3001<code>control</code> \u3001<code>option</code> \u3001<code>command</code>\u3002</p> <p>Win \u952e\u76d8\u7684\u529f\u80fd\u952e\u662f <code>Control</code>\u3001 <code>Win</code>\u3001<code>Alt</code>\u3002</p> <ul> <li>(\u2303)Control-------------&gt; Ctrl</li> <li>(\u2325)Option-------------&gt; Alt</li> <li>(\u2318)Command--------&gt; Win</li> </ul>"},{"location":"Tools/IDE/IDEA/#_2","title":"\u5199\u4ee3\u7801\u6548\u7387\u5feb\u6377\u952e","text":"<p>\u4ee3\u7801\u63d0\u793a\u548c\u8865\u5168\uff1a<code>ctrl + space</code>\uff0c<code>enter</code></p> <p>\u5269\u4f59\u4ee3\u7801\u8865\u5168\u5f53\u524d\u8bed\u53e5\uff1a<code>ctrl + shift + enter</code></p> <p>\u4ee3\u7801\u5efa\u8bae\uff1a<code>alt + enter</code></p> <p>\u4ee3\u7801\u751f\u6210\uff1a<code>alt + insert</code></p> <p>\u7c7b\u3001\u53d8\u91cf\u3001\u65b9\u6cd5\u91cd\u547d\u540d\uff1a<code>shift + f6</code></p> <p>\u91cd\u65b0\u683c\u5f0f\u5316\u4ee3\u7801\uff1a<code>ctrl + alt + l</code></p> <p>\u63d0\u53d6\u503c\u4e3a\u53d8\u91cf\uff1a<code>ctrl + alt + v(var)</code></p> <p>\u63d0\u53d6\u503c\u4e3a\uff1a<code>ctrl + alt + f(field)</code></p> <p>\u63d0\u53d6\u503c\u4e3a\u5e38\u6570\uff1a<code>ctrl + alt + c(const)</code></p> <p>\u63d0\u53d6\u4e3a\u53c2\u6570\uff1a<code>ctrl + alt + p(parm)</code></p> <p>\u63d0\u53d6\u4e3a\u65b9\u6cd5\uff1a<code>ctrl + alt + m(method)</code></p> <p>\u5c06\u65b9\u6cd5\u8f6c\u4e3ainline\uff1a<code>ctrl + alt + n</code></p> <p>\u5feb\u901f\u5b9a\u4f4d\u9519\u8bef\uff1a<code>f2</code></p>"},{"location":"Tools/IDE/IDEA/#_3","title":"\u5bfc\u822a\u5feb\u6377\u952e","text":"<p>\u8df3\u8f6c\u5230\u65b9\u6cd5\u5b9a\u4e49\u4ee5\u53ca\u53cd\u5411\u64cd\u4f5c:</p> <ul> <li><code>ctrl + b</code></li> </ul> <p>\u8df3\u8f6c\u5230\u65b9\u6cd5\u5b9e\u73b0\u53ca\u53cd\u5411\u64cd\u4f5c\uff1a</p> <ul> <li><code>ctrl + alt + b</code></li> </ul> <p>super method\u72af\u6cd5\u5b9a\u4e49\uff1a</p> <ul> <li><code>ctrl + U</code></li> </ul> <p>\u5bfb\u627e\u6587\u4ef6\uff1a</p> <ul> <li><code>shift + shift</code></li> </ul> <p>\u5728files\u4e2d\u5bfb\u627e(\u5b57\u7b26\u4e32\u5339\u914d)\uff1a</p> <ul> <li><code>ctrl + alt + f</code></li> </ul> <p>\u8df3\u8f6c\u5230\u5de6\u4fa7\u9879\u76ee\u76ee\u5f55\uff1a</p> <ul> <li><code>alt + 1</code></li> <li><code>`command + 1</code></li> </ul> <p>\u4ece\u5de6\u4fa7\u9879\u76ee\u76ee\u5f55\u6811\u8df3\u8f6c\u5230\u7f16\u8f91\u5668\uff1a</p> <ul> <li><code>ESC</code></li> </ul> <p>\u5b9a\u4f4d\u6587\u4ef6\u5728\u9879\u76ee\u6587\u4ef6\u6811\u4e2d\u7684\u4f4d\u7f6e\uff1a</p> <ul> <li><code>alt + f1</code></li> </ul> <p>\u5207\u6362\u7f16\u8f91\u5668Tab\uff1a</p> <ul> <li><code>alt + \u2190(left)/\u2192(right)</code></li> </ul>"},{"location":"Tools/MAC/commond/","title":"Mac\u4e0b\u64cd\u4f5c\u53ca\u547d\u4ee4\u8bb0\u5f55","text":"<p>awesome-macos-command-line - Use your macOS terminal shell to do awesome things. (herrbischoff.com)</p>"},{"location":"blog/","title":"Blog","text":""}]}